
Ajax_Project_For_Repos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000254  08009b74  08009b74  00019b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc8  08009dc8  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd0  08009dd0  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd0  08009dd0  00019dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08009dd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004dfc  2000007c  08009e54  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e78  08009e54  00024e78  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000210ed  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000405a  00000000  00000000  00041199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bd8  00000000  00000000  000451f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a90  00000000  00000000  00046dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c20f  00000000  00000000  00048860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021034  00000000  00000000  00064a6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaf63  00000000  00000000  00085aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130a06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080b0  00000000  00000000  00130a58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b5c 	.word	0x08009b5c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08009b5c 	.word	0x08009b5c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <lcd_start_write>:
static uint16_t textsize_x = 1, textsize_y = 1;
static uint16_t textcolor = ST77XX_WHITE;
static uint16_t textbgcolor = ST77XX_BLACK;
static uint8_t wrap = 1;

static void lcd_start_write(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 8000588:	2200      	movs	r2, #0
 800058a:	2110      	movs	r1, #16
 800058c:	4802      	ldr	r0, [pc, #8]	; (8000598 <lcd_start_write+0x14>)
 800058e:	f002 f9d7 	bl	8002940 <HAL_GPIO_WritePin>
}
 8000592:	bf00      	nop
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020000 	.word	0x40020000

0800059c <lcd_end_write>:

static void lcd_end_write(void) {
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2110      	movs	r1, #16
 80005a4:	4802      	ldr	r0, [pc, #8]	; (80005b0 <lcd_end_write+0x14>)
 80005a6:	f002 f9cb 	bl	8002940 <HAL_GPIO_WritePin>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	40020000 	.word	0x40020000

080005b4 <lcd_start_command>:

static void lcd_start_command(void) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_RESET);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2140      	movs	r1, #64	; 0x40
 80005bc:	4802      	ldr	r0, [pc, #8]	; (80005c8 <lcd_start_command+0x14>)
 80005be:	f002 f9bf 	bl	8002940 <HAL_GPIO_WritePin>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020000 	.word	0x40020000

080005cc <lcd_start_data>:

static void lcd_start_data(void) {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_A0_GPIO_Port, LCD_A0_Pin, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4802      	ldr	r0, [pc, #8]	; (80005e0 <lcd_start_data+0x14>)
 80005d6:	f002 f9b3 	bl	8002940 <HAL_GPIO_WritePin>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40020000 	.word	0x40020000

080005e4 <lcd_spi_send_com>:

static void lcd_spi_send_com(uint8_t com) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef stat;
	lcd_start_command();
 80005ee:	f7ff ffe1 	bl	80005b4 <lcd_start_command>
	stat = HAL_SPI_Transmit(&hspi1, &com, 1, 1000);
 80005f2:	1df9      	adds	r1, r7, #7
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	2201      	movs	r2, #1
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <lcd_spi_send_com+0x30>)
 80005fc:	f002 fff7 	bl	80035ee <HAL_SPI_Transmit>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	if (stat != HAL_OK) {
 8000604:	7bfb      	ldrb	r3, [r7, #15]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d000      	beq.n	800060c <lcd_spi_send_com+0x28>
		while (1) {}
 800060a:	e7fe      	b.n	800060a <lcd_spi_send_com+0x26>
	}
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000140 	.word	0x20000140

08000618 <lcd_spi_send_data>:

static void lcd_spi_send_data(uint8_t *data, size_t size) {
 8000618:	b580      	push	{r7, lr}
 800061a:	b084      	sub	sp, #16
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
 8000620:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef stat;
	if (size) {
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d00f      	beq.n	8000648 <lcd_spi_send_data+0x30>
		lcd_start_data();
 8000628:	f7ff ffd0 	bl	80005cc <lcd_start_data>
		stat = HAL_SPI_Transmit(&hspi1, data, size, 1000);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b29a      	uxth	r2, r3
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	6879      	ldr	r1, [r7, #4]
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <lcd_spi_send_data+0x38>)
 8000638:	f002 ffd9 	bl	80035ee <HAL_SPI_Transmit>
 800063c:	4603      	mov	r3, r0
 800063e:	73fb      	strb	r3, [r7, #15]
		if (stat != HAL_OK) {
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d000      	beq.n	8000648 <lcd_spi_send_data+0x30>
			while (1) {}
 8000646:	e7fe      	b.n	8000646 <lcd_spi_send_data+0x2e>
		}
	}
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	20000140 	.word	0x20000140

08000654 <lcd_init>:
}

/**
 * -------------------------------------------------------------------
 */
int lcd_init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0
	uint8_t numCommands, cmd, numArgs;
	uint16_t ms;

	const uint8_t *ptr = Rcmd;
 800065a:	4b33      	ldr	r3, [pc, #204]	; (8000728 <lcd_init+0xd4>)
 800065c:	60bb      	str	r3, [r7, #8]

	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800065e:	2201      	movs	r2, #1
 8000660:	2108      	movs	r1, #8
 8000662:	4832      	ldr	r0, [pc, #200]	; (800072c <lcd_init+0xd8>)
 8000664:	f002 f96c 	bl	8002940 <HAL_GPIO_WritePin>
	osDelay(100);
 8000668:	2064      	movs	r0, #100	; 0x64
 800066a:	f005 f8d9 	bl	8005820 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800066e:	2200      	movs	r2, #0
 8000670:	2108      	movs	r1, #8
 8000672:	482e      	ldr	r0, [pc, #184]	; (800072c <lcd_init+0xd8>)
 8000674:	f002 f964 	bl	8002940 <HAL_GPIO_WritePin>
	osDelay(100);
 8000678:	2064      	movs	r0, #100	; 0x64
 800067a:	f005 f8d1 	bl	8005820 <osDelay>
	HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
 800067e:	2201      	movs	r2, #1
 8000680:	2108      	movs	r1, #8
 8000682:	482a      	ldr	r0, [pc, #168]	; (800072c <lcd_init+0xd8>)
 8000684:	f002 f95c 	bl	8002940 <HAL_GPIO_WritePin>
	osDelay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f005 f8c9 	bl	8005820 <osDelay>

	numCommands = *ptr++;
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	1c5a      	adds	r2, r3, #1
 8000692:	60ba      	str	r2, [r7, #8]
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	73fb      	strb	r3, [r7, #15]
	while (numCommands--) {
 8000698:	e035      	b.n	8000706 <lcd_init+0xb2>
		cmd = *ptr++;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	1c5a      	adds	r2, r3, #1
 800069e:	60ba      	str	r2, [r7, #8]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	71fb      	strb	r3, [r7, #7]
		numArgs = *ptr++;
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	1c5a      	adds	r2, r3, #1
 80006a8:	60ba      	str	r2, [r7, #8]
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	71bb      	strb	r3, [r7, #6]
		ms = numArgs & ST_CMD_DELAY;
 80006ae:	79bb      	ldrb	r3, [r7, #6]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b6:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~ST_CMD_DELAY;
 80006b8:	79bb      	ldrb	r3, [r7, #6]
 80006ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80006be:	71bb      	strb	r3, [r7, #6]
		lcd_start_write();
 80006c0:	f7ff ff60 	bl	8000584 <lcd_start_write>
		lcd_spi_send_com(cmd);
 80006c4:	79fb      	ldrb	r3, [r7, #7]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff8c 	bl	80005e4 <lcd_spi_send_com>
		lcd_spi_send_data((uint8_t*)ptr, numArgs);
 80006cc:	79bb      	ldrb	r3, [r7, #6]
 80006ce:	4619      	mov	r1, r3
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	f7ff ffa1 	bl	8000618 <lcd_spi_send_data>
		lcd_end_write();
 80006d6:	f7ff ff61 	bl	800059c <lcd_end_write>
		ptr += numArgs;
 80006da:	79bb      	ldrb	r3, [r7, #6]
 80006dc:	68ba      	ldr	r2, [r7, #8]
 80006de:	4413      	add	r3, r2
 80006e0:	60bb      	str	r3, [r7, #8]

		if (ms) {
 80006e2:	89bb      	ldrh	r3, [r7, #12]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d00e      	beq.n	8000706 <lcd_init+0xb2>
			ms = *ptr++;
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	60ba      	str	r2, [r7, #8]
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	81bb      	strh	r3, [r7, #12]
			if (ms == 255)
 80006f2:	89bb      	ldrh	r3, [r7, #12]
 80006f4:	2bff      	cmp	r3, #255	; 0xff
 80006f6:	d102      	bne.n	80006fe <lcd_init+0xaa>
				ms = 500;
 80006f8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80006fc:	81bb      	strh	r3, [r7, #12]
			osDelay(ms);
 80006fe:	89bb      	ldrh	r3, [r7, #12]
 8000700:	4618      	mov	r0, r3
 8000702:	f005 f88d 	bl	8005820 <osDelay>
	while (numCommands--) {
 8000706:	7bfb      	ldrb	r3, [r7, #15]
 8000708:	1e5a      	subs	r2, r3, #1
 800070a:	73fa      	strb	r2, [r7, #15]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d1c4      	bne.n	800069a <lcd_init+0x46>
		}
	}

	lcd_start_write();
 8000710:	f7ff ff38 	bl	8000584 <lcd_start_write>
	lcd_set_rotation(2);
 8000714:	2002      	movs	r0, #2
 8000716:	f000 f80b 	bl	8000730 <lcd_set_rotation>
	lcd_end_write();
 800071a:	f7ff ff3f 	bl	800059c <lcd_end_write>

	return 0;
 800071e:	2300      	movs	r3, #0
}
 8000720:	4618      	mov	r0, r3
 8000722:	3710      	adds	r7, #16
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}
 8000728:	08009c3c 	.word	0x08009c3c
 800072c:	40020000 	.word	0x40020000

08000730 <lcd_set_rotation>:

int lcd_set_rotation(int m) {
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint8_t madctl = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	73fb      	strb	r3, [r7, #15]

	rotation = m & 3; // can't be higher than 3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	b2da      	uxtb	r2, r3
 8000746:	4b35      	ldr	r3, [pc, #212]	; (800081c <lcd_set_rotation+0xec>)
 8000748:	701a      	strb	r2, [r3, #0]

	switch (rotation) {
 800074a:	4b34      	ldr	r3, [pc, #208]	; (800081c <lcd_set_rotation+0xec>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b03      	cmp	r3, #3
 8000750:	d856      	bhi.n	8000800 <lcd_set_rotation+0xd0>
 8000752:	a201      	add	r2, pc, #4	; (adr r2, 8000758 <lcd_set_rotation+0x28>)
 8000754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000758:	08000769 	.word	0x08000769
 800075c:	0800078f 	.word	0x0800078f
 8000760:	080007b5 	.word	0x080007b5
 8000764:	080007db 	.word	0x080007db
	case 0:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 8000768:	23c0      	movs	r3, #192	; 0xc0
 800076a:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 800076c:	4b2c      	ldr	r3, [pc, #176]	; (8000820 <lcd_set_rotation+0xf0>)
 800076e:	22a0      	movs	r2, #160	; 0xa0
 8000770:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 8000772:	4b2c      	ldr	r3, [pc, #176]	; (8000824 <lcd_set_rotation+0xf4>)
 8000774:	2280      	movs	r2, #128	; 0x80
 8000776:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <lcd_set_rotation+0xf8>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b29a      	uxth	r2, r3
 800077e:	4b2b      	ldr	r3, [pc, #172]	; (800082c <lcd_set_rotation+0xfc>)
 8000780:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <lcd_set_rotation+0x100>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b2a      	ldr	r3, [pc, #168]	; (8000834 <lcd_set_rotation+0x104>)
 800078a:	801a      	strh	r2, [r3, #0]
		break;
 800078c:	e038      	b.n	8000800 <lcd_set_rotation+0xd0>
	case 1:
		madctl = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 800078e:	23a0      	movs	r3, #160	; 0xa0
 8000790:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <lcd_set_rotation+0xf4>)
 8000794:	22a0      	movs	r2, #160	; 0xa0
 8000796:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 8000798:	4b21      	ldr	r3, [pc, #132]	; (8000820 <lcd_set_rotation+0xf0>)
 800079a:	2280      	movs	r2, #128	; 0x80
 800079c:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <lcd_set_rotation+0xf8>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b29a      	uxth	r2, r3
 80007a4:	4b23      	ldr	r3, [pc, #140]	; (8000834 <lcd_set_rotation+0x104>)
 80007a6:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80007a8:	4b21      	ldr	r3, [pc, #132]	; (8000830 <lcd_set_rotation+0x100>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	b29a      	uxth	r2, r3
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <lcd_set_rotation+0xfc>)
 80007b0:	801a      	strh	r2, [r3, #0]
		break;
 80007b2:	e025      	b.n	8000800 <lcd_set_rotation+0xd0>
	case 2:
		madctl = ST77XX_MADCTL_RGB;
 80007b4:	2300      	movs	r3, #0
 80007b6:	73fb      	strb	r3, [r7, #15]
		_height = ST7735_TFTHEIGHT_160;
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <lcd_set_rotation+0xf0>)
 80007ba:	22a0      	movs	r2, #160	; 0xa0
 80007bc:	801a      	strh	r2, [r3, #0]
		_width = ST7735_TFTWIDTH_128;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <lcd_set_rotation+0xf4>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	801a      	strh	r2, [r3, #0]
		_xstart = _colstart;
 80007c4:	4b18      	ldr	r3, [pc, #96]	; (8000828 <lcd_set_rotation+0xf8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	b29a      	uxth	r2, r3
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <lcd_set_rotation+0xfc>)
 80007cc:	801a      	strh	r2, [r3, #0]
		_ystart = _rowstart;
 80007ce:	4b18      	ldr	r3, [pc, #96]	; (8000830 <lcd_set_rotation+0x100>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b29a      	uxth	r2, r3
 80007d4:	4b17      	ldr	r3, [pc, #92]	; (8000834 <lcd_set_rotation+0x104>)
 80007d6:	801a      	strh	r2, [r3, #0]
		break;
 80007d8:	e012      	b.n	8000800 <lcd_set_rotation+0xd0>
	case 3:
		madctl = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST7735_MADCTL_BGR;
 80007da:	2368      	movs	r3, #104	; 0x68
 80007dc:	73fb      	strb	r3, [r7, #15]
		_width = ST7735_TFTHEIGHT_160;
 80007de:	4b11      	ldr	r3, [pc, #68]	; (8000824 <lcd_set_rotation+0xf4>)
 80007e0:	22a0      	movs	r2, #160	; 0xa0
 80007e2:	801a      	strh	r2, [r3, #0]
		_height = ST7735_TFTWIDTH_128;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <lcd_set_rotation+0xf0>)
 80007e6:	2280      	movs	r2, #128	; 0x80
 80007e8:	801a      	strh	r2, [r3, #0]
		_ystart = _colstart;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <lcd_set_rotation+0xf8>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	b29a      	uxth	r2, r3
 80007f0:	4b10      	ldr	r3, [pc, #64]	; (8000834 <lcd_set_rotation+0x104>)
 80007f2:	801a      	strh	r2, [r3, #0]
		_xstart = _rowstart;
 80007f4:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <lcd_set_rotation+0x100>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	b29a      	uxth	r2, r3
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <lcd_set_rotation+0xfc>)
 80007fc:	801a      	strh	r2, [r3, #0]
		break;
 80007fe:	bf00      	nop
	}

	lcd_spi_send_com(ST77XX_MADCTL);
 8000800:	2036      	movs	r0, #54	; 0x36
 8000802:	f7ff feef 	bl	80005e4 <lcd_spi_send_com>
	lcd_spi_send_data(&madctl, 1);
 8000806:	f107 030f 	add.w	r3, r7, #15
 800080a:	2101      	movs	r1, #1
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff03 	bl	8000618 <lcd_spi_send_data>
	return 0;
 8000812:	2300      	movs	r3, #0
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000098 	.word	0x20000098
 8000820:	200000a0 	.word	0x200000a0
 8000824:	2000009e 	.word	0x2000009e
 8000828:	200000a2 	.word	0x200000a2
 800082c:	2000009a 	.word	0x2000009a
 8000830:	200000a3 	.word	0x200000a3
 8000834:	2000009c 	.word	0x2000009c

08000838 <__io_getchar>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
char text[100];

int __io_getchar(void) {
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
	rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <__io_getchar+0x68>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 8000848:	4a16      	ldr	r2, [pc, #88]	; (80008a4 <__io_getchar+0x6c>)
 800084a:	4413      	add	r3, r2
 800084c:	4a16      	ldr	r2, [pc, #88]	; (80008a8 <__io_getchar+0x70>)
 800084e:	6013      	str	r3, [r2, #0]

	while (rx_tail == rx_head) {
 8000850:	e008      	b.n	8000864 <__io_getchar+0x2c>
		rx_head = &rx_buffer[UART_RX_BUF_SIZE - hdma_usart1_rx.Instance->NDTR];
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <__io_getchar+0x68>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
 800085c:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <__io_getchar+0x6c>)
 800085e:	4413      	add	r3, r2
 8000860:	4a11      	ldr	r2, [pc, #68]	; (80008a8 <__io_getchar+0x70>)
 8000862:	6013      	str	r3, [r2, #0]
	while (rx_tail == rx_head) {
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <__io_getchar+0x74>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <__io_getchar+0x70>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d0f0      	beq.n	8000852 <__io_getchar+0x1a>
//		osDelay(1);
	}

	uint8_t b = *rx_tail;
 8000870:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <__io_getchar+0x74>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	71fb      	strb	r3, [r7, #7]

	if (++rx_tail == (rx_buffer + UART_RX_BUF_SIZE))
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <__io_getchar+0x74>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	4a0b      	ldr	r2, [pc, #44]	; (80008ac <__io_getchar+0x74>)
 8000880:	6013      	str	r3, [r2, #0]
 8000882:	4b0a      	ldr	r3, [pc, #40]	; (80008ac <__io_getchar+0x74>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a0a      	ldr	r2, [pc, #40]	; (80008b0 <__io_getchar+0x78>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d102      	bne.n	8000892 <__io_getchar+0x5a>
//	if (++rx_tail == &rx_buffer[UART_RX_BUF_SIZE])
		rx_tail = rx_buffer;
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <__io_getchar+0x74>)
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <__io_getchar+0x6c>)
 8000890:	601a      	str	r2, [r3, #0]

	return (int)b;
 8000892:	79fb      	ldrb	r3, [r7, #7]
}
 8000894:	4618      	mov	r0, r3
 8000896:	370c      	adds	r7, #12
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	200002b0 	.word	0x200002b0
 80008a4:	20000324 	.word	0x20000324
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000004 	.word	0x20000004
 80008b0:	200003ec 	.word	0x200003ec

080008b4 <__io_putchar>:

int __io_putchar(int ch) {
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 100);
 80008bc:	1d39      	adds	r1, r7, #4
 80008be:	2364      	movs	r3, #100	; 0x64
 80008c0:	2201      	movs	r2, #1
 80008c2:	4804      	ldr	r0, [pc, #16]	; (80008d4 <__io_putchar+0x20>)
 80008c4:	f003 fd83 	bl	80043ce <HAL_UART_Transmit>
	return 0;
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000228 	.word	0x20000228

080008d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008de:	f000 fec3 	bl	8001668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e2:	f000 f8a3 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e6:	f000 fa93 	bl	8000e10 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ea:	f000 fa71 	bl	8000dd0 <MX_DMA_Init>
  MX_ADC1_Init();
 80008ee:	f000 f907 	bl	8000b00 <MX_ADC1_Init>
  MX_TIM9_Init();
 80008f2:	f000 f9bb 	bl	8000c6c <MX_TIM9_Init>
  MX_TIM10_Init();
 80008f6:	f000 f9f3 	bl	8000ce0 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 80008fa:	f000 fa15 	bl	8000d28 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80008fe:	f000 f951 	bl	8000ba4 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000902:	f000 f97d 	bl	8000c00 <MX_SPI1_Init>
  MX_USART6_UART_Init();
 8000906:	f000 fa39 	bl	8000d7c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  if (HAL_UART_Receive_DMA(&huart1, rx_buffer, sizeof(rx_buffer)) != HAL_OK) {
 800090a:	22c8      	movs	r2, #200	; 0xc8
 800090c:	4934      	ldr	r1, [pc, #208]	; (80009e0 <main+0x108>)
 800090e:	4835      	ldr	r0, [pc, #212]	; (80009e4 <main+0x10c>)
 8000910:	f003 fdef 	bl	80044f2 <HAL_UART_Receive_DMA>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d012      	beq.n	8000940 <main+0x68>
	  snprintf(text, countof(text), "Error start UART RX %d\n", __LINE__);
 800091a:	23c3      	movs	r3, #195	; 0xc3
 800091c:	4a32      	ldr	r2, [pc, #200]	; (80009e8 <main+0x110>)
 800091e:	2164      	movs	r1, #100	; 0x64
 8000920:	4832      	ldr	r0, [pc, #200]	; (80009ec <main+0x114>)
 8000922:	f008 f953 	bl	8008bcc <sniprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 8000926:	2164      	movs	r1, #100	; 0x64
 8000928:	4830      	ldr	r0, [pc, #192]	; (80009ec <main+0x114>)
 800092a:	f008 f9c6 	bl	8008cba <strnlen>
 800092e:	4603      	mov	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	492d      	ldr	r1, [pc, #180]	; (80009ec <main+0x114>)
 8000938:	482a      	ldr	r0, [pc, #168]	; (80009e4 <main+0x10c>)
 800093a:	f003 fd48 	bl	80043ce <HAL_UART_Transmit>
	  while (1) {}
 800093e:	e7fe      	b.n	800093e <main+0x66>
  }

  snprintf(text, countof(text), "Start UART RX %d\n", __LINE__);
 8000940:	23c8      	movs	r3, #200	; 0xc8
 8000942:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <main+0x118>)
 8000944:	2164      	movs	r1, #100	; 0x64
 8000946:	4829      	ldr	r0, [pc, #164]	; (80009ec <main+0x114>)
 8000948:	f008 f940 	bl	8008bcc <sniprintf>
  HAL_UART_Transmit(&huart1, (uint8_t*)text, strnlen(text, countof(text)), 1000);
 800094c:	2164      	movs	r1, #100	; 0x64
 800094e:	4827      	ldr	r0, [pc, #156]	; (80009ec <main+0x114>)
 8000950:	f008 f9b3 	bl	8008cba <strnlen>
 8000954:	4603      	mov	r3, r0
 8000956:	b29a      	uxth	r2, r3
 8000958:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095c:	4923      	ldr	r1, [pc, #140]	; (80009ec <main+0x114>)
 800095e:	4821      	ldr	r0, [pc, #132]	; (80009e4 <main+0x10c>)
 8000960:	f003 fd35 	bl	80043ce <HAL_UART_Transmit>
//  lcd_print("\nNew line!");

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000964:	f004 ff12 	bl	800578c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of muxUART_LOG */
  muxUART_LOGHandle = osMutexNew(&muxUART_LOG_attributes);
 8000968:	4822      	ldr	r0, [pc, #136]	; (80009f4 <main+0x11c>)
 800096a:	f004 ff74 	bl	8005856 <osMutexNew>
 800096e:	4603      	mov	r3, r0
 8000970:	4a21      	ldr	r2, [pc, #132]	; (80009f8 <main+0x120>)
 8000972:	6013      	str	r3, [r2, #0]

  /* creation of muxLcd */
  muxLcdHandle = osMutexNew(&muxLcd_attributes);
 8000974:	4821      	ldr	r0, [pc, #132]	; (80009fc <main+0x124>)
 8000976:	f004 ff6e 	bl	8005856 <osMutexNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a20      	ldr	r2, [pc, #128]	; (8000a00 <main+0x128>)
 800097e:	6013      	str	r3, [r2, #0]

  /* creation of muxUART_WIFI */
  muxUART_WIFIHandle = osMutexNew(&muxUART_WIFI_attributes);
 8000980:	4820      	ldr	r0, [pc, #128]	; (8000a04 <main+0x12c>)
 8000982:	f004 ff68 	bl	8005856 <osMutexNew>
 8000986:	4603      	mov	r3, r0
 8000988:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <main+0x130>)
 800098a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of semUART_TX_WIFI */
  semUART_TX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_TX_WIFI_attributes);
 800098c:	4a1f      	ldr	r2, [pc, #124]	; (8000a0c <main+0x134>)
 800098e:	2101      	movs	r1, #1
 8000990:	2001      	movs	r0, #1
 8000992:	f004 ffe6 	bl	8005962 <osSemaphoreNew>
 8000996:	4603      	mov	r3, r0
 8000998:	4a1d      	ldr	r2, [pc, #116]	; (8000a10 <main+0x138>)
 800099a:	6013      	str	r3, [r2, #0]

  /* creation of semUART_RX_WIFI */
  semUART_RX_WIFIHandle = osSemaphoreNew(1, 1, &semUART_RX_WIFI_attributes);
 800099c:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <main+0x13c>)
 800099e:	2101      	movs	r1, #1
 80009a0:	2001      	movs	r0, #1
 80009a2:	f004 ffde 	bl	8005962 <osSemaphoreNew>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a1b      	ldr	r2, [pc, #108]	; (8000a18 <main+0x140>)
 80009aa:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  lcd_init();
 80009ac:	f7ff fe52 	bl	8000654 <lcd_init>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009b0:	f004 ff10 	bl	80057d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("This text is from printf(), %d, %s, %s, %s\n", __LINE__, __FILE__, __FUNCTION__, __PRETTY_FUNCTION__);
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <main+0x144>)
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <main+0x148>)
 80009ba:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <main+0x14c>)
 80009bc:	f44f 7190 	mov.w	r1, #288	; 0x120
 80009c0:	4819      	ldr	r0, [pc, #100]	; (8000a28 <main+0x150>)
 80009c2:	f008 f871 	bl	8008aa8 <iprintf>

  while (1)
  {
	  int c = __io_getchar();
 80009c6:	f7ff ff37 	bl	8000838 <__io_getchar>
 80009ca:	4603      	mov	r3, r0
 80009cc:	607b      	str	r3, [r7, #4]
	  HAL_UART_Transmit(&huart1, (uint8_t*)&c, 1, 1000);
 80009ce:	1d39      	adds	r1, r7, #4
 80009d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d4:	2201      	movs	r2, #1
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <main+0x10c>)
 80009d8:	f003 fcf9 	bl	80043ce <HAL_UART_Transmit>
  {
 80009dc:	e7f3      	b.n	80009c6 <main+0xee>
 80009de:	bf00      	nop
 80009e0:	20000324 	.word	0x20000324
 80009e4:	20000228 	.word	0x20000228
 80009e8:	08009bb8 	.word	0x08009bb8
 80009ec:	200003ec 	.word	0x200003ec
 80009f0:	08009bd0 	.word	0x08009bd0
 80009f4:	08009cb0 	.word	0x08009cb0
 80009f8:	20000310 	.word	0x20000310
 80009fc:	08009cc0 	.word	0x08009cc0
 8000a00:	20000314 	.word	0x20000314
 8000a04:	08009cd0 	.word	0x08009cd0
 8000a08:	20000318 	.word	0x20000318
 8000a0c:	08009ce0 	.word	0x08009ce0
 8000a10:	2000031c 	.word	0x2000031c
 8000a14:	08009cf0 	.word	0x08009cf0
 8000a18:	20000320 	.word	0x20000320
 8000a1c:	08009d08 	.word	0x08009d08
 8000a20:	08009d00 	.word	0x08009d00
 8000a24:	08009be4 	.word	0x08009be4
 8000a28:	08009bf8 	.word	0x08009bf8

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b094      	sub	sp, #80	; 0x50
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0320 	add.w	r3, r7, #32
 8000a36:	2230      	movs	r2, #48	; 0x30
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f007 ff97 	bl	800896e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
 8000a54:	4b28      	ldr	r3, [pc, #160]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a58:	4a27      	ldr	r2, [pc, #156]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a60:	4b25      	ldr	r3, [pc, #148]	; (8000af8 <SystemClock_Config+0xcc>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a68:	60bb      	str	r3, [r7, #8]
 8000a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <SystemClock_Config+0xd0>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a78:	4a20      	ldr	r2, [pc, #128]	; (8000afc <SystemClock_Config+0xd0>)
 8000a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <SystemClock_Config+0xd0>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a96:	2302      	movs	r3, #2
 8000a98:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000aa0:	2319      	movs	r3, #25
 8000aa2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa4:	23a8      	movs	r3, #168	; 0xa8
 8000aa6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f002 f8b9 	bl	8002c2c <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ac0:	f000 fa63 	bl	8000f8a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2102      	movs	r1, #2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f002 fb1b 	bl	800311c <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000aec:	f000 fa4d 	bl	8000f8a <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3750      	adds	r7, #80	; 0x50
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b06:	463b      	mov	r3, r7
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b12:	4b21      	ldr	r3, [pc, #132]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b14:	4a21      	ldr	r2, [pc, #132]	; (8000b9c <MX_ADC1_Init+0x9c>)
 8000b16:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b1e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000b26:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b2c:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b3a:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b40:	4b15      	ldr	r3, [pc, #84]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b42:	4a17      	ldr	r2, [pc, #92]	; (8000ba0 <MX_ADC1_Init+0xa0>)
 8000b44:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b46:	4b14      	ldr	r3, [pc, #80]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b4c:	4b12      	ldr	r3, [pc, #72]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b5a:	4b0f      	ldr	r3, [pc, #60]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b62:	f000 fdf3 	bl	800174c <HAL_ADC_Init>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b6c:	f000 fa0d 	bl	8000f8a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000b74:	2301      	movs	r3, #1
 8000b76:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_ADC1_Init+0x98>)
 8000b82:	f000 fe27 	bl	80017d4 <HAL_ADC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b8c:	f000 f9fd 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	200000a4 	.word	0x200000a4
 8000b9c:	40012000 	.word	0x40012000
 8000ba0:	0f000001 	.word	0x0f000001

08000ba4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000baa:	4a13      	ldr	r2, [pc, #76]	; (8000bf8 <MX_I2C1_Init+0x54>)
 8000bac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bb0:	4a12      	ldr	r2, [pc, #72]	; (8000bfc <MX_I2C1_Init+0x58>)
 8000bb2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bc2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bc6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bc8:	4b0a      	ldr	r3, [pc, #40]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bce:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bd4:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <MX_I2C1_Init+0x50>)
 8000be2:	f001 fedf 	bl	80029a4 <HAL_I2C_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bec:	f000 f9cd 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000ec 	.word	0x200000ec
 8000bf8:	40005400 	.word	0x40005400
 8000bfc:	000186a0 	.word	0x000186a0

08000c00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c04:	4b17      	ldr	r3, [pc, #92]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c06:	4a18      	ldr	r2, [pc, #96]	; (8000c68 <MX_SPI1_Init+0x68>)
 8000c08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c12:	4b14      	ldr	r3, [pc, #80]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c18:	4b12      	ldr	r3, [pc, #72]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1e:	4b11      	ldr	r3, [pc, #68]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c2a:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c2c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c44:	4b07      	ldr	r3, [pc, #28]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c4c:	220a      	movs	r2, #10
 8000c4e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c50:	4804      	ldr	r0, [pc, #16]	; (8000c64 <MX_SPI1_Init+0x64>)
 8000c52:	f002 fc43 	bl	80034dc <HAL_SPI_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c5c:	f000 f995 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000140 	.word	0x20000140
 8000c68:	40013000 	.word	0x40013000

08000c6c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c72:	463b      	mov	r3, r7
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c7e:	4b16      	ldr	r3, [pc, #88]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000c80:	4a16      	ldr	r2, [pc, #88]	; (8000cdc <MX_TIM9_Init+0x70>)
 8000c82:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 839;
 8000c84:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000c86:	f240 3247 	movw	r2, #839	; 0x347
 8000c8a:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 49999;
 8000c92:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000c94:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000c98:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000ca6:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000ca8:	f002 ffc6 	bl	8003c38 <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM9_Init+0x4a>
  {
    Error_Handler();
 8000cb2:	f000 f96a 	bl	8000f8a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM9_Init+0x6c>)
 8000cc2:	f003 f910 	bl	8003ee6 <HAL_TIM_ConfigClockSource>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM9_Init+0x64>
  {
    Error_Handler();
 8000ccc:	f000 f95d 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000198 	.word	0x20000198
 8000cdc:	40014000 	.word	0x40014000

08000ce0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <MX_TIM10_Init+0x40>)
 8000ce6:	4a0f      	ldr	r2, [pc, #60]	; (8000d24 <MX_TIM10_Init+0x44>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84;
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <MX_TIM10_Init+0x40>)
 8000cec:	2254      	movs	r2, #84	; 0x54
 8000cee:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <MX_TIM10_Init+0x40>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 999;
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <MX_TIM10_Init+0x40>)
 8000cf8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cfc:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <MX_TIM10_Init+0x40>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <MX_TIM10_Init+0x40>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000d0a:	4805      	ldr	r0, [pc, #20]	; (8000d20 <MX_TIM10_Init+0x40>)
 8000d0c:	f002 ff94 	bl	8003c38 <HAL_TIM_Base_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000d16:	f000 f938 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	200001e0 	.word	0x200001e0
 8000d24:	40014400 	.word	0x40014400

08000d28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d2c:	4b11      	ldr	r3, [pc, #68]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d2e:	4a12      	ldr	r2, [pc, #72]	; (8000d78 <MX_USART1_UART_Init+0x50>)
 8000d30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d32:	4b10      	ldr	r3, [pc, #64]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d40:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d46:	4b0b      	ldr	r3, [pc, #44]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d4e:	220c      	movs	r2, #12
 8000d50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d52:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d58:	4b06      	ldr	r3, [pc, #24]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_USART1_UART_Init+0x4c>)
 8000d60:	f003 fae8 	bl	8004334 <HAL_UART_Init>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6a:	f000 f90e 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000228 	.word	0x20000228
 8000d78:	40011000 	.word	0x40011000

08000d7c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d80:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000d82:	4a12      	ldr	r2, [pc, #72]	; (8000dcc <MX_USART6_UART_Init+0x50>)
 8000d84:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d86:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d8c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000da2:	220c      	movs	r2, #12
 8000da4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART6_UART_Init+0x4c>)
 8000db4:	f003 fabe 	bl	8004334 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000dbe:	f000 f8e4 	bl	8000f8a <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	2000026c 	.word	0x2000026c
 8000dcc:	40011400 	.word	0x40011400

08000dd0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a0b      	ldr	r2, [pc, #44]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000de0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_DMA_Init+0x3c>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dee:	607b      	str	r3, [r7, #4]
 8000df0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2105      	movs	r1, #5
 8000df6:	203a      	movs	r0, #58	; 0x3a
 8000df8:	f000 ffe5 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000dfc:	203a      	movs	r0, #58	; 0x3a
 8000dfe:	f000 fffe 	bl	8001dfe <HAL_NVIC_EnableIRQ>

}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40023800 	.word	0x40023800

08000e10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e16:	f107 0314 	add.w	r3, r7, #20
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b4e      	ldr	r3, [pc, #312]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	4a4d      	ldr	r2, [pc, #308]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e30:	f043 0304 	orr.w	r3, r3, #4
 8000e34:	6313      	str	r3, [r2, #48]	; 0x30
 8000e36:	4b4b      	ldr	r3, [pc, #300]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	f003 0304 	and.w	r3, r3, #4
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b47      	ldr	r3, [pc, #284]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a46      	ldr	r2, [pc, #280]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b44      	ldr	r3, [pc, #272]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	4b40      	ldr	r3, [pc, #256]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e66:	4a3f      	ldr	r2, [pc, #252]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e68:	f043 0301 	orr.w	r3, r3, #1
 8000e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	f003 0301 	and.w	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
 8000e78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	4b39      	ldr	r3, [pc, #228]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e82:	4a38      	ldr	r2, [pc, #224]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e84:	f043 0302 	orr.w	r3, r3, #2
 8000e88:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8a:	4b36      	ldr	r3, [pc, #216]	; (8000f64 <MX_GPIO_Init+0x154>)
 8000e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8e:	f003 0302 	and.w	r3, r3, #2
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9c:	4832      	ldr	r0, [pc, #200]	; (8000f68 <MX_GPIO_Init+0x158>)
 8000e9e:	f001 fd4f 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin, GPIO_PIN_SET);
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	2158      	movs	r1, #88	; 0x58
 8000ea6:	4831      	ldr	r0, [pc, #196]	; (8000f6c <MX_GPIO_Init+0x15c>)
 8000ea8:	f001 fd4a 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GREEN_CAR_Pin|YELLOW_CAR_Pin|RED_CAR_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000eb2:	482f      	ldr	r0, [pc, #188]	; (8000f70 <MX_GPIO_Init+0x160>)
 8000eb4:	f001 fd44 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREEN_MEN_Pin|YELLOW_MEN_Pin|RED_MEN_Pin, GPIO_PIN_RESET);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000ebe:	482b      	ldr	r0, [pc, #172]	; (8000f6c <MX_GPIO_Init+0x15c>)
 8000ec0:	f001 fd3e 	bl	8002940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ec4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ec8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	f107 0314 	add.w	r3, r7, #20
 8000eda:	4619      	mov	r1, r3
 8000edc:	4822      	ldr	r0, [pc, #136]	; (8000f68 <MX_GPIO_Init+0x158>)
 8000ede:	f001 fbab 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RESET_Pin LCD_CS_Pin LCD_A0_Pin GREEN_MEN_Pin
                           YELLOW_MEN_Pin RED_MEN_Pin */
  GPIO_InitStruct.Pin = LCD_RESET_Pin|LCD_CS_Pin|LCD_A0_Pin|GREEN_MEN_Pin
 8000ee2:	f44f 63eb 	mov.w	r3, #1880	; 0x758
 8000ee6:	617b      	str	r3, [r7, #20]
                          |YELLOW_MEN_Pin|RED_MEN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	481c      	ldr	r0, [pc, #112]	; (8000f6c <MX_GPIO_Init+0x15c>)
 8000efc:	f001 fb9c 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON2_Pin BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin|BUTTON_Pin;
 8000f00:	f240 4304 	movw	r3, #1028	; 0x404
 8000f04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000f06:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000f0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	4619      	mov	r1, r3
 8000f16:	4816      	ldr	r0, [pc, #88]	; (8000f70 <MX_GPIO_Init+0x160>)
 8000f18:	f001 fb8e 	bl	8002638 <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_CAR_Pin YELLOW_CAR_Pin RED_CAR_Pin */
  GPIO_InitStruct.Pin = GREEN_CAR_Pin|YELLOW_CAR_Pin|RED_CAR_Pin;
 8000f1c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	4619      	mov	r1, r3
 8000f34:	480e      	ldr	r0, [pc, #56]	; (8000f70 <MX_GPIO_Init+0x160>)
 8000f36:	f001 fb7f 	bl	8002638 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	2008      	movs	r0, #8
 8000f40:	f000 ff41 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000f44:	2008      	movs	r0, #8
 8000f46:	f000 ff5a 	bl	8001dfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2105      	movs	r1, #5
 8000f4e:	2028      	movs	r0, #40	; 0x28
 8000f50:	f000 ff39 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f54:	2028      	movs	r0, #40	; 0x28
 8000f56:	f000 ff52 	bl	8001dfe <HAL_NVIC_EnableIRQ>

}
 8000f5a:	bf00      	nop
 8000f5c:	3728      	adds	r7, #40	; 0x28
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400

08000f74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	80fb      	strh	r3, [r7, #6]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8e:	b672      	cpsid	i
}
 8000f90:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <Error_Handler+0x8>

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_MspInit+0x64>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <HAL_MspInit+0x64>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_MspInit+0x64>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_MspInit+0x64>)
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_MspInit+0x64>)
 8000fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_MspInit+0x64>)
 8000fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	210f      	movs	r1, #15
 8000fd6:	f06f 0001 	mvn.w	r0, #1
 8000fda:	f000 fef4 	bl	8001dc6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2105      	movs	r1, #5
 8000fe2:	2005      	movs	r0, #5
 8000fe4:	f000 feef 	bl	8001dc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000fe8:	2005      	movs	r0, #5
 8000fea:	f000 ff08 	bl	8001dfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800

08000ffc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_ADC_MspInit+0x7c>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d127      	bne.n	800106e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b16      	ldr	r3, [pc, #88]	; (800107c <HAL_ADC_MspInit+0x80>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001026:	4a15      	ldr	r2, [pc, #84]	; (800107c <HAL_ADC_MspInit+0x80>)
 8001028:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102c:	6453      	str	r3, [r2, #68]	; 0x44
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_ADC_MspInit+0x80>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_ADC_MspInit+0x80>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_ADC_MspInit+0x80>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_ADC_MspInit+0x80>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = POT_Pin;
 8001056:	2301      	movs	r3, #1
 8001058:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800105a:	2303      	movs	r3, #3
 800105c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_GPIO_Port, &GPIO_InitStruct);
 8001062:	f107 0314 	add.w	r3, r7, #20
 8001066:	4619      	mov	r1, r3
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <HAL_ADC_MspInit+0x84>)
 800106a:	f001 fae5 	bl	8002638 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	; 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40012000 	.word	0x40012000
 800107c:	40023800 	.word	0x40023800
 8001080:	40020000 	.word	0x40020000

08001084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08a      	sub	sp, #40	; 0x28
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800108c:	f107 0314 	add.w	r3, r7, #20
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_I2C_MspInit+0x84>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d12c      	bne.n	8001100 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	613b      	str	r3, [r7, #16]
 80010aa:	4b18      	ldr	r3, [pc, #96]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a17      	ldr	r2, [pc, #92]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b15      	ldr	r3, [pc, #84]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c8:	2312      	movs	r3, #18
 80010ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d0:	2303      	movs	r3, #3
 80010d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d4:	2304      	movs	r3, #4
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480c      	ldr	r0, [pc, #48]	; (8001110 <HAL_I2C_MspInit+0x8c>)
 80010e0:	f001 faaa 	bl	8002638 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f2:	6413      	str	r3, [r2, #64]	; 0x40
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <HAL_I2C_MspInit+0x88>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40005400 	.word	0x40005400
 800110c:	40023800 	.word	0x40023800
 8001110:	40020400 	.word	0x40020400

08001114 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	; 0x28
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_SPI_MspInit+0x94>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d133      	bne.n	800119e <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_SPI_MspInit+0x98>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_SPI_MspInit+0x98>)
 8001140:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001144:	6453      	str	r3, [r2, #68]	; 0x44
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_SPI_MspInit+0x98>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800114e:	613b      	str	r3, [r7, #16]
 8001150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_SPI_MspInit+0x98>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_SPI_MspInit+0x98>)
 800115c:	f043 0301 	orr.w	r3, r3, #1
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_SPI_MspInit+0x98>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_SDA_Pin;
 800116e:	23a0      	movs	r3, #160	; 0xa0
 8001170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001172:	2302      	movs	r3, #2
 8001174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	2303      	movs	r3, #3
 800117c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800117e:	2305      	movs	r3, #5
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	4619      	mov	r1, r3
 8001188:	4809      	ldr	r0, [pc, #36]	; (80011b0 <HAL_SPI_MspInit+0x9c>)
 800118a:	f001 fa55 	bl	8002638 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800118e:	2200      	movs	r2, #0
 8001190:	2105      	movs	r1, #5
 8001192:	2023      	movs	r0, #35	; 0x23
 8001194:	f000 fe17 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001198:	2023      	movs	r0, #35	; 0x23
 800119a:	f000 fe30 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800119e:	bf00      	nop
 80011a0:	3728      	adds	r7, #40	; 0x28
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40013000 	.word	0x40013000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020000 	.word	0x40020000

080011b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_TIM_Base_MspInit+0x70>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d116      	bne.n	80011f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_TIM_Base_MspInit+0x74>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_TIM_Base_MspInit+0x74>)
 80011d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011d4:	6453      	str	r3, [r2, #68]	; 0x44
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_TIM_Base_MspInit+0x74>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2105      	movs	r1, #5
 80011e6:	2018      	movs	r0, #24
 80011e8:	f000 fded 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80011ec:	2018      	movs	r0, #24
 80011ee:	f000 fe06 	bl	8001dfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80011f2:	e012      	b.n	800121a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM10)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0c      	ldr	r2, [pc, #48]	; (800122c <HAL_TIM_Base_MspInit+0x78>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10d      	bne.n	800121a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_TIM_Base_MspInit+0x74>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a08      	ldr	r2, [pc, #32]	; (8001228 <HAL_TIM_Base_MspInit+0x74>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_TIM_Base_MspInit+0x74>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40014000 	.word	0x40014000
 8001228:	40023800 	.word	0x40023800
 800122c:	40014400 	.word	0x40014400

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a4e      	ldr	r2, [pc, #312]	; (8001388 <HAL_UART_MspInit+0x158>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d15c      	bne.n	800130c <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	4b4d      	ldr	r3, [pc, #308]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a4c      	ldr	r2, [pc, #304]	; (800138c <HAL_UART_MspInit+0x15c>)
 800125c:	f043 0310 	orr.w	r3, r3, #16
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b4a      	ldr	r3, [pc, #296]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f003 0310 	and.w	r3, r3, #16
 800126a:	61bb      	str	r3, [r7, #24]
 800126c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
 8001272:	4b46      	ldr	r3, [pc, #280]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a45      	ldr	r2, [pc, #276]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b43      	ldr	r3, [pc, #268]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800128a:	23c0      	movs	r3, #192	; 0xc0
 800128c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128e:	2302      	movs	r3, #2
 8001290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001296:	2303      	movs	r3, #3
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800129a:	2307      	movs	r3, #7
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	483a      	ldr	r0, [pc, #232]	; (8001390 <HAL_UART_MspInit+0x160>)
 80012a6:	f001 f9c7 	bl	8002638 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80012aa:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012ac:	4a3a      	ldr	r2, [pc, #232]	; (8001398 <HAL_UART_MspInit+0x168>)
 80012ae:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80012b0:	4b38      	ldr	r3, [pc, #224]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80012b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012b8:	4b36      	ldr	r3, [pc, #216]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012be:	4b35      	ldr	r3, [pc, #212]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012c4:	4b33      	ldr	r3, [pc, #204]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80012d8:	4b2e      	ldr	r3, [pc, #184]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012de:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80012e0:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80012e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012e8:	4b2a      	ldr	r3, [pc, #168]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80012ee:	4829      	ldr	r0, [pc, #164]	; (8001394 <HAL_UART_MspInit+0x164>)
 80012f0:	f000 fda0 	bl	8001e34 <HAL_DMA_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80012fa:	f7ff fe46 	bl	8000f8a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a24      	ldr	r2, [pc, #144]	; (8001394 <HAL_UART_MspInit+0x164>)
 8001302:	639a      	str	r2, [r3, #56]	; 0x38
 8001304:	4a23      	ldr	r2, [pc, #140]	; (8001394 <HAL_UART_MspInit+0x164>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800130a:	e039      	b.n	8001380 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART6)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a22      	ldr	r2, [pc, #136]	; (800139c <HAL_UART_MspInit+0x16c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d134      	bne.n	8001380 <HAL_UART_MspInit+0x150>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b1c      	ldr	r3, [pc, #112]	; (800138c <HAL_UART_MspInit+0x15c>)
 800131c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131e:	4a1b      	ldr	r2, [pc, #108]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001320:	f043 0320 	orr.w	r3, r3, #32
 8001324:	6453      	str	r3, [r2, #68]	; 0x44
 8001326:	4b19      	ldr	r3, [pc, #100]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f003 0320 	and.w	r3, r3, #32
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b15      	ldr	r3, [pc, #84]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a14      	ldr	r2, [pc, #80]	; (800138c <HAL_UART_MspInit+0x15c>)
 800133c:	f043 0301 	orr.w	r3, r3, #1
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <HAL_UART_MspInit+0x15c>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800134e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001360:	2308      	movs	r3, #8
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <HAL_UART_MspInit+0x170>)
 800136c:	f001 f964 	bl	8002638 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2105      	movs	r1, #5
 8001374:	2047      	movs	r0, #71	; 0x47
 8001376:	f000 fd26 	bl	8001dc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800137a:	2047      	movs	r0, #71	; 0x47
 800137c:	f000 fd3f 	bl	8001dfe <HAL_NVIC_EnableIRQ>
}
 8001380:	bf00      	nop
 8001382:	3730      	adds	r7, #48	; 0x30
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40011000 	.word	0x40011000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020400 	.word	0x40020400
 8001394:	200002b0 	.word	0x200002b0
 8001398:	40026440 	.word	0x40026440
 800139c:	40011400 	.word	0x40011400
 80013a0:	40020000 	.word	0x40020000

080013a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013a8:	e7fe      	b.n	80013a8 <NMI_Handler+0x4>

080013aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ae:	e7fe      	b.n	80013ae <HardFault_Handler+0x4>

080013b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b4:	e7fe      	b.n	80013b4 <MemManage_Handler+0x4>

080013b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013b6:	b480      	push	{r7}
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ba:	e7fe      	b.n	80013ba <BusFault_Handler+0x4>

080013bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c0:	e7fe      	b.n	80013c0 <UsageFault_Handler+0x4>

080013c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c2:	b480      	push	{r7}
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c6:	bf00      	nop
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013d4:	f000 f99a 	bl	800170c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80013d8:	f006 f932 	bl	8007640 <xTaskGetSchedulerState>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d001      	beq.n	80013e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80013e2:	f006 ff19 	bl	8008218 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}

080013ea <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80013ee:	bf00      	nop
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON2_Pin);
 80013fc:	2004      	movs	r0, #4
 80013fe:	f001 fab9 	bl	8002974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800140c:	4802      	ldr	r0, [pc, #8]	; (8001418 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800140e:	f002 fc62 	bl	8003cd6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000198 	.word	0x20000198

0800141c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001420:	4802      	ldr	r0, [pc, #8]	; (800142c <SPI1_IRQHandler+0x10>)
 8001422:	f002 fa21 	bl	8003868 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000140 	.word	0x20000140

08001430 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001434:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001438:	f001 fa9c 	bl	8002974 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <DMA2_Stream2_IRQHandler+0x10>)
 8001446:	f000 fe8d 	bl	8002164 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002b0 	.word	0x200002b0

08001454 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001458:	4802      	ldr	r0, [pc, #8]	; (8001464 <USART6_IRQHandler+0x10>)
 800145a:	f003 f87b 	bl	8004554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	2000026c 	.word	0x2000026c

08001468 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e00a      	b.n	8001490 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800147a:	f7ff f9dd 	bl	8000838 <__io_getchar>
 800147e:	4601      	mov	r1, r0
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	60ba      	str	r2, [r7, #8]
 8001486:	b2ca      	uxtb	r2, r1
 8001488:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	3301      	adds	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	697a      	ldr	r2, [r7, #20]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbf0      	blt.n	800147a <_read+0x12>
	}

return len;
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3718      	adds	r7, #24
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	e009      	b.n	80014c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	1c5a      	adds	r2, r3, #1
 80014b8:	60ba      	str	r2, [r7, #8]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff f9f9 	bl	80008b4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	3301      	adds	r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	dbf1      	blt.n	80014b4 <_write+0x12>
	}
	return len;
 80014d0:	687b      	ldr	r3, [r7, #4]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <_close>:

int _close(int file)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
	return -1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
 80014fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001502:	605a      	str	r2, [r3, #4]
	return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr

08001512 <_isatty>:

int _isatty(int file)
{
 8001512:	b480      	push	{r7}
 8001514:	b083      	sub	sp, #12
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
	return 1;
 800151a:	2301      	movs	r3, #1
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
	return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b086      	sub	sp, #24
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <_sbrk+0x5c>)
 800154e:	4b15      	ldr	r3, [pc, #84]	; (80015a4 <_sbrk+0x60>)
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <_sbrk+0x64>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d102      	bne.n	8001566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001560:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <_sbrk+0x64>)
 8001562:	4a12      	ldr	r2, [pc, #72]	; (80015ac <_sbrk+0x68>)
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001566:	4b10      	ldr	r3, [pc, #64]	; (80015a8 <_sbrk+0x64>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4413      	add	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	429a      	cmp	r2, r3
 8001572:	d207      	bcs.n	8001584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001574:	f007 f8ca 	bl	800870c <__errno>
 8001578:	4603      	mov	r3, r0
 800157a:	220c      	movs	r2, #12
 800157c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	e009      	b.n	8001598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001584:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <_sbrk+0x64>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800158a:	4b07      	ldr	r3, [pc, #28]	; (80015a8 <_sbrk+0x64>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <_sbrk+0x64>)
 8001594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001596:	68fb      	ldr	r3, [r7, #12]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3718      	adds	r7, #24
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20010000 	.word	0x20010000
 80015a4:	00000400 	.word	0x00000400
 80015a8:	20000450 	.word	0x20000450
 80015ac:	20004e78 	.word	0x20004e78

080015b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <SystemInit+0x20>)
 80015b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <SystemInit+0x20>)
 80015bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <HAL_UART_TxCpltCallback>:
extern osSemaphoreId_t semUART_RX_WIFIHandle;

static char tx_buffer[128];
static char rx_buffer[128];

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(semUART_TX_WIFIHandle);
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <HAL_UART_TxCpltCallback+0x1c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f004 fa47 	bl	8005a74 <osSemaphoreRelease>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000031c 	.word	0x2000031c

080015f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)  {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(semUART_RX_WIFIHandle);
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <HAL_UART_RxCpltCallback+0x1c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f004 fa37 	bl	8005a74 <osSemaphoreRelease>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000320 	.word	0x20000320

08001614 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800164c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161a:	490e      	ldr	r1, [pc, #56]	; (8001654 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0b      	ldr	r2, [pc, #44]	; (800165c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001630:	4c0b      	ldr	r4, [pc, #44]	; (8001660 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800163e:	f7ff ffb7 	bl	80015b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001642:	f007 f95f 	bl	8008904 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001646:	f7ff f947 	bl	80008d8 <main>
  bx  lr    
 800164a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800164c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001658:	08009dd8 	.word	0x08009dd8
  ldr r2, =_sbss
 800165c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001660:	20004e78 	.word	0x20004e78

08001664 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC_IRQHandler>
	...

08001668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800166c:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <HAL_Init+0x40>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a0d      	ldr	r2, [pc, #52]	; (80016a8 <HAL_Init+0x40>)
 8001672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001678:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_Init+0x40>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_Init+0x40>)
 800167e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001684:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_Init+0x40>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a07      	ldr	r2, [pc, #28]	; (80016a8 <HAL_Init+0x40>)
 800168a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800168e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001690:	2003      	movs	r0, #3
 8001692:	f000 fb8d 	bl	8001db0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001696:	200f      	movs	r0, #15
 8001698:	f000 f808 	bl	80016ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800169c:	f7ff fc7a 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023c00 	.word	0x40023c00

080016ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b4:	4b12      	ldr	r3, [pc, #72]	; (8001700 <HAL_InitTick+0x54>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x58>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4619      	mov	r1, r3
 80016be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fba5 	bl	8001e1a <HAL_SYSTICK_Config>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e00e      	b.n	80016f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2b0f      	cmp	r3, #15
 80016de:	d80a      	bhi.n	80016f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e0:	2200      	movs	r2, #0
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	f04f 30ff 	mov.w	r0, #4294967295
 80016e8:	f000 fb6d 	bl	8001dc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016ec:	4a06      	ldr	r2, [pc, #24]	; (8001708 <HAL_InitTick+0x5c>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	e000      	b.n	80016f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000008 	.word	0x20000008
 8001704:	20000010 	.word	0x20000010
 8001708:	2000000c 	.word	0x2000000c

0800170c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_IncTick+0x20>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x24>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_IncTick+0x24>)
 800171e:	6013      	str	r3, [r2, #0]
}
 8001720:	bf00      	nop
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	20000010 	.word	0x20000010
 8001730:	20000454 	.word	0x20000454

08001734 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  return uwTick;
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <HAL_GetTick+0x14>)
 800173a:	681b      	ldr	r3, [r3, #0]
}
 800173c:	4618      	mov	r0, r3
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	20000454 	.word	0x20000454

0800174c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e033      	b.n	80017ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	2b00      	cmp	r3, #0
 8001768:	d109      	bne.n	800177e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff fc46 	bl	8000ffc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	d118      	bne.n	80017bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001792:	f023 0302 	bic.w	r3, r3, #2
 8001796:	f043 0202 	orr.w	r2, r3, #2
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 f93a 	bl	8001a18 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f023 0303 	bic.w	r3, r3, #3
 80017b2:	f043 0201 	orr.w	r2, r3, #1
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
 80017ba:	e001      	b.n	80017c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2200      	movs	r2, #0
 80017c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
	...

080017d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b085      	sub	sp, #20
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d101      	bne.n	80017f0 <HAL_ADC_ConfigChannel+0x1c>
 80017ec:	2302      	movs	r3, #2
 80017ee:	e105      	b.n	80019fc <HAL_ADC_ConfigChannel+0x228>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2201      	movs	r2, #1
 80017f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d925      	bls.n	800184c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68d9      	ldr	r1, [r3, #12]
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	461a      	mov	r2, r3
 800180e:	4613      	mov	r3, r2
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	4413      	add	r3, r2
 8001814:	3b1e      	subs	r3, #30
 8001816:	2207      	movs	r2, #7
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43da      	mvns	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	400a      	ands	r2, r1
 8001824:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4618      	mov	r0, r3
 8001838:	4603      	mov	r3, r0
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4403      	add	r3, r0
 800183e:	3b1e      	subs	r3, #30
 8001840:	409a      	lsls	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	e022      	b.n	8001892 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6919      	ldr	r1, [r3, #16]
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b29b      	uxth	r3, r3
 8001858:	461a      	mov	r2, r3
 800185a:	4613      	mov	r3, r2
 800185c:	005b      	lsls	r3, r3, #1
 800185e:	4413      	add	r3, r2
 8001860:	2207      	movs	r2, #7
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	400a      	ands	r2, r1
 800186e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6919      	ldr	r1, [r3, #16]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	b29b      	uxth	r3, r3
 8001880:	4618      	mov	r0, r3
 8001882:	4603      	mov	r3, r0
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4403      	add	r3, r0
 8001888:	409a      	lsls	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2b06      	cmp	r3, #6
 8001898:	d824      	bhi.n	80018e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	3b05      	subs	r3, #5
 80018ac:	221f      	movs	r2, #31
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43da      	mvns	r2, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	400a      	ands	r2, r1
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	4618      	mov	r0, r3
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685a      	ldr	r2, [r3, #4]
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	3b05      	subs	r3, #5
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	635a      	str	r2, [r3, #52]	; 0x34
 80018e2:	e04c      	b.n	800197e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	2b0c      	cmp	r3, #12
 80018ea:	d824      	bhi.n	8001936 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685a      	ldr	r2, [r3, #4]
 80018f6:	4613      	mov	r3, r2
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	4413      	add	r3, r2
 80018fc:	3b23      	subs	r3, #35	; 0x23
 80018fe:	221f      	movs	r2, #31
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43da      	mvns	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	400a      	ands	r2, r1
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b23      	subs	r3, #35	; 0x23
 8001928:	fa00 f203 	lsl.w	r2, r0, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	430a      	orrs	r2, r1
 8001932:	631a      	str	r2, [r3, #48]	; 0x30
 8001934:	e023      	b.n	800197e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	4613      	mov	r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	3b41      	subs	r3, #65	; 0x41
 8001948:	221f      	movs	r2, #31
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43da      	mvns	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	400a      	ands	r2, r1
 8001956:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	b29b      	uxth	r3, r3
 8001964:	4618      	mov	r0, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	4613      	mov	r3, r2
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	4413      	add	r3, r2
 8001970:	3b41      	subs	r3, #65	; 0x41
 8001972:	fa00 f203 	lsl.w	r2, r0, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800197e:	4b22      	ldr	r3, [pc, #136]	; (8001a08 <HAL_ADC_ConfigChannel+0x234>)
 8001980:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <HAL_ADC_ConfigChannel+0x238>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d109      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1cc>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b12      	cmp	r3, #18
 8001992:	d105      	bne.n	80019a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	; (8001a0c <HAL_ADC_ConfigChannel+0x238>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d123      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x21e>
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	2b10      	cmp	r3, #16
 80019b0:	d003      	beq.n	80019ba <HAL_ADC_ConfigChannel+0x1e6>
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b11      	cmp	r3, #17
 80019b8:	d11b      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d111      	bne.n	80019f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_ADC_ConfigChannel+0x23c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a10      	ldr	r2, [pc, #64]	; (8001a14 <HAL_ADC_ConfigChannel+0x240>)
 80019d4:	fba2 2303 	umull	r2, r3, r2, r3
 80019d8:	0c9a      	lsrs	r2, r3, #18
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019e4:	e002      	b.n	80019ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	3b01      	subs	r3, #1
 80019ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1f9      	bne.n	80019e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40012300 	.word	0x40012300
 8001a0c:	40012000 	.word	0x40012000
 8001a10:	20000008 	.word	0x20000008
 8001a14:	431bde83 	.word	0x431bde83

08001a18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a20:	4b79      	ldr	r3, [pc, #484]	; (8001c08 <ADC_Init+0x1f0>)
 8001a22:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	685a      	ldr	r2, [r3, #4]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6859      	ldr	r1, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	691b      	ldr	r3, [r3, #16]
 8001a58:	021a      	lsls	r2, r3, #8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001a70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6859      	ldr	r1, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	430a      	orrs	r2, r1
 8001a82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6899      	ldr	r1, [r3, #8]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	68da      	ldr	r2, [r3, #12]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <ADC_Init+0x1f4>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001abe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	689a      	ldr	r2, [r3, #8]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ae0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6899      	ldr	r1, [r3, #8]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	609a      	str	r2, [r3, #8]
 8001af4:	e00f      	b.n	8001b16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0202 	bic.w	r2, r2, #2
 8001b24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6899      	ldr	r1, [r3, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e1b      	ldrb	r3, [r3, #24]
 8001b30:	005a      	lsls	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	430a      	orrs	r2, r1
 8001b38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d01b      	beq.n	8001b7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6859      	ldr	r1, [r3, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	035a      	lsls	r2, r3, #13
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	430a      	orrs	r2, r1
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	e007      	b.n	8001b8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	051a      	lsls	r2, r3, #20
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bce:	025a      	lsls	r2, r3, #9
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001be6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6899      	ldr	r1, [r3, #8]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	029a      	lsls	r2, r3, #10
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	609a      	str	r2, [r3, #8]
}
 8001bfc:	bf00      	nop
 8001bfe:	3714      	adds	r7, #20
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	40012300 	.word	0x40012300
 8001c0c:	0f000001 	.word	0x0f000001

08001c10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c42:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <__NVIC_SetPriorityGrouping+0x44>)
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	60d3      	str	r3, [r2, #12]
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c5c:	4b04      	ldr	r3, [pc, #16]	; (8001c70 <__NVIC_GetPriorityGrouping+0x18>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	0a1b      	lsrs	r3, r3, #8
 8001c62:	f003 0307 	and.w	r3, r3, #7
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	db0b      	blt.n	8001c9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c86:	79fb      	ldrb	r3, [r7, #7]
 8001c88:	f003 021f 	and.w	r2, r3, #31
 8001c8c:	4907      	ldr	r1, [pc, #28]	; (8001cac <__NVIC_EnableIRQ+0x38>)
 8001c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	2001      	movs	r0, #1
 8001c96:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
 8001caa:	bf00      	nop
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
	...

08001d6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3b01      	subs	r3, #1
 8001d78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d7c:	d301      	bcc.n	8001d82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e00f      	b.n	8001da2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d82:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <SysTick_Config+0x40>)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8a:	210f      	movs	r1, #15
 8001d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d90:	f7ff ff8e 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d94:	4b05      	ldr	r3, [pc, #20]	; (8001dac <SysTick_Config+0x40>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9a:	4b04      	ldr	r3, [pc, #16]	; (8001dac <SysTick_Config+0x40>)
 8001d9c:	2207      	movs	r2, #7
 8001d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3708      	adds	r7, #8
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	e000e010 	.word	0xe000e010

08001db0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	f7ff ff29 	bl	8001c10 <__NVIC_SetPriorityGrouping>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	4603      	mov	r3, r0
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
 8001dd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd8:	f7ff ff3e 	bl	8001c58 <__NVIC_GetPriorityGrouping>
 8001ddc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	6978      	ldr	r0, [r7, #20]
 8001de4:	f7ff ff8e 	bl	8001d04 <NVIC_EncodePriority>
 8001de8:	4602      	mov	r2, r0
 8001dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dee:	4611      	mov	r1, r2
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff5d 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff31 	bl	8001c74 <__NVIC_EnableIRQ>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ffa2 	bl	8001d6c <SysTick_Config>
 8001e28:	4603      	mov	r3, r0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e40:	f7ff fc78 	bl	8001734 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e099      	b.n	8001f84 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2202      	movs	r2, #2
 8001e54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e70:	e00f      	b.n	8001e92 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e72:	f7ff fc5f 	bl	8001734 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b05      	cmp	r3, #5
 8001e7e:	d908      	bls.n	8001e92 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2220      	movs	r2, #32
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2203      	movs	r2, #3
 8001e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e078      	b.n	8001f84 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0301 	and.w	r3, r3, #1
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1e8      	bne.n	8001e72 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	4b38      	ldr	r3, [pc, #224]	; (8001f8c <HAL_DMA_Init+0x158>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ebe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001eca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ede:	697a      	ldr	r2, [r7, #20]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d107      	bne.n	8001efc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f023 0307 	bic.w	r3, r3, #7
 8001f12:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d117      	bne.n	8001f56 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00e      	beq.n	8001f56 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 fb01 	bl	8002540 <DMA_CheckFifoParam>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2240      	movs	r2, #64	; 0x40
 8001f48:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f52:	2301      	movs	r3, #1
 8001f54:	e016      	b.n	8001f84 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 fab8 	bl	80024d4 <DMA_CalcBaseAndBitshift>
 8001f64:	4603      	mov	r3, r0
 8001f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	223f      	movs	r2, #63	; 0x3f
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2200      	movs	r2, #0
 8001f78:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	f010803f 	.word	0xf010803f

08001f90 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
 8001f9c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d101      	bne.n	8001fb6 <HAL_DMA_Start_IT+0x26>
 8001fb2:	2302      	movs	r3, #2
 8001fb4:	e040      	b.n	8002038 <HAL_DMA_Start_IT+0xa8>
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2201      	movs	r2, #1
 8001fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d12f      	bne.n	800202a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	68b9      	ldr	r1, [r7, #8]
 8001fde:	68f8      	ldr	r0, [r7, #12]
 8001fe0:	f000 fa4a 	bl	8002478 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe8:	223f      	movs	r2, #63	; 0x3f
 8001fea:	409a      	lsls	r2, r3
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0216 	orr.w	r2, r2, #22
 8001ffe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d007      	beq.n	8002018 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0208 	orr.w	r2, r2, #8
 8002016:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f042 0201 	orr.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	e005      	b.n	8002036 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	2200      	movs	r2, #0
 800202e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002032:	2302      	movs	r3, #2
 8002034:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002036:	7dfb      	ldrb	r3, [r7, #23]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3718      	adds	r7, #24
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800204e:	f7ff fb71 	bl	8001734 <HAL_GetTick>
 8002052:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800205a:	b2db      	uxtb	r3, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2280      	movs	r2, #128	; 0x80
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e052      	b.n	8002118 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0216 	bic.w	r2, r2, #22
 8002080:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002090:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d103      	bne.n	80020a2 <HAL_DMA_Abort+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681a      	ldr	r2, [r3, #0]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 0208 	bic.w	r2, r2, #8
 80020b0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020c2:	e013      	b.n	80020ec <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020c4:	f7ff fb36 	bl	8001734 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b05      	cmp	r3, #5
 80020d0:	d90c      	bls.n	80020ec <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2220      	movs	r2, #32
 80020d6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2203      	movs	r2, #3
 80020dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e015      	b.n	8002118 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1e4      	bne.n	80020c4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020fe:	223f      	movs	r2, #63	; 0x3f
 8002100:	409a      	lsls	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d004      	beq.n	800213e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e00c      	b.n	8002158 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2205      	movs	r2, #5
 8002142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 0201 	bic.w	r2, r2, #1
 8002154:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002170:	4b8e      	ldr	r3, [pc, #568]	; (80023ac <HAL_DMA_IRQHandler+0x248>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a8e      	ldr	r2, [pc, #568]	; (80023b0 <HAL_DMA_IRQHandler+0x24c>)
 8002176:	fba2 2303 	umull	r2, r3, r2, r3
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002182:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800218e:	2208      	movs	r2, #8
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01a      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0204 	bic.w	r2, r2, #4
 80021b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021bc:	2208      	movs	r2, #8
 80021be:	409a      	lsls	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d4:	2201      	movs	r2, #1
 80021d6:	409a      	lsls	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	695b      	ldr	r3, [r3, #20]
 80021e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f2:	2201      	movs	r2, #1
 80021f4:	409a      	lsls	r2, r3
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021fe:	f043 0202 	orr.w	r2, r3, #2
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220a:	2204      	movs	r2, #4
 800220c:	409a      	lsls	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	4013      	ands	r3, r2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d012      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00b      	beq.n	800223c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002228:	2204      	movs	r2, #4
 800222a:	409a      	lsls	r2, r3
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002240:	2210      	movs	r2, #16
 8002242:	409a      	lsls	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
 8002256:	2b00      	cmp	r3, #0
 8002258:	d03c      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225e:	2210      	movs	r2, #16
 8002260:	409a      	lsls	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d018      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d108      	bne.n	8002294 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002286:	2b00      	cmp	r3, #0
 8002288:	d024      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	4798      	blx	r3
 8002292:	e01f      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01b      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e016      	b.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d107      	bne.n	80022c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0208 	bic.w	r2, r2, #8
 80022c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d003      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d8:	2220      	movs	r2, #32
 80022da:	409a      	lsls	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4013      	ands	r3, r2
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 808f 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0310 	and.w	r3, r3, #16
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 8087 	beq.w	8002404 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fa:	2220      	movs	r2, #32
 80022fc:	409a      	lsls	r2, r3
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b05      	cmp	r3, #5
 800230c:	d136      	bne.n	800237c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f022 0216 	bic.w	r2, r2, #22
 800231c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	695a      	ldr	r2, [r3, #20]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800232c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	2b00      	cmp	r3, #0
 8002334:	d103      	bne.n	800233e <HAL_DMA_IRQHandler+0x1da>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233a:	2b00      	cmp	r3, #0
 800233c:	d007      	beq.n	800234e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0208 	bic.w	r2, r2, #8
 800234c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	223f      	movs	r2, #63	; 0x3f
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800236e:	2b00      	cmp	r3, #0
 8002370:	d07e      	beq.n	8002470 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	4798      	blx	r3
        }
        return;
 800237a:	e079      	b.n	8002470 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d01d      	beq.n	80023c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10d      	bne.n	80023b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239c:	2b00      	cmp	r3, #0
 800239e:	d031      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4798      	blx	r3
 80023a8:	e02c      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
 80023aa:	bf00      	nop
 80023ac:	20000008 	.word	0x20000008
 80023b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d023      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	4798      	blx	r3
 80023c4:	e01e      	b.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10f      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f022 0210 	bic.w	r2, r2, #16
 80023e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	2b00      	cmp	r3, #0
 800240a:	d032      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d022      	beq.n	800245e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2205      	movs	r2, #5
 800241c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 0201 	bic.w	r2, r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	3301      	adds	r3, #1
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	429a      	cmp	r2, r3
 800243a:	d307      	bcc.n	800244c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d1f2      	bne.n	8002430 <HAL_DMA_IRQHandler+0x2cc>
 800244a:	e000      	b.n	800244e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800244c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2200      	movs	r2, #0
 800245a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	4798      	blx	r3
 800246e:	e000      	b.n	8002472 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002470:	bf00      	nop
    }
  }
}
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002494:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d108      	bne.n	80024b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024b6:	e007      	b.n	80024c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68ba      	ldr	r2, [r7, #8]
 80024be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	60da      	str	r2, [r3, #12]
}
 80024c8:	bf00      	nop
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b085      	sub	sp, #20
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3b10      	subs	r3, #16
 80024e4:	4a14      	ldr	r2, [pc, #80]	; (8002538 <DMA_CalcBaseAndBitshift+0x64>)
 80024e6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024ee:	4a13      	ldr	r2, [pc, #76]	; (800253c <DMA_CalcBaseAndBitshift+0x68>)
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	4413      	add	r3, r2
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2b03      	cmp	r3, #3
 8002500:	d909      	bls.n	8002516 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800250a:	f023 0303 	bic.w	r3, r3, #3
 800250e:	1d1a      	adds	r2, r3, #4
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58
 8002514:	e007      	b.n	8002526 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800251e:	f023 0303 	bic.w	r3, r3, #3
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800252a:	4618      	mov	r0, r3
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	aaaaaaab 	.word	0xaaaaaaab
 800253c:	08009d28 	.word	0x08009d28

08002540 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d11f      	bne.n	800259a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d856      	bhi.n	800260e <DMA_CheckFifoParam+0xce>
 8002560:	a201      	add	r2, pc, #4	; (adr r2, 8002568 <DMA_CheckFifoParam+0x28>)
 8002562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002566:	bf00      	nop
 8002568:	08002579 	.word	0x08002579
 800256c:	0800258b 	.word	0x0800258b
 8002570:	08002579 	.word	0x08002579
 8002574:	0800260f 	.word	0x0800260f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d046      	beq.n	8002612 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002588:	e043      	b.n	8002612 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002592:	d140      	bne.n	8002616 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002598:	e03d      	b.n	8002616 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025a2:	d121      	bne.n	80025e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b03      	cmp	r3, #3
 80025a8:	d837      	bhi.n	800261a <DMA_CheckFifoParam+0xda>
 80025aa:	a201      	add	r2, pc, #4	; (adr r2, 80025b0 <DMA_CheckFifoParam+0x70>)
 80025ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b0:	080025c1 	.word	0x080025c1
 80025b4:	080025c7 	.word	0x080025c7
 80025b8:	080025c1 	.word	0x080025c1
 80025bc:	080025d9 	.word	0x080025d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	73fb      	strb	r3, [r7, #15]
      break;
 80025c4:	e030      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d025      	beq.n	800261e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d6:	e022      	b.n	800261e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e0:	d11f      	bne.n	8002622 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025e6:	e01c      	b.n	8002622 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d903      	bls.n	80025f6 <DMA_CheckFifoParam+0xb6>
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	d003      	beq.n	80025fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025f4:	e018      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	73fb      	strb	r3, [r7, #15]
      break;
 80025fa:	e015      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00e      	beq.n	8002626 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	73fb      	strb	r3, [r7, #15]
      break;
 800260c:	e00b      	b.n	8002626 <DMA_CheckFifoParam+0xe6>
      break;
 800260e:	bf00      	nop
 8002610:	e00a      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 8002612:	bf00      	nop
 8002614:	e008      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 8002616:	bf00      	nop
 8002618:	e006      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
 800261c:	e004      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e002      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;   
 8002622:	bf00      	nop
 8002624:	e000      	b.n	8002628 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
    }
  } 
  
  return status; 
 8002628:	7bfb      	ldrb	r3, [r7, #15]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop

08002638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800264a:	2300      	movs	r3, #0
 800264c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800264e:	2300      	movs	r3, #0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	e159      	b.n	8002908 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002654:	2201      	movs	r2, #1
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	4013      	ands	r3, r2
 8002666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	429a      	cmp	r2, r3
 800266e:	f040 8148 	bne.w	8002902 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d005      	beq.n	800268a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002686:	2b02      	cmp	r3, #2
 8002688:	d130      	bne.n	80026ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	2203      	movs	r2, #3
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4013      	ands	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026c0:	2201      	movs	r2, #1
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	fa02 f303 	lsl.w	r3, r2, r3
 80026c8:	43db      	mvns	r3, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4013      	ands	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	091b      	lsrs	r3, r3, #4
 80026d6:	f003 0201 	and.w	r2, r3, #1
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d017      	beq.n	8002728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689a      	ldr	r2, [r3, #8]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	4313      	orrs	r3, r2
 8002720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 0303 	and.w	r3, r3, #3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d123      	bne.n	800277c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	08da      	lsrs	r2, r3, #3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3208      	adds	r2, #8
 800273c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	f003 0307 	and.w	r3, r3, #7
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	220f      	movs	r2, #15
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	08da      	lsrs	r2, r3, #3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3208      	adds	r2, #8
 8002776:	69b9      	ldr	r1, [r7, #24]
 8002778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	2203      	movs	r2, #3
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	43db      	mvns	r3, r3
 800278e:	69ba      	ldr	r2, [r7, #24]
 8002790:	4013      	ands	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f003 0203 	and.w	r2, r3, #3
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	fa02 f303 	lsl.w	r3, r2, r3
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80a2 	beq.w	8002902 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
 80027c2:	4b57      	ldr	r3, [pc, #348]	; (8002920 <HAL_GPIO_Init+0x2e8>)
 80027c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c6:	4a56      	ldr	r2, [pc, #344]	; (8002920 <HAL_GPIO_Init+0x2e8>)
 80027c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027cc:	6453      	str	r3, [r2, #68]	; 0x44
 80027ce:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_GPIO_Init+0x2e8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027da:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_GPIO_Init+0x2ec>)
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	089b      	lsrs	r3, r3, #2
 80027e0:	3302      	adds	r3, #2
 80027e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	220f      	movs	r2, #15
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a49      	ldr	r2, [pc, #292]	; (8002928 <HAL_GPIO_Init+0x2f0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d019      	beq.n	800283a <HAL_GPIO_Init+0x202>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a48      	ldr	r2, [pc, #288]	; (800292c <HAL_GPIO_Init+0x2f4>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d013      	beq.n	8002836 <HAL_GPIO_Init+0x1fe>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a47      	ldr	r2, [pc, #284]	; (8002930 <HAL_GPIO_Init+0x2f8>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <HAL_GPIO_Init+0x1fa>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a46      	ldr	r2, [pc, #280]	; (8002934 <HAL_GPIO_Init+0x2fc>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <HAL_GPIO_Init+0x1f6>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a45      	ldr	r2, [pc, #276]	; (8002938 <HAL_GPIO_Init+0x300>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d101      	bne.n	800282a <HAL_GPIO_Init+0x1f2>
 8002826:	2304      	movs	r3, #4
 8002828:	e008      	b.n	800283c <HAL_GPIO_Init+0x204>
 800282a:	2307      	movs	r3, #7
 800282c:	e006      	b.n	800283c <HAL_GPIO_Init+0x204>
 800282e:	2303      	movs	r3, #3
 8002830:	e004      	b.n	800283c <HAL_GPIO_Init+0x204>
 8002832:	2302      	movs	r3, #2
 8002834:	e002      	b.n	800283c <HAL_GPIO_Init+0x204>
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <HAL_GPIO_Init+0x204>
 800283a:	2300      	movs	r3, #0
 800283c:	69fa      	ldr	r2, [r7, #28]
 800283e:	f002 0203 	and.w	r2, r2, #3
 8002842:	0092      	lsls	r2, r2, #2
 8002844:	4093      	lsls	r3, r2
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4313      	orrs	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800284c:	4935      	ldr	r1, [pc, #212]	; (8002924 <HAL_GPIO_Init+0x2ec>)
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	089b      	lsrs	r3, r3, #2
 8002852:	3302      	adds	r3, #2
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800285a:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_GPIO_Init+0x304>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	43db      	mvns	r3, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4013      	ands	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800287e:	4a2f      	ldr	r2, [pc, #188]	; (800293c <HAL_GPIO_Init+0x304>)
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002884:	4b2d      	ldr	r3, [pc, #180]	; (800293c <HAL_GPIO_Init+0x304>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028a8:	4a24      	ldr	r2, [pc, #144]	; (800293c <HAL_GPIO_Init+0x304>)
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ae:	4b23      	ldr	r3, [pc, #140]	; (800293c <HAL_GPIO_Init+0x304>)
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	43db      	mvns	r3, r3
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	4013      	ands	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ca:	69ba      	ldr	r2, [r7, #24]
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028d2:	4a1a      	ldr	r2, [pc, #104]	; (800293c <HAL_GPIO_Init+0x304>)
 80028d4:	69bb      	ldr	r3, [r7, #24]
 80028d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028d8:	4b18      	ldr	r3, [pc, #96]	; (800293c <HAL_GPIO_Init+0x304>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028fc:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_GPIO_Init+0x304>)
 80028fe:	69bb      	ldr	r3, [r7, #24]
 8002900:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	3301      	adds	r3, #1
 8002906:	61fb      	str	r3, [r7, #28]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	2b0f      	cmp	r3, #15
 800290c:	f67f aea2 	bls.w	8002654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002910:	bf00      	nop
 8002912:	bf00      	nop
 8002914:	3724      	adds	r7, #36	; 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	40013800 	.word	0x40013800
 8002928:	40020000 	.word	0x40020000
 800292c:	40020400 	.word	0x40020400
 8002930:	40020800 	.word	0x40020800
 8002934:	40020c00 	.word	0x40020c00
 8002938:	40021000 	.word	0x40021000
 800293c:	40013c00 	.word	0x40013c00

08002940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	807b      	strh	r3, [r7, #2]
 800294c:	4613      	mov	r3, r2
 800294e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002950:	787b      	ldrb	r3, [r7, #1]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002956:	887a      	ldrh	r2, [r7, #2]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800295c:	e003      	b.n	8002966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800295e:	887b      	ldrh	r3, [r7, #2]
 8002960:	041a      	lsls	r2, r3, #16
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	619a      	str	r2, [r3, #24]
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
	...

08002974 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800297e:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	88fb      	ldrh	r3, [r7, #6]
 8002984:	4013      	ands	r3, r2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d006      	beq.n	8002998 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800298a:	4a05      	ldr	r2, [pc, #20]	; (80029a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800298c:	88fb      	ldrh	r3, [r7, #6]
 800298e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe faee 	bl	8000f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40013c00 	.word	0x40013c00

080029a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e12b      	b.n	8002c0e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d106      	bne.n	80029d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f7fe fb5a 	bl	8001084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2224      	movs	r2, #36	; 0x24
 80029d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681a      	ldr	r2, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f022 0201 	bic.w	r2, r2, #1
 80029e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a06:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a08:	f000 fd40 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 8002a0c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4a81      	ldr	r2, [pc, #516]	; (8002c18 <HAL_I2C_Init+0x274>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d807      	bhi.n	8002a28 <HAL_I2C_Init+0x84>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <HAL_I2C_Init+0x278>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	bf94      	ite	ls
 8002a20:	2301      	movls	r3, #1
 8002a22:	2300      	movhi	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e006      	b.n	8002a36 <HAL_I2C_Init+0x92>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4a7d      	ldr	r2, [pc, #500]	; (8002c20 <HAL_I2C_Init+0x27c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	bf94      	ite	ls
 8002a30:	2301      	movls	r3, #1
 8002a32:	2300      	movhi	r3, #0
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0e7      	b.n	8002c0e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4a78      	ldr	r2, [pc, #480]	; (8002c24 <HAL_I2C_Init+0x280>)
 8002a42:	fba2 2303 	umull	r2, r3, r2, r3
 8002a46:	0c9b      	lsrs	r3, r3, #18
 8002a48:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	68ba      	ldr	r2, [r7, #8]
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6a1b      	ldr	r3, [r3, #32]
 8002a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a6a      	ldr	r2, [pc, #424]	; (8002c18 <HAL_I2C_Init+0x274>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d802      	bhi.n	8002a78 <HAL_I2C_Init+0xd4>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	3301      	adds	r3, #1
 8002a76:	e009      	b.n	8002a8c <HAL_I2C_Init+0xe8>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	4a69      	ldr	r2, [pc, #420]	; (8002c28 <HAL_I2C_Init+0x284>)
 8002a84:	fba2 2303 	umull	r2, r3, r2, r3
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	430b      	orrs	r3, r1
 8002a92:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a9e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	495c      	ldr	r1, [pc, #368]	; (8002c18 <HAL_I2C_Init+0x274>)
 8002aa8:	428b      	cmp	r3, r1
 8002aaa:	d819      	bhi.n	8002ae0 <HAL_I2C_Init+0x13c>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e59      	subs	r1, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aba:	1c59      	adds	r1, r3, #1
 8002abc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ac0:	400b      	ands	r3, r1
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00a      	beq.n	8002adc <HAL_I2C_Init+0x138>
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1e59      	subs	r1, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ada:	e051      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002adc:	2304      	movs	r3, #4
 8002ade:	e04f      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d111      	bne.n	8002b0c <HAL_I2C_Init+0x168>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	1e58      	subs	r0, r3, #1
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6859      	ldr	r1, [r3, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	440b      	add	r3, r1
 8002af6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002afa:	3301      	adds	r3, #1
 8002afc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bf0c      	ite	eq
 8002b04:	2301      	moveq	r3, #1
 8002b06:	2300      	movne	r3, #0
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	e012      	b.n	8002b32 <HAL_I2C_Init+0x18e>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	1e58      	subs	r0, r3, #1
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6859      	ldr	r1, [r3, #4]
 8002b14:	460b      	mov	r3, r1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	0099      	lsls	r1, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b22:	3301      	adds	r3, #1
 8002b24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_Init+0x196>
 8002b36:	2301      	movs	r3, #1
 8002b38:	e022      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10e      	bne.n	8002b60 <HAL_I2C_Init+0x1bc>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1e58      	subs	r0, r3, #1
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	440b      	add	r3, r1
 8002b50:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b54:	3301      	adds	r3, #1
 8002b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b5e:	e00f      	b.n	8002b80 <HAL_I2C_Init+0x1dc>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1e58      	subs	r0, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6859      	ldr	r1, [r3, #4]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	0099      	lsls	r1, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b76:	3301      	adds	r3, #1
 8002b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	6809      	ldr	r1, [r1, #0]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6911      	ldr	r1, [r2, #16]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68d2      	ldr	r2, [r2, #12]
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6812      	ldr	r2, [r2, #0]
 8002bc0:	430b      	orrs	r3, r1
 8002bc2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	000186a0 	.word	0x000186a0
 8002c1c:	001e847f 	.word	0x001e847f
 8002c20:	003d08ff 	.word	0x003d08ff
 8002c24:	431bde83 	.word	0x431bde83
 8002c28:	10624dd3 	.word	0x10624dd3

08002c2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e267      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d075      	beq.n	8002d36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 030c 	and.w	r3, r3, #12
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d00c      	beq.n	8002c70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c56:	4b85      	ldr	r3, [pc, #532]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c5e:	2b08      	cmp	r3, #8
 8002c60:	d112      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c62:	4b82      	ldr	r3, [pc, #520]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c6e:	d10b      	bne.n	8002c88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c70:	4b7e      	ldr	r3, [pc, #504]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d05b      	beq.n	8002d34 <HAL_RCC_OscConfig+0x108>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d157      	bne.n	8002d34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e242      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c90:	d106      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x74>
 8002c92:	4b76      	ldr	r3, [pc, #472]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a75      	ldr	r2, [pc, #468]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c9c:	6013      	str	r3, [r2, #0]
 8002c9e:	e01d      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ca8:	d10c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x98>
 8002caa:	4b70      	ldr	r3, [pc, #448]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a6f      	ldr	r2, [pc, #444]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	4b6d      	ldr	r3, [pc, #436]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a6c      	ldr	r2, [pc, #432]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc0:	6013      	str	r3, [r2, #0]
 8002cc2:	e00b      	b.n	8002cdc <HAL_RCC_OscConfig+0xb0>
 8002cc4:	4b69      	ldr	r3, [pc, #420]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a68      	ldr	r2, [pc, #416]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b66      	ldr	r3, [pc, #408]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a65      	ldr	r2, [pc, #404]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d013      	beq.n	8002d0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fd26 	bl	8001734 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cec:	f7fe fd22 	bl	8001734 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b64      	cmp	r3, #100	; 0x64
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e207      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b5b      	ldr	r3, [pc, #364]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0xc0>
 8002d0a:	e014      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fd12 	bl	8001734 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d14:	f7fe fd0e 	bl	8001734 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b64      	cmp	r3, #100	; 0x64
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e1f3      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d26:	4b51      	ldr	r3, [pc, #324]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0xe8>
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d063      	beq.n	8002e0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d42:	4b4a      	ldr	r3, [pc, #296]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00b      	beq.n	8002d66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d4e:	4b47      	ldr	r3, [pc, #284]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d56:	2b08      	cmp	r3, #8
 8002d58:	d11c      	bne.n	8002d94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d5a:	4b44      	ldr	r3, [pc, #272]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d116      	bne.n	8002d94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d66:	4b41      	ldr	r3, [pc, #260]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <HAL_RCC_OscConfig+0x152>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d001      	beq.n	8002d7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e1c7      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d7e:	4b3b      	ldr	r3, [pc, #236]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	4937      	ldr	r1, [pc, #220]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d92:	e03a      	b.n	8002e0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d9c:	4b34      	ldr	r3, [pc, #208]	; (8002e70 <HAL_RCC_OscConfig+0x244>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da2:	f7fe fcc7 	bl	8001734 <HAL_GetTick>
 8002da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002da8:	e008      	b.n	8002dbc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002daa:	f7fe fcc3 	bl	8001734 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d901      	bls.n	8002dbc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e1a8      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dbc:	4b2b      	ldr	r3, [pc, #172]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0302 	and.w	r3, r3, #2
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d0f0      	beq.n	8002daa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4925      	ldr	r1, [pc, #148]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	600b      	str	r3, [r1, #0]
 8002ddc:	e015      	b.n	8002e0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dde:	4b24      	ldr	r3, [pc, #144]	; (8002e70 <HAL_RCC_OscConfig+0x244>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fca6 	bl	8001734 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dec:	f7fe fca2 	bl	8001734 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b02      	cmp	r3, #2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e187      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dfe:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d036      	beq.n	8002e84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d016      	beq.n	8002e4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e1e:	4b15      	ldr	r3, [pc, #84]	; (8002e74 <HAL_RCC_OscConfig+0x248>)
 8002e20:	2201      	movs	r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fc86 	bl	8001734 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fc82 	bl	8001734 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d901      	bls.n	8002e3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e167      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <HAL_RCC_OscConfig+0x240>)
 8002e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x200>
 8002e4a:	e01b      	b.n	8002e84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e4c:	4b09      	ldr	r3, [pc, #36]	; (8002e74 <HAL_RCC_OscConfig+0x248>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e52:	f7fe fc6f 	bl	8001734 <HAL_GetTick>
 8002e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e58:	e00e      	b.n	8002e78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5a:	f7fe fc6b 	bl	8001734 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	693b      	ldr	r3, [r7, #16]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d907      	bls.n	8002e78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e150      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
 8002e6c:	40023800 	.word	0x40023800
 8002e70:	42470000 	.word	0x42470000
 8002e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e78:	4b88      	ldr	r3, [pc, #544]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d1ea      	bne.n	8002e5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8097 	beq.w	8002fc0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e96:	4b81      	ldr	r3, [pc, #516]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10f      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	4a7c      	ldr	r2, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002eb2:	4b7a      	ldr	r3, [pc, #488]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eba:	60bb      	str	r3, [r7, #8]
 8002ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b77      	ldr	r3, [pc, #476]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d118      	bne.n	8002f00 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ece:	4b74      	ldr	r3, [pc, #464]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a73      	ldr	r2, [pc, #460]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eda:	f7fe fc2b 	bl	8001734 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ee0:	e008      	b.n	8002ef4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ee2:	f7fe fc27 	bl	8001734 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d901      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e10c      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef4:	4b6a      	ldr	r3, [pc, #424]	; (80030a0 <HAL_RCC_OscConfig+0x474>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x2ea>
 8002f08:	4b64      	ldr	r3, [pc, #400]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0c:	4a63      	ldr	r2, [pc, #396]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f0e:	f043 0301 	orr.w	r3, r3, #1
 8002f12:	6713      	str	r3, [r2, #112]	; 0x70
 8002f14:	e01c      	b.n	8002f50 <HAL_RCC_OscConfig+0x324>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	d10c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x30c>
 8002f1e:	4b5f      	ldr	r3, [pc, #380]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f22:	4a5e      	ldr	r2, [pc, #376]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f24:	f043 0304 	orr.w	r3, r3, #4
 8002f28:	6713      	str	r3, [r2, #112]	; 0x70
 8002f2a:	4b5c      	ldr	r3, [pc, #368]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f2e:	4a5b      	ldr	r2, [pc, #364]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f30:	f043 0301 	orr.w	r3, r3, #1
 8002f34:	6713      	str	r3, [r2, #112]	; 0x70
 8002f36:	e00b      	b.n	8002f50 <HAL_RCC_OscConfig+0x324>
 8002f38:	4b58      	ldr	r3, [pc, #352]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3c:	4a57      	ldr	r2, [pc, #348]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f023 0301 	bic.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	; 0x70
 8002f44:	4b55      	ldr	r3, [pc, #340]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	4a54      	ldr	r2, [pc, #336]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f4a:	f023 0304 	bic.w	r3, r3, #4
 8002f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7fe fbec 	bl	8001734 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f5e:	e00a      	b.n	8002f76 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f60:	f7fe fbe8 	bl	8001734 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e0cb      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f76:	4b49      	ldr	r3, [pc, #292]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0ee      	beq.n	8002f60 <HAL_RCC_OscConfig+0x334>
 8002f82:	e014      	b.n	8002fae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f84:	f7fe fbd6 	bl	8001734 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8a:	e00a      	b.n	8002fa2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fbd2 	bl	8001734 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e0b5      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa2:	4b3e      	ldr	r3, [pc, #248]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1ee      	bne.n	8002f8c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d105      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fb4:	4b39      	ldr	r3, [pc, #228]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb8:	4a38      	ldr	r2, [pc, #224]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a1 	beq.w	800310c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fca:	4b34      	ldr	r3, [pc, #208]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 030c 	and.w	r3, r3, #12
 8002fd2:	2b08      	cmp	r3, #8
 8002fd4:	d05c      	beq.n	8003090 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699b      	ldr	r3, [r3, #24]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d141      	bne.n	8003062 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fde:	4b31      	ldr	r3, [pc, #196]	; (80030a4 <HAL_RCC_OscConfig+0x478>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fba6 	bl	8001734 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fec:	f7fe fba2 	bl	8001734 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e087      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69da      	ldr	r2, [r3, #28]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	019b      	lsls	r3, r3, #6
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003020:	085b      	lsrs	r3, r3, #1
 8003022:	3b01      	subs	r3, #1
 8003024:	041b      	lsls	r3, r3, #16
 8003026:	431a      	orrs	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	061b      	lsls	r3, r3, #24
 800302e:	491b      	ldr	r1, [pc, #108]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003030:	4313      	orrs	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_RCC_OscConfig+0x478>)
 8003036:	2201      	movs	r2, #1
 8003038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303a:	f7fe fb7b 	bl	8001734 <HAL_GetTick>
 800303e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003040:	e008      	b.n	8003054 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003042:	f7fe fb77 	bl	8001734 <HAL_GetTick>
 8003046:	4602      	mov	r2, r0
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	2b02      	cmp	r3, #2
 800304e:	d901      	bls.n	8003054 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003050:	2303      	movs	r3, #3
 8003052:	e05c      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003054:	4b11      	ldr	r3, [pc, #68]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d0f0      	beq.n	8003042 <HAL_RCC_OscConfig+0x416>
 8003060:	e054      	b.n	800310c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b10      	ldr	r3, [pc, #64]	; (80030a4 <HAL_RCC_OscConfig+0x478>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe fb64 	bl	8001734 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe fb60 	bl	8001734 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e045      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b06      	ldr	r3, [pc, #24]	; (800309c <HAL_RCC_OscConfig+0x470>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x444>
 800308e:	e03d      	b.n	800310c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d107      	bne.n	80030a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e038      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
 800309c:	40023800 	.word	0x40023800
 80030a0:	40007000 	.word	0x40007000
 80030a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030a8:	4b1b      	ldr	r3, [pc, #108]	; (8003118 <HAL_RCC_OscConfig+0x4ec>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d028      	beq.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d121      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d11a      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80030d8:	4013      	ands	r3, r2
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d111      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	40023800 	.word	0x40023800

0800311c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d101      	bne.n	8003130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e0cc      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003130:	4b68      	ldr	r3, [pc, #416]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	683a      	ldr	r2, [r7, #0]
 800313a:	429a      	cmp	r2, r3
 800313c:	d90c      	bls.n	8003158 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313e:	4b65      	ldr	r3, [pc, #404]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	b2d2      	uxtb	r2, r2
 8003144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003146:	4b63      	ldr	r3, [pc, #396]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	683a      	ldr	r2, [r7, #0]
 8003150:	429a      	cmp	r2, r3
 8003152:	d001      	beq.n	8003158 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0b8      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d020      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003170:	4b59      	ldr	r3, [pc, #356]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	4a58      	ldr	r2, [pc, #352]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800317a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d005      	beq.n	8003194 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003188:	4b53      	ldr	r3, [pc, #332]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	4a52      	ldr	r2, [pc, #328]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003192:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003194:	4b50      	ldr	r3, [pc, #320]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	494d      	ldr	r1, [pc, #308]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d044      	beq.n	800323c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ba:	4b47      	ldr	r3, [pc, #284]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d119      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e07f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d003      	beq.n	80031da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031d6:	2b03      	cmp	r3, #3
 80031d8:	d107      	bne.n	80031ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031da:	4b3f      	ldr	r3, [pc, #252]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e06f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ea:	4b3b      	ldr	r3, [pc, #236]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d101      	bne.n	80031fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e067      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031fa:	4b37      	ldr	r3, [pc, #220]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f023 0203 	bic.w	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	4934      	ldr	r1, [pc, #208]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	4313      	orrs	r3, r2
 800320a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800320c:	f7fe fa92 	bl	8001734 <HAL_GetTick>
 8003210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003212:	e00a      	b.n	800322a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003214:	f7fe fa8e 	bl	8001734 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003222:	4293      	cmp	r3, r2
 8003224:	d901      	bls.n	800322a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e04f      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322a:	4b2b      	ldr	r3, [pc, #172]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 020c 	and.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	429a      	cmp	r2, r3
 800323a:	d1eb      	bne.n	8003214 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800323c:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d20c      	bcs.n	8003264 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800324a:	4b22      	ldr	r3, [pc, #136]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 800324c:	683a      	ldr	r2, [r7, #0]
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b20      	ldr	r3, [pc, #128]	; (80032d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e032      	b.n	80032ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003270:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	4916      	ldr	r1, [pc, #88]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800327e:	4313      	orrs	r3, r2
 8003280:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d009      	beq.n	80032a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800328e:	4b12      	ldr	r3, [pc, #72]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	490e      	ldr	r1, [pc, #56]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032a2:	f000 f821 	bl	80032e8 <HAL_RCC_GetSysClockFreq>
 80032a6:	4602      	mov	r2, r0
 80032a8:	4b0b      	ldr	r3, [pc, #44]	; (80032d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	091b      	lsrs	r3, r3, #4
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	490a      	ldr	r1, [pc, #40]	; (80032dc <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	5ccb      	ldrb	r3, [r1, r3]
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <HAL_RCC_ClockConfig+0x1c4>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032be:	4b09      	ldr	r3, [pc, #36]	; (80032e4 <HAL_RCC_ClockConfig+0x1c8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f7fe f9f2 	bl	80016ac <HAL_InitTick>

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	40023c00 	.word	0x40023c00
 80032d8:	40023800 	.word	0x40023800
 80032dc:	08009d10 	.word	0x08009d10
 80032e0:	20000008 	.word	0x20000008
 80032e4:	2000000c 	.word	0x2000000c

080032e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032ec:	b090      	sub	sp, #64	; 0x40
 80032ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032f0:	2300      	movs	r3, #0
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
 80032f4:	2300      	movs	r3, #0
 80032f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032f8:	2300      	movs	r3, #0
 80032fa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003300:	4b59      	ldr	r3, [pc, #356]	; (8003468 <HAL_RCC_GetSysClockFreq+0x180>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d00d      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x40>
 800330c:	2b08      	cmp	r3, #8
 800330e:	f200 80a1 	bhi.w	8003454 <HAL_RCC_GetSysClockFreq+0x16c>
 8003312:	2b00      	cmp	r3, #0
 8003314:	d002      	beq.n	800331c <HAL_RCC_GetSysClockFreq+0x34>
 8003316:	2b04      	cmp	r3, #4
 8003318:	d003      	beq.n	8003322 <HAL_RCC_GetSysClockFreq+0x3a>
 800331a:	e09b      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800331c:	4b53      	ldr	r3, [pc, #332]	; (800346c <HAL_RCC_GetSysClockFreq+0x184>)
 800331e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003320:	e09b      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003322:	4b53      	ldr	r3, [pc, #332]	; (8003470 <HAL_RCC_GetSysClockFreq+0x188>)
 8003324:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003326:	e098      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003328:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCC_GetSysClockFreq+0x180>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003330:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003332:	4b4d      	ldr	r3, [pc, #308]	; (8003468 <HAL_RCC_GetSysClockFreq+0x180>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d028      	beq.n	8003390 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800333e:	4b4a      	ldr	r3, [pc, #296]	; (8003468 <HAL_RCC_GetSysClockFreq+0x180>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	099b      	lsrs	r3, r3, #6
 8003344:	2200      	movs	r2, #0
 8003346:	623b      	str	r3, [r7, #32]
 8003348:	627a      	str	r2, [r7, #36]	; 0x24
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003350:	2100      	movs	r1, #0
 8003352:	4b47      	ldr	r3, [pc, #284]	; (8003470 <HAL_RCC_GetSysClockFreq+0x188>)
 8003354:	fb03 f201 	mul.w	r2, r3, r1
 8003358:	2300      	movs	r3, #0
 800335a:	fb00 f303 	mul.w	r3, r0, r3
 800335e:	4413      	add	r3, r2
 8003360:	4a43      	ldr	r2, [pc, #268]	; (8003470 <HAL_RCC_GetSysClockFreq+0x188>)
 8003362:	fba0 1202 	umull	r1, r2, r0, r2
 8003366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003368:	460a      	mov	r2, r1
 800336a:	62ba      	str	r2, [r7, #40]	; 0x28
 800336c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336e:	4413      	add	r3, r2
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003374:	2200      	movs	r2, #0
 8003376:	61bb      	str	r3, [r7, #24]
 8003378:	61fa      	str	r2, [r7, #28]
 800337a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800337e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003382:	f7fc ff7d 	bl	8000280 <__aeabi_uldivmod>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4613      	mov	r3, r2
 800338c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338e:	e053      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003390:	4b35      	ldr	r3, [pc, #212]	; (8003468 <HAL_RCC_GetSysClockFreq+0x180>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	2200      	movs	r2, #0
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	617a      	str	r2, [r7, #20]
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033a2:	f04f 0b00 	mov.w	fp, #0
 80033a6:	4652      	mov	r2, sl
 80033a8:	465b      	mov	r3, fp
 80033aa:	f04f 0000 	mov.w	r0, #0
 80033ae:	f04f 0100 	mov.w	r1, #0
 80033b2:	0159      	lsls	r1, r3, #5
 80033b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033b8:	0150      	lsls	r0, r2, #5
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	ebb2 080a 	subs.w	r8, r2, sl
 80033c2:	eb63 090b 	sbc.w	r9, r3, fp
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033da:	ebb2 0408 	subs.w	r4, r2, r8
 80033de:	eb63 0509 	sbc.w	r5, r3, r9
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	00eb      	lsls	r3, r5, #3
 80033ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033f0:	00e2      	lsls	r2, r4, #3
 80033f2:	4614      	mov	r4, r2
 80033f4:	461d      	mov	r5, r3
 80033f6:	eb14 030a 	adds.w	r3, r4, sl
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	eb45 030b 	adc.w	r3, r5, fp
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	f04f 0200 	mov.w	r2, #0
 8003406:	f04f 0300 	mov.w	r3, #0
 800340a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800340e:	4629      	mov	r1, r5
 8003410:	028b      	lsls	r3, r1, #10
 8003412:	4621      	mov	r1, r4
 8003414:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003418:	4621      	mov	r1, r4
 800341a:	028a      	lsls	r2, r1, #10
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003422:	2200      	movs	r2, #0
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	60fa      	str	r2, [r7, #12]
 8003428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800342c:	f7fc ff28 	bl	8000280 <__aeabi_uldivmod>
 8003430:	4602      	mov	r2, r0
 8003432:	460b      	mov	r3, r1
 8003434:	4613      	mov	r3, r2
 8003436:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCC_GetSysClockFreq+0x180>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	0c1b      	lsrs	r3, r3, #16
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	3301      	adds	r3, #1
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003448:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800344a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003450:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003452:	e002      	b.n	800345a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003454:	4b05      	ldr	r3, [pc, #20]	; (800346c <HAL_RCC_GetSysClockFreq+0x184>)
 8003456:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003458:	bf00      	nop
    }
  }
  return sysclockfreq;
 800345a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800345c:	4618      	mov	r0, r3
 800345e:	3740      	adds	r7, #64	; 0x40
 8003460:	46bd      	mov	sp, r7
 8003462:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003466:	bf00      	nop
 8003468:	40023800 	.word	0x40023800
 800346c:	00f42400 	.word	0x00f42400
 8003470:	017d7840 	.word	0x017d7840

08003474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003474:	b480      	push	{r7}
 8003476:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003478:	4b03      	ldr	r3, [pc, #12]	; (8003488 <HAL_RCC_GetHCLKFreq+0x14>)
 800347a:	681b      	ldr	r3, [r3, #0]
}
 800347c:	4618      	mov	r0, r3
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	20000008 	.word	0x20000008

0800348c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003490:	f7ff fff0 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 8003494:	4602      	mov	r2, r0
 8003496:	4b05      	ldr	r3, [pc, #20]	; (80034ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	0a9b      	lsrs	r3, r3, #10
 800349c:	f003 0307 	and.w	r3, r3, #7
 80034a0:	4903      	ldr	r1, [pc, #12]	; (80034b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80034a2:	5ccb      	ldrb	r3, [r1, r3]
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40023800 	.word	0x40023800
 80034b0:	08009d20 	.word	0x08009d20

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034b8:	f7ff ffdc 	bl	8003474 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0b5b      	lsrs	r3, r3, #13
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4903      	ldr	r1, [pc, #12]	; (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40023800 	.word	0x40023800
 80034d8:	08009d20 	.word	0x08009d20

080034dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e07b      	b.n	80035e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80034fe:	d009      	beq.n	8003514 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	61da      	str	r2, [r3, #28]
 8003506:	e005      	b.n	8003514 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b00      	cmp	r3, #0
 8003524:	d106      	bne.n	8003534 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f7fd fdf0 	bl	8001114 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800355c:	431a      	orrs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0301 	and.w	r3, r3, #1
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	ea42 0103 	orr.w	r1, r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	f003 0104 	and.w	r1, r3, #4
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ba:	f003 0210 	and.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69da      	ldr	r2, [r3, #28]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ee:	b580      	push	{r7, lr}
 80035f0:	b088      	sub	sp, #32
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	603b      	str	r3, [r7, #0]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_SPI_Transmit+0x22>
 800360c:	2302      	movs	r3, #2
 800360e:	e126      	b.n	800385e <HAL_SPI_Transmit+0x270>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003618:	f7fe f88c 	bl	8001734 <HAL_GetTick>
 800361c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800361e:	88fb      	ldrh	r3, [r7, #6]
 8003620:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d002      	beq.n	8003634 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800362e:	2302      	movs	r3, #2
 8003630:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003632:	e10b      	b.n	800384c <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d002      	beq.n	8003640 <HAL_SPI_Transmit+0x52>
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d102      	bne.n	8003646 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003644:	e102      	b.n	800384c <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2203      	movs	r2, #3
 800364a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	88fa      	ldrh	r2, [r7, #6]
 800365e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	88fa      	ldrh	r2, [r7, #6]
 8003664:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800368c:	d10f      	bne.n	80036ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800369c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b40      	cmp	r3, #64	; 0x40
 80036ba:	d007      	beq.n	80036cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d4:	d14b      	bne.n	800376e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_SPI_Transmit+0xf6>
 80036de:	8afb      	ldrh	r3, [r7, #22]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d13e      	bne.n	8003762 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	881a      	ldrh	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	1c9a      	adds	r2, r3, #2
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036fe:	b29b      	uxth	r3, r3
 8003700:	3b01      	subs	r3, #1
 8003702:	b29a      	uxth	r2, r3
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003708:	e02b      	b.n	8003762 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b02      	cmp	r3, #2
 8003716:	d112      	bne.n	800373e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	881a      	ldrh	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	1c9a      	adds	r2, r3, #2
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29a      	uxth	r2, r3
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	86da      	strh	r2, [r3, #54]	; 0x36
 800373c:	e011      	b.n	8003762 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800373e:	f7fd fff9 	bl	8001734 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d803      	bhi.n	8003756 <HAL_SPI_Transmit+0x168>
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003754:	d102      	bne.n	800375c <HAL_SPI_Transmit+0x16e>
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d102      	bne.n	8003762 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003760:	e074      	b.n	800384c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ce      	bne.n	800370a <HAL_SPI_Transmit+0x11c>
 800376c:	e04c      	b.n	8003808 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_SPI_Transmit+0x18e>
 8003776:	8afb      	ldrh	r3, [r7, #22]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d140      	bne.n	80037fe <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	330c      	adds	r3, #12
 8003786:	7812      	ldrb	r2, [r2, #0]
 8003788:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	1c5a      	adds	r2, r3, #1
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003798:	b29b      	uxth	r3, r3
 800379a:	3b01      	subs	r3, #1
 800379c:	b29a      	uxth	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037a2:	e02c      	b.n	80037fe <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d113      	bne.n	80037da <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	330c      	adds	r3, #12
 80037bc:	7812      	ldrb	r2, [r2, #0]
 80037be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80037d8:	e011      	b.n	80037fe <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037da:	f7fd ffab 	bl	8001734 <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d803      	bhi.n	80037f2 <HAL_SPI_Transmit+0x204>
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f0:	d102      	bne.n	80037f8 <HAL_SPI_Transmit+0x20a>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037fc:	e026      	b.n	800384c <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003802:	b29b      	uxth	r3, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	d1cd      	bne.n	80037a4 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	6839      	ldr	r1, [r7, #0]
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f9d1 	bl	8003bb4 <SPI_EndRxTxTransaction>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2220      	movs	r2, #32
 800381c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d10a      	bne.n	800383c <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	613b      	str	r3, [r7, #16]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	613b      	str	r3, [r7, #16]
 800383a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	77fb      	strb	r3, [r7, #31]
 8003848:	e000      	b.n	800384c <HAL_SPI_Transmit+0x25e>
  }

error:
 800384a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800385c:	7ffb      	ldrb	r3, [r7, #31]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10f      	bne.n	80038ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003892:	2b00      	cmp	r3, #0
 8003894:	d00a      	beq.n	80038ac <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	099b      	lsrs	r3, r3, #6
 800389a:	f003 0301 	and.w	r3, r3, #1
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d004      	beq.n	80038ac <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	4798      	blx	r3
    return;
 80038aa:	e0d7      	b.n	8003a5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	085b      	lsrs	r3, r3, #1
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_SPI_IRQHandler+0x66>
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	09db      	lsrs	r3, r3, #7
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d004      	beq.n	80038ce <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
    return;
 80038cc:	e0c6      	b.n	8003a5c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	095b      	lsrs	r3, r3, #5
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10c      	bne.n	80038f4 <HAL_SPI_IRQHandler+0x8c>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	099b      	lsrs	r3, r3, #6
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	0a1b      	lsrs	r3, r3, #8
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 80b4 	beq.w	8003a5c <HAL_SPI_IRQHandler+0x1f4>
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	f003 0301 	and.w	r3, r3, #1
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 80ad 	beq.w	8003a5c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	099b      	lsrs	r3, r3, #6
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d023      	beq.n	8003956 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b03      	cmp	r3, #3
 8003918:	d011      	beq.n	800393e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0204 	orr.w	r2, r3, #4
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003926:	2300      	movs	r3, #0
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	e00b      	b.n	8003956 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]
        return;
 8003954:	e082      	b.n	8003a5c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d014      	beq.n	800398c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f043 0201 	orr.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800396e:	2300      	movs	r3, #0
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681a      	ldr	r2, [r3, #0]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	0a1b      	lsrs	r3, r3, #8
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	2b00      	cmp	r3, #0
 8003996:	d00c      	beq.n	80039b2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800399c:	f043 0208 	orr.w	r2, r3, #8
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80039a4:	2300      	movs	r3, #0
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d04f      	beq.n	8003a5a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039c8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f003 0302 	and.w	r3, r3, #2
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d104      	bne.n	80039e6 <HAL_SPI_IRQHandler+0x17e>
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d034      	beq.n	8003a50 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0203 	bic.w	r2, r2, #3
 80039f4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d011      	beq.n	8003a22 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a02:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <HAL_SPI_IRQHandler+0x1fc>)
 8003a04:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fb88 	bl	8002120 <HAL_DMA_Abort_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2e:	4a0d      	ldr	r2, [pc, #52]	; (8003a64 <HAL_SPI_IRQHandler+0x1fc>)
 8003a30:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7fe fb72 	bl	8002120 <HAL_DMA_Abort_IT>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00a      	beq.n	8003a58 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003a4e:	e003      	b.n	8003a58 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f000 f809 	bl	8003a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003a56:	e000      	b.n	8003a5a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003a58:	bf00      	nop
    return;
 8003a5a:	bf00      	nop
  }
}
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	08003a7d 	.word	0x08003a7d

08003a68 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b084      	sub	sp, #16
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a96:	68f8      	ldr	r0, [r7, #12]
 8003a98:	f7ff ffe6 	bl	8003a68 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a9c:	bf00      	nop
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}

08003aa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b088      	sub	sp, #32
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ab4:	f7fd fe3e 	bl	8001734 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003ac4:	f7fd fe36 	bl	8001734 <HAL_GetTick>
 8003ac8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aca:	4b39      	ldr	r3, [pc, #228]	; (8003bb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	015b      	lsls	r3, r3, #5
 8003ad0:	0d1b      	lsrs	r3, r3, #20
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	fb02 f303 	mul.w	r3, r2, r3
 8003ad8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ada:	e054      	b.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae2:	d050      	beq.n	8003b86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ae4:	f7fd fe26 	bl	8001734 <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d902      	bls.n	8003afa <SPI_WaitFlagStateUntilTimeout+0x56>
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d13d      	bne.n	8003b76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b12:	d111      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b1c:	d004      	beq.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b26:	d107      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b40:	d10f      	bne.n	8003b62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b50:	601a      	str	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e017      	b.n	8003ba6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4013      	ands	r3, r2
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	bf0c      	ite	eq
 8003b96:	2301      	moveq	r3, #1
 8003b98:	2300      	movne	r3, #0
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	79fb      	ldrb	r3, [r7, #7]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d19b      	bne.n	8003adc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000008 	.word	0x20000008

08003bb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b088      	sub	sp, #32
 8003bb8:	af02      	add	r7, sp, #8
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003bc0:	4b1b      	ldr	r3, [pc, #108]	; (8003c30 <SPI_EndRxTxTransaction+0x7c>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a1b      	ldr	r2, [pc, #108]	; (8003c34 <SPI_EndRxTxTransaction+0x80>)
 8003bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bca:	0d5b      	lsrs	r3, r3, #21
 8003bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bd0:	fb02 f303 	mul.w	r3, r2, r3
 8003bd4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bde:	d112      	bne.n	8003c06 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff ff5a 	bl	8003aa4 <SPI_WaitFlagStateUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d016      	beq.n	8003c24 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e00f      	b.n	8003c26 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c1c:	2b80      	cmp	r3, #128	; 0x80
 8003c1e:	d0f2      	beq.n	8003c06 <SPI_EndRxTxTransaction+0x52>
 8003c20:	e000      	b.n	8003c24 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c22:	bf00      	nop
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000008 	.word	0x20000008
 8003c34:	165e9f81 	.word	0x165e9f81

08003c38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e041      	b.n	8003cce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d106      	bne.n	8003c64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f7fd faa8 	bl	80011b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3304      	adds	r3, #4
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 fa2e 	bl	80040d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3708      	adds	r7, #8
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	f003 0302 	and.w	r3, r3, #2
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d122      	bne.n	8003d32 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b02      	cmp	r3, #2
 8003cf8:	d11b      	bne.n	8003d32 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f06f 0202 	mvn.w	r2, #2
 8003d02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	f003 0303 	and.w	r3, r3, #3
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d003      	beq.n	8003d20 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f9bf 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003d1e:	e005      	b.n	8003d2c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 f9b1 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9c2 	bl	80040b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	f003 0304 	and.w	r3, r3, #4
 8003d3c:	2b04      	cmp	r3, #4
 8003d3e:	d122      	bne.n	8003d86 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	f003 0304 	and.w	r3, r3, #4
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d11b      	bne.n	8003d86 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f06f 0204 	mvn.w	r2, #4
 8003d56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d003      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 f995 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003d72:	e005      	b.n	8003d80 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 f987 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f998 	bl	80040b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	f003 0308 	and.w	r3, r3, #8
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d122      	bne.n	8003dda <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d11b      	bne.n	8003dda <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f06f 0208 	mvn.w	r2, #8
 8003daa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2204      	movs	r2, #4
 8003db0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	f003 0303 	and.w	r3, r3, #3
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d003      	beq.n	8003dc8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f000 f96b 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003dc6:	e005      	b.n	8003dd4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f95d 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f96e 	bl	80040b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	f003 0310 	and.w	r3, r3, #16
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d122      	bne.n	8003e2e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
 8003dee:	f003 0310 	and.w	r3, r3, #16
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d11b      	bne.n	8003e2e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f06f 0210 	mvn.w	r2, #16
 8003dfe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2208      	movs	r2, #8
 8003e04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d003      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f941 	bl	800409c <HAL_TIM_IC_CaptureCallback>
 8003e1a:	e005      	b.n	8003e28 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 f933 	bl	8004088 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 f944 	bl	80040b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d10e      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d107      	bne.n	8003e5a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f06f 0201 	mvn.w	r2, #1
 8003e52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f90d 	bl	8004074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e64:	2b80      	cmp	r3, #128	; 0x80
 8003e66:	d10e      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	68db      	ldr	r3, [r3, #12]
 8003e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e72:	2b80      	cmp	r3, #128	; 0x80
 8003e74:	d107      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fa4d 	bl	8004320 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b40      	cmp	r3, #64	; 0x40
 8003e92:	d10e      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d107      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 f909 	bl	80040c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0320 	and.w	r3, r3, #32
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d10e      	bne.n	8003ede <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b20      	cmp	r3, #32
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0220 	mvn.w	r2, #32
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 fa17 	bl	800430c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b084      	sub	sp, #16
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_TIM_ConfigClockSource+0x1c>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e0b4      	b.n	800406c <HAL_TIM_ConfigClockSource+0x186>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2202      	movs	r2, #2
 8003f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f20:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f28:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3a:	d03e      	beq.n	8003fba <HAL_TIM_ConfigClockSource+0xd4>
 8003f3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f40:	f200 8087 	bhi.w	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f48:	f000 8086 	beq.w	8004058 <HAL_TIM_ConfigClockSource+0x172>
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	d87f      	bhi.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f52:	2b70      	cmp	r3, #112	; 0x70
 8003f54:	d01a      	beq.n	8003f8c <HAL_TIM_ConfigClockSource+0xa6>
 8003f56:	2b70      	cmp	r3, #112	; 0x70
 8003f58:	d87b      	bhi.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f5a:	2b60      	cmp	r3, #96	; 0x60
 8003f5c:	d050      	beq.n	8004000 <HAL_TIM_ConfigClockSource+0x11a>
 8003f5e:	2b60      	cmp	r3, #96	; 0x60
 8003f60:	d877      	bhi.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f62:	2b50      	cmp	r3, #80	; 0x50
 8003f64:	d03c      	beq.n	8003fe0 <HAL_TIM_ConfigClockSource+0xfa>
 8003f66:	2b50      	cmp	r3, #80	; 0x50
 8003f68:	d873      	bhi.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d058      	beq.n	8004020 <HAL_TIM_ConfigClockSource+0x13a>
 8003f6e:	2b40      	cmp	r3, #64	; 0x40
 8003f70:	d86f      	bhi.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f72:	2b30      	cmp	r3, #48	; 0x30
 8003f74:	d064      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x15a>
 8003f76:	2b30      	cmp	r3, #48	; 0x30
 8003f78:	d86b      	bhi.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f7a:	2b20      	cmp	r3, #32
 8003f7c:	d060      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x15a>
 8003f7e:	2b20      	cmp	r3, #32
 8003f80:	d867      	bhi.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d05c      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x15a>
 8003f86:	2b10      	cmp	r3, #16
 8003f88:	d05a      	beq.n	8004040 <HAL_TIM_ConfigClockSource+0x15a>
 8003f8a:	e062      	b.n	8004052 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	6899      	ldr	r1, [r3, #8]
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685a      	ldr	r2, [r3, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f000 f996 	bl	80042cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003fae:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	609a      	str	r2, [r3, #8]
      break;
 8003fb8:	e04f      	b.n	800405a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6899      	ldr	r1, [r3, #8]
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	685a      	ldr	r2, [r3, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f000 f97f 	bl	80042cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fdc:	609a      	str	r2, [r3, #8]
      break;
 8003fde:	e03c      	b.n	800405a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	461a      	mov	r2, r3
 8003fee:	f000 f8f3 	bl	80041d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2150      	movs	r1, #80	; 0x50
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f000 f94c 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 8003ffe:	e02c      	b.n	800405a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6818      	ldr	r0, [r3, #0]
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	6859      	ldr	r1, [r3, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	68db      	ldr	r3, [r3, #12]
 800400c:	461a      	mov	r2, r3
 800400e:	f000 f912 	bl	8004236 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2160      	movs	r1, #96	; 0x60
 8004018:	4618      	mov	r0, r3
 800401a:	f000 f93c 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 800401e:	e01c      	b.n	800405a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6859      	ldr	r1, [r3, #4]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	461a      	mov	r2, r3
 800402e:	f000 f8d3 	bl	80041d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2140      	movs	r1, #64	; 0x40
 8004038:	4618      	mov	r0, r3
 800403a:	f000 f92c 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 800403e:	e00c      	b.n	800405a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4619      	mov	r1, r3
 800404a:	4610      	mov	r0, r2
 800404c:	f000 f923 	bl	8004296 <TIM_ITRx_SetConfig>
      break;
 8004050:	e003      	b.n	800405a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	73fb      	strb	r3, [r7, #15]
      break;
 8004056:	e000      	b.n	800405a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004058:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2201      	movs	r2, #1
 800405e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800406a:	7bfb      	ldrb	r3, [r7, #15]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3710      	adds	r7, #16
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004090:	bf00      	nop
 8004092:	370c      	adds	r7, #12
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a34      	ldr	r2, [pc, #208]	; (80041bc <TIM_Base_SetConfig+0xe4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d00f      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f6:	d00b      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a31      	ldr	r2, [pc, #196]	; (80041c0 <TIM_Base_SetConfig+0xe8>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d007      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	4a30      	ldr	r2, [pc, #192]	; (80041c4 <TIM_Base_SetConfig+0xec>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d003      	beq.n	8004110 <TIM_Base_SetConfig+0x38>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a2f      	ldr	r2, [pc, #188]	; (80041c8 <TIM_Base_SetConfig+0xf0>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d108      	bne.n	8004122 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004116:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a25      	ldr	r2, [pc, #148]	; (80041bc <TIM_Base_SetConfig+0xe4>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01b      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004130:	d017      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	4a22      	ldr	r2, [pc, #136]	; (80041c0 <TIM_Base_SetConfig+0xe8>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d013      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	4a21      	ldr	r2, [pc, #132]	; (80041c4 <TIM_Base_SetConfig+0xec>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d00f      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a20      	ldr	r2, [pc, #128]	; (80041c8 <TIM_Base_SetConfig+0xf0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00b      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a1f      	ldr	r2, [pc, #124]	; (80041cc <TIM_Base_SetConfig+0xf4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d007      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a1e      	ldr	r2, [pc, #120]	; (80041d0 <TIM_Base_SetConfig+0xf8>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d003      	beq.n	8004162 <TIM_Base_SetConfig+0x8a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a1d      	ldr	r2, [pc, #116]	; (80041d4 <TIM_Base_SetConfig+0xfc>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d108      	bne.n	8004174 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	4313      	orrs	r3, r2
 8004172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	689a      	ldr	r2, [r3, #8]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a08      	ldr	r2, [pc, #32]	; (80041bc <TIM_Base_SetConfig+0xe4>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d103      	bne.n	80041a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	615a      	str	r2, [r3, #20]
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40000400 	.word	0x40000400
 80041c4:	40000800 	.word	0x40000800
 80041c8:	40000c00 	.word	0x40000c00
 80041cc:	40014000 	.word	0x40014000
 80041d0:	40014400 	.word	0x40014400
 80041d4:	40014800 	.word	0x40014800

080041d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6a1b      	ldr	r3, [r3, #32]
 80041e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0201 	bic.w	r2, r3, #1
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004202:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f023 030a 	bic.w	r3, r3, #10
 8004214:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	693a      	ldr	r2, [r7, #16]
 8004222:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	621a      	str	r2, [r3, #32]
}
 800422a:	bf00      	nop
 800422c:	371c      	adds	r7, #28
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004236:	b480      	push	{r7}
 8004238:	b087      	sub	sp, #28
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f023 0210 	bic.w	r2, r3, #16
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004260:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	031b      	lsls	r3, r3, #12
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004272:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	697a      	ldr	r2, [r7, #20]
 8004282:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	693a      	ldr	r2, [r7, #16]
 8004288:	621a      	str	r2, [r3, #32]
}
 800428a:	bf00      	nop
 800428c:	371c      	adds	r7, #28
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr

08004296 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004296:	b480      	push	{r7}
 8004298:	b085      	sub	sp, #20
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
 800429e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042ae:	683a      	ldr	r2, [r7, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f043 0307 	orr.w	r3, r3, #7
 80042b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	609a      	str	r2, [r3, #8]
}
 80042c0:	bf00      	nop
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	021a      	lsls	r2, r3, #8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	697a      	ldr	r2, [r7, #20]
 80042fe:	609a      	str	r2, [r3, #8]
}
 8004300:	bf00      	nop
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e03f      	b.n	80043c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d106      	bne.n	8004360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7fc ff68 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2224      	movs	r2, #36	; 0x24
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68da      	ldr	r2, [r3, #12]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 ff5f 	bl	800523c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800438c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800439c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b08a      	sub	sp, #40	; 0x28
 80043d2:	af02      	add	r7, sp, #8
 80043d4:	60f8      	str	r0, [r7, #12]
 80043d6:	60b9      	str	r1, [r7, #8]
 80043d8:	603b      	str	r3, [r7, #0]
 80043da:	4613      	mov	r3, r2
 80043dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043de:	2300      	movs	r3, #0
 80043e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b20      	cmp	r3, #32
 80043ec:	d17c      	bne.n	80044e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <HAL_UART_Transmit+0x2c>
 80043f4:	88fb      	ldrh	r3, [r7, #6]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e075      	b.n	80044ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_UART_Transmit+0x3e>
 8004408:	2302      	movs	r3, #2
 800440a:	e06e      	b.n	80044ea <HAL_UART_Transmit+0x11c>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2221      	movs	r2, #33	; 0x21
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004422:	f7fd f987 	bl	8001734 <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	88fa      	ldrh	r2, [r7, #6]
 800442c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800443c:	d108      	bne.n	8004450 <HAL_UART_Transmit+0x82>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004446:	2300      	movs	r3, #0
 8004448:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	61bb      	str	r3, [r7, #24]
 800444e:	e003      	b.n	8004458 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004460:	e02a      	b.n	80044b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	; 0x80
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fc17 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d001      	beq.n	800447c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e036      	b.n	80044ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10b      	bne.n	800449a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	881b      	ldrh	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004490:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	3302      	adds	r3, #2
 8004496:	61bb      	str	r3, [r7, #24]
 8004498:	e007      	b.n	80044aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	781a      	ldrb	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	3301      	adds	r3, #1
 80044a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044bc:	b29b      	uxth	r3, r3
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1cf      	bne.n	8004462 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2140      	movs	r1, #64	; 0x40
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f000 fbe7 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	e006      	b.n	80044ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2220      	movs	r2, #32
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80044e4:	2300      	movs	r3, #0
 80044e6:	e000      	b.n	80044ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80044e8:	2302      	movs	r3, #2
  }
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b084      	sub	sp, #16
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	4613      	mov	r3, r2
 80044fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004506:	b2db      	uxtb	r3, r3
 8004508:	2b20      	cmp	r3, #32
 800450a:	d11d      	bne.n	8004548 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_UART_Receive_DMA+0x26>
 8004512:	88fb      	ldrh	r3, [r7, #6]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e016      	b.n	800454a <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004522:	2b01      	cmp	r3, #1
 8004524:	d101      	bne.n	800452a <HAL_UART_Receive_DMA+0x38>
 8004526:	2302      	movs	r3, #2
 8004528:	e00f      	b.n	800454a <HAL_UART_Receive_DMA+0x58>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004538:	88fb      	ldrh	r3, [r7, #6]
 800453a:	461a      	mov	r2, r3
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 fc1c 	bl	8004d7c <UART_Start_Receive_DMA>
 8004544:	4603      	mov	r3, r0
 8004546:	e000      	b.n	800454a <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004548:	2302      	movs	r3, #2
  }
}
 800454a:	4618      	mov	r0, r3
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
	...

08004554 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b0ba      	sub	sp, #232	; 0xe8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800457a:	2300      	movs	r3, #0
 800457c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004580:	2300      	movs	r3, #0
 8004582:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004592:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459e:	f003 0320 	and.w	r3, r3, #32
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d009      	beq.n	80045ba <HAL_UART_IRQHandler+0x66>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 fd87 	bl	80050c6 <UART_Receive_IT>
      return;
 80045b8:	e256      	b.n	8004a68 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f000 80de 	beq.w	8004780 <HAL_UART_IRQHandler+0x22c>
 80045c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d106      	bne.n	80045de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80d1 	beq.w	8004780 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e2:	f003 0301 	and.w	r3, r3, #1
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d00b      	beq.n	8004602 <HAL_UART_IRQHandler+0xae>
 80045ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f043 0201 	orr.w	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004606:	f003 0304 	and.w	r3, r3, #4
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00b      	beq.n	8004626 <HAL_UART_IRQHandler+0xd2>
 800460e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800461e:	f043 0202 	orr.w	r2, r3, #2
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0302 	and.w	r3, r3, #2
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <HAL_UART_IRQHandler+0xf6>
 8004632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f043 0204 	orr.w	r2, r3, #4
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <HAL_UART_IRQHandler+0x126>
 8004656:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b00      	cmp	r3, #0
 8004660:	d105      	bne.n	800466e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	f043 0208 	orr.w	r2, r3, #8
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 81ed 	beq.w	8004a5e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d008      	beq.n	80046a2 <HAL_UART_IRQHandler+0x14e>
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 fd12 	bl	80050c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	bf0c      	ite	eq
 80046b0:	2301      	moveq	r3, #1
 80046b2:	2300      	movne	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <HAL_UART_IRQHandler+0x17a>
 80046c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d04f      	beq.n	800476e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fc1a 	bl	8004f08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d141      	bne.n	8004766 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3314      	adds	r3, #20
 80046e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046f0:	e853 3f00 	ldrex	r3, [r3]
 80046f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004700:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3314      	adds	r3, #20
 800470a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800470e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004712:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800471a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800471e:	e841 2300 	strex	r3, r2, [r1]
 8004722:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1d9      	bne.n	80046e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004732:	2b00      	cmp	r3, #0
 8004734:	d013      	beq.n	800475e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	4a7d      	ldr	r2, [pc, #500]	; (8004930 <HAL_UART_IRQHandler+0x3dc>)
 800473c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004742:	4618      	mov	r0, r3
 8004744:	f7fd fcec 	bl	8002120 <HAL_DMA_Abort_IT>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004758:	4610      	mov	r0, r2
 800475a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	e00e      	b.n	800477c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f990 	bl	8004a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	e00a      	b.n	800477c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f98c 	bl	8004a84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800476c:	e006      	b.n	800477c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f988 	bl	8004a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800477a:	e170      	b.n	8004a5e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477c:	bf00      	nop
    return;
 800477e:	e16e      	b.n	8004a5e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004784:	2b01      	cmp	r3, #1
 8004786:	f040 814a 	bne.w	8004a1e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0310 	and.w	r3, r3, #16
 8004792:	2b00      	cmp	r3, #0
 8004794:	f000 8143 	beq.w	8004a1e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479c:	f003 0310 	and.w	r3, r3, #16
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 813c 	beq.w	8004a1e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	60bb      	str	r3, [r7, #8]
 80047ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c6:	2b40      	cmp	r3, #64	; 0x40
 80047c8:	f040 80b4 	bne.w	8004934 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8140 	beq.w	8004a62 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ea:	429a      	cmp	r2, r3
 80047ec:	f080 8139 	bcs.w	8004a62 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004802:	f000 8088 	beq.w	8004916 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004814:	e853 3f00 	ldrex	r3, [r3]
 8004818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800481c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004820:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	330c      	adds	r3, #12
 800482e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004832:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004836:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800483e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004842:	e841 2300 	strex	r3, r2, [r1]
 8004846:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800484a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1d9      	bne.n	8004806 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3314      	adds	r3, #20
 8004858:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	3314      	adds	r3, #20
 8004872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004876:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800487a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800487c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800487e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004882:	e841 2300 	strex	r3, r2, [r1]
 8004886:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1e1      	bne.n	8004852 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	3314      	adds	r3, #20
 8004894:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004896:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004898:	e853 3f00 	ldrex	r3, [r3]
 800489c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800489e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	3314      	adds	r3, #20
 80048ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048ba:	e841 2300 	strex	r3, r2, [r1]
 80048be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1e3      	bne.n	800488e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2220      	movs	r2, #32
 80048ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	330c      	adds	r3, #12
 80048da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	330c      	adds	r3, #12
 80048f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80048fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004900:	e841 2300 	strex	r3, r2, [r1]
 8004904:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1e3      	bne.n	80048d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004910:	4618      	mov	r0, r3
 8004912:	f7fd fb95 	bl	8002040 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800491e:	b29b      	uxth	r3, r3
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	b29b      	uxth	r3, r3
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f8b6 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800492c:	e099      	b.n	8004a62 <HAL_UART_IRQHandler+0x50e>
 800492e:	bf00      	nop
 8004930:	08004fcf 	.word	0x08004fcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800493c:	b29b      	uxth	r3, r3
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004948:	b29b      	uxth	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	f000 808b 	beq.w	8004a66 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004954:	2b00      	cmp	r3, #0
 8004956:	f000 8086 	beq.w	8004a66 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	330c      	adds	r3, #12
 8004960:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004964:	e853 3f00 	ldrex	r3, [r3]
 8004968:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800496a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800496c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004970:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	330c      	adds	r3, #12
 800497a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800497e:	647a      	str	r2, [r7, #68]	; 0x44
 8004980:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004982:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004984:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800498c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e3      	bne.n	800495a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3314      	adds	r3, #20
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	623b      	str	r3, [r7, #32]
   return(result);
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f023 0301 	bic.w	r3, r3, #1
 80049a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3314      	adds	r3, #20
 80049b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049b6:	633a      	str	r2, [r7, #48]	; 0x30
 80049b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e3      	bne.n	8004992 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f023 0310 	bic.w	r3, r3, #16
 80049ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	330c      	adds	r3, #12
 80049f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049fc:	61fa      	str	r2, [r7, #28]
 80049fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	69b9      	ldr	r1, [r7, #24]
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	617b      	str	r3, [r7, #20]
   return(result);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e3      	bne.n	80049d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a14:	4619      	mov	r1, r3
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f83e 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a1c:	e023      	b.n	8004a66 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d009      	beq.n	8004a3e <HAL_UART_IRQHandler+0x4ea>
 8004a2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d003      	beq.n	8004a3e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 fadd 	bl	8004ff6 <UART_Transmit_IT>
    return;
 8004a3c:	e014      	b.n	8004a68 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d00e      	beq.n	8004a68 <HAL_UART_IRQHandler+0x514>
 8004a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d008      	beq.n	8004a68 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fb1d 	bl	8005096 <UART_EndTransmit_IT>
    return;
 8004a5c:	e004      	b.n	8004a68 <HAL_UART_IRQHandler+0x514>
    return;
 8004a5e:	bf00      	nop
 8004a60:	e002      	b.n	8004a68 <HAL_UART_IRQHandler+0x514>
      return;
 8004a62:	bf00      	nop
 8004a64:	e000      	b.n	8004a68 <HAL_UART_IRQHandler+0x514>
      return;
 8004a66:	bf00      	nop
  }
}
 8004a68:	37e8      	adds	r7, #232	; 0xe8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop

08004a70 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b09c      	sub	sp, #112	; 0x70
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004abc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d172      	bne.n	8004bb2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ace:	2200      	movs	r2, #0
 8004ad0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	330c      	adds	r3, #12
 8004ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	330c      	adds	r3, #12
 8004af0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004af2:	65ba      	str	r2, [r7, #88]	; 0x58
 8004af4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004af8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004afa:	e841 2300 	strex	r3, r2, [r1]
 8004afe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1e5      	bne.n	8004ad2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3314      	adds	r3, #20
 8004b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b18:	f023 0301 	bic.w	r3, r3, #1
 8004b1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	3314      	adds	r3, #20
 8004b24:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004b26:	647a      	str	r2, [r7, #68]	; 0x44
 8004b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e5      	bne.n	8004b06 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	3314      	adds	r3, #20
 8004b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	e853 3f00 	ldrex	r3, [r3]
 8004b48:	623b      	str	r3, [r7, #32]
   return(result);
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b50:	663b      	str	r3, [r7, #96]	; 0x60
 8004b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8004b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b62:	e841 2300 	strex	r3, r2, [r1]
 8004b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1e5      	bne.n	8004b3a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d119      	bne.n	8004bb2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f023 0310 	bic.w	r3, r3, #16
 8004b94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba2:	69b9      	ldr	r1, [r7, #24]
 8004ba4:	69fa      	ldr	r2, [r7, #28]
 8004ba6:	e841 2300 	strex	r3, r2, [r1]
 8004baa:	617b      	str	r3, [r7, #20]
   return(result);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1e5      	bne.n	8004b7e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d106      	bne.n	8004bc8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bc2:	f7ff ff69 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bc6:	e002      	b.n	8004bce <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004bc8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004bca:	f7fc fd13 	bl	80015f4 <HAL_UART_RxCpltCallback>
}
 8004bce:	bf00      	nop
 8004bd0:	3770      	adds	r7, #112	; 0x70
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b084      	sub	sp, #16
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d108      	bne.n	8004bfe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f7ff ff4e 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004bfc:	e002      	b.n	8004c04 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ff36 	bl	8004a70 <HAL_UART_RxHalfCpltCallback>
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c28:	2b80      	cmp	r3, #128	; 0x80
 8004c2a:	bf0c      	ite	eq
 8004c2c:	2301      	moveq	r3, #1
 8004c2e:	2300      	movne	r3, #0
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b21      	cmp	r3, #33	; 0x21
 8004c3e:	d108      	bne.n	8004c52 <UART_DMAError+0x46>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004c4c:	68b8      	ldr	r0, [r7, #8]
 8004c4e:	f000 f933 	bl	8004eb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b40      	cmp	r3, #64	; 0x40
 8004c5e:	bf0c      	ite	eq
 8004c60:	2301      	moveq	r3, #1
 8004c62:	2300      	movne	r3, #0
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	2b22      	cmp	r3, #34	; 0x22
 8004c72:	d108      	bne.n	8004c86 <UART_DMAError+0x7a>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d005      	beq.n	8004c86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004c80:	68b8      	ldr	r0, [r7, #8]
 8004c82:	f000 f941 	bl	8004f08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8a:	f043 0210 	orr.w	r2, r3, #16
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c92:	68b8      	ldr	r0, [r7, #8]
 8004c94:	f7ff fef6 	bl	8004a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b090      	sub	sp, #64	; 0x40
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb0:	e050      	b.n	8004d54 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d04c      	beq.n	8004d54 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d007      	beq.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cc0:	f7fc fd38 	bl	8001734 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d241      	bcs.n	8004d54 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	330c      	adds	r3, #12
 8004cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	330c      	adds	r3, #12
 8004cee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004cf0:	637a      	str	r2, [r7, #52]	; 0x34
 8004cf2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf8:	e841 2300 	strex	r3, r2, [r1]
 8004cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d1e5      	bne.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3314      	adds	r3, #20
 8004d0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	e853 3f00 	ldrex	r3, [r3]
 8004d12:	613b      	str	r3, [r7, #16]
   return(result);
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	f023 0301 	bic.w	r3, r3, #1
 8004d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	3314      	adds	r3, #20
 8004d22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d24:	623a      	str	r2, [r7, #32]
 8004d26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d28:	69f9      	ldr	r1, [r7, #28]
 8004d2a:	6a3a      	ldr	r2, [r7, #32]
 8004d2c:	e841 2300 	strex	r3, r2, [r1]
 8004d30:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1e5      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2220      	movs	r2, #32
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e00f      	b.n	8004d74 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	68ba      	ldr	r2, [r7, #8]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d09f      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3740      	adds	r7, #64	; 0x40
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b098      	sub	sp, #96	; 0x60
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2222      	movs	r2, #34	; 0x22
 8004da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da8:	4a40      	ldr	r2, [pc, #256]	; (8004eac <UART_Start_Receive_DMA+0x130>)
 8004daa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	4a3f      	ldr	r2, [pc, #252]	; (8004eb0 <UART_Start_Receive_DMA+0x134>)
 8004db2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	4a3e      	ldr	r2, [pc, #248]	; (8004eb4 <UART_Start_Receive_DMA+0x138>)
 8004dba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004dc4:	f107 0308 	add.w	r3, r7, #8
 8004dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	3304      	adds	r3, #4
 8004dd4:	4619      	mov	r1, r3
 8004dd6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	88fb      	ldrh	r3, [r7, #6]
 8004ddc:	f7fd f8d8 	bl	8001f90 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004de0:	2300      	movs	r3, #0
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	613b      	str	r3, [r7, #16]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	613b      	str	r3, [r7, #16]
 8004df4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d019      	beq.n	8004e3a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	330c      	adds	r3, #12
 8004e0c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	330c      	adds	r3, #12
 8004e24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e26:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e28:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e2e:	e841 2300 	strex	r3, r2, [r1]
 8004e32:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d1e5      	bne.n	8004e06 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3314      	adds	r3, #20
 8004e40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	657b      	str	r3, [r7, #84]	; 0x54
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3314      	adds	r3, #20
 8004e58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e5a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e5      	bne.n	8004e3a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3314      	adds	r3, #20
 8004e74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	617b      	str	r3, [r7, #20]
   return(result);
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e84:	653b      	str	r3, [r7, #80]	; 0x50
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3314      	adds	r3, #20
 8004e8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e8e:	627a      	str	r2, [r7, #36]	; 0x24
 8004e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6a39      	ldr	r1, [r7, #32]
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3760      	adds	r7, #96	; 0x60
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	08004ab1 	.word	0x08004ab1
 8004eb0:	08004bd7 	.word	0x08004bd7
 8004eb4:	08004c0d 	.word	0x08004c0d

08004eb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	330c      	adds	r3, #12
 8004ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	e853 3f00 	ldrex	r3, [r3]
 8004ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004ed6:	61fb      	str	r3, [r7, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	330c      	adds	r3, #12
 8004ede:	69fa      	ldr	r2, [r7, #28]
 8004ee0:	61ba      	str	r2, [r7, #24]
 8004ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee4:	6979      	ldr	r1, [r7, #20]
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	e841 2300 	strex	r3, r2, [r1]
 8004eec:	613b      	str	r3, [r7, #16]
   return(result);
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1e5      	bne.n	8004ec0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004efc:	bf00      	nop
 8004efe:	3724      	adds	r7, #36	; 0x24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b095      	sub	sp, #84	; 0x54
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f30:	643a      	str	r2, [r7, #64]	; 0x40
 8004f32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	3314      	adds	r3, #20
 8004f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4c:	6a3b      	ldr	r3, [r7, #32]
 8004f4e:	e853 3f00 	ldrex	r3, [r3]
 8004f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f023 0301 	bic.w	r3, r3, #1
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f6c:	e841 2300 	strex	r3, r2, [r1]
 8004f70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d1e5      	bne.n	8004f44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d119      	bne.n	8004fb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	330c      	adds	r3, #12
 8004f86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	e853 3f00 	ldrex	r3, [r3]
 8004f8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	f023 0310 	bic.w	r3, r3, #16
 8004f96:	647b      	str	r3, [r7, #68]	; 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	330c      	adds	r3, #12
 8004f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fa0:	61ba      	str	r2, [r7, #24]
 8004fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa4:	6979      	ldr	r1, [r7, #20]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	e841 2300 	strex	r3, r2, [r1]
 8004fac:	613b      	str	r3, [r7, #16]
   return(result);
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d1e5      	bne.n	8004f80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2220      	movs	r2, #32
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004fc2:	bf00      	nop
 8004fc4:	3754      	adds	r7, #84	; 0x54
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff fd4b 	bl	8004a84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b21      	cmp	r3, #33	; 0x21
 8005008:	d13e      	bne.n	8005088 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005012:	d114      	bne.n	800503e <UART_Transmit_IT+0x48>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d110      	bne.n	800503e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	881b      	ldrh	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005030:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a1b      	ldr	r3, [r3, #32]
 8005036:	1c9a      	adds	r2, r3, #2
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	621a      	str	r2, [r3, #32]
 800503c:	e008      	b.n	8005050 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a1b      	ldr	r3, [r3, #32]
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	687a      	ldr	r2, [r7, #4]
 8005046:	6211      	str	r1, [r2, #32]
 8005048:	781a      	ldrb	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005054:	b29b      	uxth	r3, r3
 8005056:	3b01      	subs	r3, #1
 8005058:	b29b      	uxth	r3, r3
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4619      	mov	r1, r3
 800505e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005060:	2b00      	cmp	r3, #0
 8005062:	d10f      	bne.n	8005084 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005096:	b580      	push	{r7, lr}
 8005098:	b082      	sub	sp, #8
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68da      	ldr	r2, [r3, #12]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2220      	movs	r2, #32
 80050b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7fc fa8c 	bl	80015d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b08c      	sub	sp, #48	; 0x30
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b22      	cmp	r3, #34	; 0x22
 80050d8:	f040 80ab 	bne.w	8005232 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e4:	d117      	bne.n	8005116 <UART_Receive_IT+0x50>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d113      	bne.n	8005116 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ee:	2300      	movs	r3, #0
 80050f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	b29b      	uxth	r3, r3
 8005100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005104:	b29a      	uxth	r2, r3
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510e:	1c9a      	adds	r2, r3, #2
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28
 8005114:	e026      	b.n	8005164 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800511c:	2300      	movs	r3, #0
 800511e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d007      	beq.n	800513a <UART_Receive_IT+0x74>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d10a      	bne.n	8005148 <UART_Receive_IT+0x82>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d106      	bne.n	8005148 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	b2da      	uxtb	r2, r3
 8005142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005144:	701a      	strb	r2, [r3, #0]
 8005146:	e008      	b.n	800515a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005154:	b2da      	uxtb	r2, r3
 8005156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005158:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005168:	b29b      	uxth	r3, r3
 800516a:	3b01      	subs	r3, #1
 800516c:	b29b      	uxth	r3, r3
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	4619      	mov	r1, r3
 8005172:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005174:	2b00      	cmp	r3, #0
 8005176:	d15a      	bne.n	800522e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68da      	ldr	r2, [r3, #12]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0220 	bic.w	r2, r2, #32
 8005186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695a      	ldr	r2, [r3, #20]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0201 	bic.w	r2, r2, #1
 80051a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2220      	movs	r2, #32
 80051ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d135      	bne.n	8005224 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	613b      	str	r3, [r7, #16]
   return(result);
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f023 0310 	bic.w	r3, r3, #16
 80051d4:	627b      	str	r3, [r7, #36]	; 0x24
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	330c      	adds	r3, #12
 80051dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051de:	623a      	str	r2, [r7, #32]
 80051e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e2:	69f9      	ldr	r1, [r7, #28]
 80051e4:	6a3a      	ldr	r2, [r7, #32]
 80051e6:	e841 2300 	strex	r3, r2, [r1]
 80051ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1e5      	bne.n	80051be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0310 	and.w	r3, r3, #16
 80051fc:	2b10      	cmp	r3, #16
 80051fe:	d10a      	bne.n	8005216 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	60fb      	str	r3, [r7, #12]
 8005214:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fc3b 	bl	8004a98 <HAL_UARTEx_RxEventCallback>
 8005222:	e002      	b.n	800522a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f7fc f9e5 	bl	80015f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800522a:	2300      	movs	r3, #0
 800522c:	e002      	b.n	8005234 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e000      	b.n	8005234 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
  }
}
 8005234:	4618      	mov	r0, r3
 8005236:	3730      	adds	r7, #48	; 0x30
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800523c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005240:	b0c0      	sub	sp, #256	; 0x100
 8005242:	af00      	add	r7, sp, #0
 8005244:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005258:	68d9      	ldr	r1, [r3, #12]
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	ea40 0301 	orr.w	r3, r0, r1
 8005264:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	431a      	orrs	r2, r3
 8005274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	431a      	orrs	r2, r3
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68db      	ldr	r3, [r3, #12]
 8005290:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005294:	f021 010c 	bic.w	r1, r1, #12
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052a2:	430b      	orrs	r3, r1
 80052a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b6:	6999      	ldr	r1, [r3, #24]
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	ea40 0301 	orr.w	r3, r0, r1
 80052c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b8f      	ldr	r3, [pc, #572]	; (8005508 <UART_SetConfig+0x2cc>)
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d005      	beq.n	80052dc <UART_SetConfig+0xa0>
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	4b8d      	ldr	r3, [pc, #564]	; (800550c <UART_SetConfig+0x2d0>)
 80052d8:	429a      	cmp	r2, r3
 80052da:	d104      	bne.n	80052e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052dc:	f7fe f8ea 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 80052e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052e4:	e003      	b.n	80052ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052e6:	f7fe f8d1 	bl	800348c <HAL_RCC_GetPCLK1Freq>
 80052ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052f8:	f040 810c 	bne.w	8005514 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005300:	2200      	movs	r2, #0
 8005302:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005306:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800530a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800530e:	4622      	mov	r2, r4
 8005310:	462b      	mov	r3, r5
 8005312:	1891      	adds	r1, r2, r2
 8005314:	65b9      	str	r1, [r7, #88]	; 0x58
 8005316:	415b      	adcs	r3, r3
 8005318:	65fb      	str	r3, [r7, #92]	; 0x5c
 800531a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800531e:	4621      	mov	r1, r4
 8005320:	eb12 0801 	adds.w	r8, r2, r1
 8005324:	4629      	mov	r1, r5
 8005326:	eb43 0901 	adc.w	r9, r3, r1
 800532a:	f04f 0200 	mov.w	r2, #0
 800532e:	f04f 0300 	mov.w	r3, #0
 8005332:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005336:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800533a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800533e:	4690      	mov	r8, r2
 8005340:	4699      	mov	r9, r3
 8005342:	4623      	mov	r3, r4
 8005344:	eb18 0303 	adds.w	r3, r8, r3
 8005348:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800534c:	462b      	mov	r3, r5
 800534e:	eb49 0303 	adc.w	r3, r9, r3
 8005352:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005362:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005366:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800536a:	460b      	mov	r3, r1
 800536c:	18db      	adds	r3, r3, r3
 800536e:	653b      	str	r3, [r7, #80]	; 0x50
 8005370:	4613      	mov	r3, r2
 8005372:	eb42 0303 	adc.w	r3, r2, r3
 8005376:	657b      	str	r3, [r7, #84]	; 0x54
 8005378:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800537c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005380:	f7fa ff7e 	bl	8000280 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4b61      	ldr	r3, [pc, #388]	; (8005510 <UART_SetConfig+0x2d4>)
 800538a:	fba3 2302 	umull	r2, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	011c      	lsls	r4, r3, #4
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800539c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80053ac:	415b      	adcs	r3, r3
 80053ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053b4:	4641      	mov	r1, r8
 80053b6:	eb12 0a01 	adds.w	sl, r2, r1
 80053ba:	4649      	mov	r1, r9
 80053bc:	eb43 0b01 	adc.w	fp, r3, r1
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053d4:	4692      	mov	sl, r2
 80053d6:	469b      	mov	fp, r3
 80053d8:	4643      	mov	r3, r8
 80053da:	eb1a 0303 	adds.w	r3, sl, r3
 80053de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053e2:	464b      	mov	r3, r9
 80053e4:	eb4b 0303 	adc.w	r3, fp, r3
 80053e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005400:	460b      	mov	r3, r1
 8005402:	18db      	adds	r3, r3, r3
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
 8005406:	4613      	mov	r3, r2
 8005408:	eb42 0303 	adc.w	r3, r2, r3
 800540c:	647b      	str	r3, [r7, #68]	; 0x44
 800540e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005412:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005416:	f7fa ff33 	bl	8000280 <__aeabi_uldivmod>
 800541a:	4602      	mov	r2, r0
 800541c:	460b      	mov	r3, r1
 800541e:	4611      	mov	r1, r2
 8005420:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <UART_SetConfig+0x2d4>)
 8005422:	fba3 2301 	umull	r2, r3, r3, r1
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	2264      	movs	r2, #100	; 0x64
 800542a:	fb02 f303 	mul.w	r3, r2, r3
 800542e:	1acb      	subs	r3, r1, r3
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005436:	4b36      	ldr	r3, [pc, #216]	; (8005510 <UART_SetConfig+0x2d4>)
 8005438:	fba3 2302 	umull	r2, r3, r3, r2
 800543c:	095b      	lsrs	r3, r3, #5
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005444:	441c      	add	r4, r3
 8005446:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544a:	2200      	movs	r2, #0
 800544c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005450:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005454:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	1891      	adds	r1, r2, r2
 800545e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005460:	415b      	adcs	r3, r3
 8005462:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005464:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005468:	4641      	mov	r1, r8
 800546a:	1851      	adds	r1, r2, r1
 800546c:	6339      	str	r1, [r7, #48]	; 0x30
 800546e:	4649      	mov	r1, r9
 8005470:	414b      	adcs	r3, r1
 8005472:	637b      	str	r3, [r7, #52]	; 0x34
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005480:	4659      	mov	r1, fp
 8005482:	00cb      	lsls	r3, r1, #3
 8005484:	4651      	mov	r1, sl
 8005486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548a:	4651      	mov	r1, sl
 800548c:	00ca      	lsls	r2, r1, #3
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	4603      	mov	r3, r0
 8005494:	4642      	mov	r2, r8
 8005496:	189b      	adds	r3, r3, r2
 8005498:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800549c:	464b      	mov	r3, r9
 800549e:	460a      	mov	r2, r1
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054bc:	460b      	mov	r3, r1
 80054be:	18db      	adds	r3, r3, r3
 80054c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80054c2:	4613      	mov	r3, r2
 80054c4:	eb42 0303 	adc.w	r3, r2, r3
 80054c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054d2:	f7fa fed5 	bl	8000280 <__aeabi_uldivmod>
 80054d6:	4602      	mov	r2, r0
 80054d8:	460b      	mov	r3, r1
 80054da:	4b0d      	ldr	r3, [pc, #52]	; (8005510 <UART_SetConfig+0x2d4>)
 80054dc:	fba3 1302 	umull	r1, r3, r3, r2
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	2164      	movs	r1, #100	; 0x64
 80054e4:	fb01 f303 	mul.w	r3, r1, r3
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	00db      	lsls	r3, r3, #3
 80054ec:	3332      	adds	r3, #50	; 0x32
 80054ee:	4a08      	ldr	r2, [pc, #32]	; (8005510 <UART_SetConfig+0x2d4>)
 80054f0:	fba2 2303 	umull	r2, r3, r2, r3
 80054f4:	095b      	lsrs	r3, r3, #5
 80054f6:	f003 0207 	and.w	r2, r3, #7
 80054fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4422      	add	r2, r4
 8005502:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005504:	e105      	b.n	8005712 <UART_SetConfig+0x4d6>
 8005506:	bf00      	nop
 8005508:	40011000 	.word	0x40011000
 800550c:	40011400 	.word	0x40011400
 8005510:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005518:	2200      	movs	r2, #0
 800551a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800551e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005522:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005526:	4642      	mov	r2, r8
 8005528:	464b      	mov	r3, r9
 800552a:	1891      	adds	r1, r2, r2
 800552c:	6239      	str	r1, [r7, #32]
 800552e:	415b      	adcs	r3, r3
 8005530:	627b      	str	r3, [r7, #36]	; 0x24
 8005532:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005536:	4641      	mov	r1, r8
 8005538:	1854      	adds	r4, r2, r1
 800553a:	4649      	mov	r1, r9
 800553c:	eb43 0501 	adc.w	r5, r3, r1
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	00eb      	lsls	r3, r5, #3
 800554a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800554e:	00e2      	lsls	r2, r4, #3
 8005550:	4614      	mov	r4, r2
 8005552:	461d      	mov	r5, r3
 8005554:	4643      	mov	r3, r8
 8005556:	18e3      	adds	r3, r4, r3
 8005558:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800555c:	464b      	mov	r3, r9
 800555e:	eb45 0303 	adc.w	r3, r5, r3
 8005562:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005572:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005576:	f04f 0200 	mov.w	r2, #0
 800557a:	f04f 0300 	mov.w	r3, #0
 800557e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005582:	4629      	mov	r1, r5
 8005584:	008b      	lsls	r3, r1, #2
 8005586:	4621      	mov	r1, r4
 8005588:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800558c:	4621      	mov	r1, r4
 800558e:	008a      	lsls	r2, r1, #2
 8005590:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005594:	f7fa fe74 	bl	8000280 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4b60      	ldr	r3, [pc, #384]	; (8005720 <UART_SetConfig+0x4e4>)
 800559e:	fba3 2302 	umull	r2, r3, r3, r2
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	011c      	lsls	r4, r3, #4
 80055a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055b8:	4642      	mov	r2, r8
 80055ba:	464b      	mov	r3, r9
 80055bc:	1891      	adds	r1, r2, r2
 80055be:	61b9      	str	r1, [r7, #24]
 80055c0:	415b      	adcs	r3, r3
 80055c2:	61fb      	str	r3, [r7, #28]
 80055c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055c8:	4641      	mov	r1, r8
 80055ca:	1851      	adds	r1, r2, r1
 80055cc:	6139      	str	r1, [r7, #16]
 80055ce:	4649      	mov	r1, r9
 80055d0:	414b      	adcs	r3, r1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e0:	4659      	mov	r1, fp
 80055e2:	00cb      	lsls	r3, r1, #3
 80055e4:	4651      	mov	r1, sl
 80055e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ea:	4651      	mov	r1, sl
 80055ec:	00ca      	lsls	r2, r1, #3
 80055ee:	4610      	mov	r0, r2
 80055f0:	4619      	mov	r1, r3
 80055f2:	4603      	mov	r3, r0
 80055f4:	4642      	mov	r2, r8
 80055f6:	189b      	adds	r3, r3, r2
 80055f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055fc:	464b      	mov	r3, r9
 80055fe:	460a      	mov	r2, r1
 8005600:	eb42 0303 	adc.w	r3, r2, r3
 8005604:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	67bb      	str	r3, [r7, #120]	; 0x78
 8005612:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005614:	f04f 0200 	mov.w	r2, #0
 8005618:	f04f 0300 	mov.w	r3, #0
 800561c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005620:	4649      	mov	r1, r9
 8005622:	008b      	lsls	r3, r1, #2
 8005624:	4641      	mov	r1, r8
 8005626:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800562a:	4641      	mov	r1, r8
 800562c:	008a      	lsls	r2, r1, #2
 800562e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005632:	f7fa fe25 	bl	8000280 <__aeabi_uldivmod>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4b39      	ldr	r3, [pc, #228]	; (8005720 <UART_SetConfig+0x4e4>)
 800563c:	fba3 1302 	umull	r1, r3, r3, r2
 8005640:	095b      	lsrs	r3, r3, #5
 8005642:	2164      	movs	r1, #100	; 0x64
 8005644:	fb01 f303 	mul.w	r3, r1, r3
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	3332      	adds	r3, #50	; 0x32
 800564e:	4a34      	ldr	r2, [pc, #208]	; (8005720 <UART_SetConfig+0x4e4>)
 8005650:	fba2 2303 	umull	r2, r3, r2, r3
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565a:	441c      	add	r4, r3
 800565c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005660:	2200      	movs	r2, #0
 8005662:	673b      	str	r3, [r7, #112]	; 0x70
 8005664:	677a      	str	r2, [r7, #116]	; 0x74
 8005666:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800566a:	4642      	mov	r2, r8
 800566c:	464b      	mov	r3, r9
 800566e:	1891      	adds	r1, r2, r2
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	415b      	adcs	r3, r3
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800567a:	4641      	mov	r1, r8
 800567c:	1851      	adds	r1, r2, r1
 800567e:	6039      	str	r1, [r7, #0]
 8005680:	4649      	mov	r1, r9
 8005682:	414b      	adcs	r3, r1
 8005684:	607b      	str	r3, [r7, #4]
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	f04f 0300 	mov.w	r3, #0
 800568e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005692:	4659      	mov	r1, fp
 8005694:	00cb      	lsls	r3, r1, #3
 8005696:	4651      	mov	r1, sl
 8005698:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800569c:	4651      	mov	r1, sl
 800569e:	00ca      	lsls	r2, r1, #3
 80056a0:	4610      	mov	r0, r2
 80056a2:	4619      	mov	r1, r3
 80056a4:	4603      	mov	r3, r0
 80056a6:	4642      	mov	r2, r8
 80056a8:	189b      	adds	r3, r3, r2
 80056aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80056ac:	464b      	mov	r3, r9
 80056ae:	460a      	mov	r2, r1
 80056b0:	eb42 0303 	adc.w	r3, r2, r3
 80056b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	663b      	str	r3, [r7, #96]	; 0x60
 80056c0:	667a      	str	r2, [r7, #100]	; 0x64
 80056c2:	f04f 0200 	mov.w	r2, #0
 80056c6:	f04f 0300 	mov.w	r3, #0
 80056ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056ce:	4649      	mov	r1, r9
 80056d0:	008b      	lsls	r3, r1, #2
 80056d2:	4641      	mov	r1, r8
 80056d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056d8:	4641      	mov	r1, r8
 80056da:	008a      	lsls	r2, r1, #2
 80056dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056e0:	f7fa fdce 	bl	8000280 <__aeabi_uldivmod>
 80056e4:	4602      	mov	r2, r0
 80056e6:	460b      	mov	r3, r1
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <UART_SetConfig+0x4e4>)
 80056ea:	fba3 1302 	umull	r1, r3, r3, r2
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	2164      	movs	r1, #100	; 0x64
 80056f2:	fb01 f303 	mul.w	r3, r1, r3
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	3332      	adds	r3, #50	; 0x32
 80056fc:	4a08      	ldr	r2, [pc, #32]	; (8005720 <UART_SetConfig+0x4e4>)
 80056fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005702:	095b      	lsrs	r3, r3, #5
 8005704:	f003 020f 	and.w	r2, r3, #15
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4422      	add	r2, r4
 8005710:	609a      	str	r2, [r3, #8]
}
 8005712:	bf00      	nop
 8005714:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005718:	46bd      	mov	sp, r7
 800571a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800571e:	bf00      	nop
 8005720:	51eb851f 	.word	0x51eb851f

08005724 <__NVIC_SetPriority>:
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	6039      	str	r1, [r7, #0]
 800572e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005734:	2b00      	cmp	r3, #0
 8005736:	db0a      	blt.n	800574e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	b2da      	uxtb	r2, r3
 800573c:	490c      	ldr	r1, [pc, #48]	; (8005770 <__NVIC_SetPriority+0x4c>)
 800573e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005742:	0112      	lsls	r2, r2, #4
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	440b      	add	r3, r1
 8005748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800574c:	e00a      	b.n	8005764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	b2da      	uxtb	r2, r3
 8005752:	4908      	ldr	r1, [pc, #32]	; (8005774 <__NVIC_SetPriority+0x50>)
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	f003 030f 	and.w	r3, r3, #15
 800575a:	3b04      	subs	r3, #4
 800575c:	0112      	lsls	r2, r2, #4
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	440b      	add	r3, r1
 8005762:	761a      	strb	r2, [r3, #24]
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr
 8005770:	e000e100 	.word	0xe000e100
 8005774:	e000ed00 	.word	0xe000ed00

08005778 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005778:	b580      	push	{r7, lr}
 800577a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800577c:	2100      	movs	r1, #0
 800577e:	f06f 0004 	mvn.w	r0, #4
 8005782:	f7ff ffcf 	bl	8005724 <__NVIC_SetPriority>
#endif
}
 8005786:	bf00      	nop
 8005788:	bd80      	pop	{r7, pc}
	...

0800578c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005792:	f3ef 8305 	mrs	r3, IPSR
 8005796:	603b      	str	r3, [r7, #0]
  return(result);
 8005798:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800579e:	f06f 0305 	mvn.w	r3, #5
 80057a2:	607b      	str	r3, [r7, #4]
 80057a4:	e00c      	b.n	80057c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80057a6:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <osKernelInitialize+0x44>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d105      	bne.n	80057ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <osKernelInitialize+0x44>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80057b4:	2300      	movs	r3, #0
 80057b6:	607b      	str	r3, [r7, #4]
 80057b8:	e002      	b.n	80057c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80057ba:	f04f 33ff 	mov.w	r3, #4294967295
 80057be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80057c0:	687b      	ldr	r3, [r7, #4]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000458 	.word	0x20000458

080057d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057da:	f3ef 8305 	mrs	r3, IPSR
 80057de:	603b      	str	r3, [r7, #0]
  return(result);
 80057e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80057e6:	f06f 0305 	mvn.w	r3, #5
 80057ea:	607b      	str	r3, [r7, #4]
 80057ec:	e010      	b.n	8005810 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80057ee:	4b0b      	ldr	r3, [pc, #44]	; (800581c <osKernelStart+0x48>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b01      	cmp	r3, #1
 80057f4:	d109      	bne.n	800580a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80057f6:	f7ff ffbf 	bl	8005778 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80057fa:	4b08      	ldr	r3, [pc, #32]	; (800581c <osKernelStart+0x48>)
 80057fc:	2202      	movs	r2, #2
 80057fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005800:	f001 fac2 	bl	8006d88 <vTaskStartScheduler>
      stat = osOK;
 8005804:	2300      	movs	r3, #0
 8005806:	607b      	str	r3, [r7, #4]
 8005808:	e002      	b.n	8005810 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800580a:	f04f 33ff 	mov.w	r3, #4294967295
 800580e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005810:	687b      	ldr	r3, [r7, #4]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3708      	adds	r7, #8
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000458 	.word	0x20000458

08005820 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005828:	f3ef 8305 	mrs	r3, IPSR
 800582c:	60bb      	str	r3, [r7, #8]
  return(result);
 800582e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005830:	2b00      	cmp	r3, #0
 8005832:	d003      	beq.n	800583c <osDelay+0x1c>
    stat = osErrorISR;
 8005834:	f06f 0305 	mvn.w	r3, #5
 8005838:	60fb      	str	r3, [r7, #12]
 800583a:	e007      	b.n	800584c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800583c:	2300      	movs	r3, #0
 800583e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d002      	beq.n	800584c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 fa6a 	bl	8006d20 <vTaskDelay>
    }
  }

  return (stat);
 800584c:	68fb      	ldr	r3, [r7, #12]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}

08005856 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005856:	b580      	push	{r7, lr}
 8005858:	b088      	sub	sp, #32
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005862:	f3ef 8305 	mrs	r3, IPSR
 8005866:	60bb      	str	r3, [r7, #8]
  return(result);
 8005868:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800586a:	2b00      	cmp	r3, #0
 800586c:	d174      	bne.n	8005958 <osMutexNew+0x102>
    if (attr != NULL) {
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <osMutexNew+0x26>
      type = attr->attr_bits;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	e001      	b.n	8005880 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	f003 0301 	and.w	r3, r3, #1
 8005886:	2b00      	cmp	r3, #0
 8005888:	d002      	beq.n	8005890 <osMutexNew+0x3a>
      rmtx = 1U;
 800588a:	2301      	movs	r3, #1
 800588c:	617b      	str	r3, [r7, #20]
 800588e:	e001      	b.n	8005894 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	f003 0308 	and.w	r3, r3, #8
 800589a:	2b00      	cmp	r3, #0
 800589c:	d15c      	bne.n	8005958 <osMutexNew+0x102>
      mem = -1;
 800589e:	f04f 33ff 	mov.w	r3, #4294967295
 80058a2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d015      	beq.n	80058d6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d006      	beq.n	80058c0 <osMutexNew+0x6a>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	2b4f      	cmp	r3, #79	; 0x4f
 80058b8:	d902      	bls.n	80058c0 <osMutexNew+0x6a>
          mem = 1;
 80058ba:	2301      	movs	r3, #1
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	e00c      	b.n	80058da <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d108      	bne.n	80058da <osMutexNew+0x84>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d104      	bne.n	80058da <osMutexNew+0x84>
            mem = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	e001      	b.n	80058da <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d112      	bne.n	8005906 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d007      	beq.n	80058f6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	4619      	mov	r1, r3
 80058ec:	2004      	movs	r0, #4
 80058ee:	f000 fb5c 	bl	8005faa <xQueueCreateMutexStatic>
 80058f2:	61f8      	str	r0, [r7, #28]
 80058f4:	e016      	b.n	8005924 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	4619      	mov	r1, r3
 80058fc:	2001      	movs	r0, #1
 80058fe:	f000 fb54 	bl	8005faa <xQueueCreateMutexStatic>
 8005902:	61f8      	str	r0, [r7, #28]
 8005904:	e00e      	b.n	8005924 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d10b      	bne.n	8005924 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d004      	beq.n	800591c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005912:	2004      	movs	r0, #4
 8005914:	f000 fb31 	bl	8005f7a <xQueueCreateMutex>
 8005918:	61f8      	str	r0, [r7, #28]
 800591a:	e003      	b.n	8005924 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800591c:	2001      	movs	r0, #1
 800591e:	f000 fb2c 	bl	8005f7a <xQueueCreateMutex>
 8005922:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00c      	beq.n	8005944 <osMutexNew+0xee>
        if (attr != NULL) {
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d003      	beq.n	8005938 <osMutexNew+0xe2>
          name = attr->name;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e001      	b.n	800593c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005938:	2300      	movs	r3, #0
 800593a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800593c:	68f9      	ldr	r1, [r7, #12]
 800593e:	69f8      	ldr	r0, [r7, #28]
 8005940:	f000 fff2 	bl	8006928 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d006      	beq.n	8005958 <osMutexNew+0x102>
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d003      	beq.n	8005958 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f043 0301 	orr.w	r3, r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005958:	69fb      	ldr	r3, [r7, #28]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005962:	b580      	push	{r7, lr}
 8005964:	b08a      	sub	sp, #40	; 0x28
 8005966:	af02      	add	r7, sp, #8
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005972:	f3ef 8305 	mrs	r3, IPSR
 8005976:	613b      	str	r3, [r7, #16]
  return(result);
 8005978:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800597a:	2b00      	cmp	r3, #0
 800597c:	d175      	bne.n	8005a6a <osSemaphoreNew+0x108>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d072      	beq.n	8005a6a <osSemaphoreNew+0x108>
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	429a      	cmp	r2, r3
 800598a:	d86e      	bhi.n	8005a6a <osSemaphoreNew+0x108>
    mem = -1;
 800598c:	f04f 33ff 	mov.w	r3, #4294967295
 8005990:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d015      	beq.n	80059c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d006      	beq.n	80059ae <osSemaphoreNew+0x4c>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	2b4f      	cmp	r3, #79	; 0x4f
 80059a6:	d902      	bls.n	80059ae <osSemaphoreNew+0x4c>
        mem = 1;
 80059a8:	2301      	movs	r3, #1
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e00c      	b.n	80059c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d108      	bne.n	80059c8 <osSemaphoreNew+0x66>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68db      	ldr	r3, [r3, #12]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <osSemaphoreNew+0x66>
          mem = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e001      	b.n	80059c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ce:	d04c      	beq.n	8005a6a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d128      	bne.n	8005a28 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d10a      	bne.n	80059f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	2203      	movs	r2, #3
 80059e2:	9200      	str	r2, [sp, #0]
 80059e4:	2200      	movs	r2, #0
 80059e6:	2100      	movs	r1, #0
 80059e8:	2001      	movs	r0, #1
 80059ea:	f000 f9d7 	bl	8005d9c <xQueueGenericCreateStatic>
 80059ee:	61f8      	str	r0, [r7, #28]
 80059f0:	e005      	b.n	80059fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80059f2:	2203      	movs	r2, #3
 80059f4:	2100      	movs	r1, #0
 80059f6:	2001      	movs	r0, #1
 80059f8:	f000 fa48 	bl	8005e8c <xQueueGenericCreate>
 80059fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d022      	beq.n	8005a4a <osSemaphoreNew+0xe8>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d01f      	beq.n	8005a4a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2100      	movs	r1, #0
 8005a10:	69f8      	ldr	r0, [r7, #28]
 8005a12:	f000 fb4f 	bl	80060b4 <xQueueGenericSend>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d016      	beq.n	8005a4a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005a1c:	69f8      	ldr	r0, [r7, #28]
 8005a1e:	f000 fe4f 	bl	80066c0 <vQueueDelete>
            hSemaphore = NULL;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	e010      	b.n	8005a4a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d108      	bne.n	8005a40 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	461a      	mov	r2, r3
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	68f8      	ldr	r0, [r7, #12]
 8005a38:	f000 fad2 	bl	8005fe0 <xQueueCreateCountingSemaphoreStatic>
 8005a3c:	61f8      	str	r0, [r7, #28]
 8005a3e:	e004      	b.n	8005a4a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f000 fb03 	bl	800604e <xQueueCreateCountingSemaphore>
 8005a48:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00c      	beq.n	8005a6a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <osSemaphoreNew+0xfc>
          name = attr->name;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	e001      	b.n	8005a62 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005a62:	6979      	ldr	r1, [r7, #20]
 8005a64:	69f8      	ldr	r0, [r7, #28]
 8005a66:	f000 ff5f 	bl	8006928 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005a6a:	69fb      	ldr	r3, [r7, #28]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3720      	adds	r7, #32
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a80:	2300      	movs	r3, #0
 8005a82:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d103      	bne.n	8005a92 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a8a:	f06f 0303 	mvn.w	r3, #3
 8005a8e:	617b      	str	r3, [r7, #20]
 8005a90:	e02c      	b.n	8005aec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a92:	f3ef 8305 	mrs	r3, IPSR
 8005a96:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6938      	ldr	r0, [r7, #16]
 8005aaa:	f000 fc9c 	bl	80063e6 <xQueueGiveFromISR>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d003      	beq.n	8005abc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005ab4:	f06f 0302 	mvn.w	r3, #2
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	e017      	b.n	8005aec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d014      	beq.n	8005aec <osSemaphoreRelease+0x78>
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <osSemaphoreRelease+0x84>)
 8005ac4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ac8:	601a      	str	r2, [r3, #0]
 8005aca:	f3bf 8f4f 	dsb	sy
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	e00b      	b.n	8005aec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	6938      	ldr	r0, [r7, #16]
 8005adc:	f000 faea 	bl	80060b4 <xQueueGenericSend>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d002      	beq.n	8005aec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005ae6:	f06f 0302 	mvn.w	r3, #2
 8005aea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005aec:	697b      	ldr	r3, [r7, #20]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	e000ed04 	.word	0xe000ed04

08005afc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	60f8      	str	r0, [r7, #12]
 8005b04:	60b9      	str	r1, [r7, #8]
 8005b06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	4a07      	ldr	r2, [pc, #28]	; (8005b28 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	4a06      	ldr	r2, [pc, #24]	; (8005b2c <vApplicationGetIdleTaskMemory+0x30>)
 8005b12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2280      	movs	r2, #128	; 0x80
 8005b18:	601a      	str	r2, [r3, #0]
}
 8005b1a:	bf00      	nop
 8005b1c:	3714      	adds	r7, #20
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr
 8005b26:	bf00      	nop
 8005b28:	2000045c 	.word	0x2000045c
 8005b2c:	20000518 	.word	0x20000518

08005b30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b30:	b480      	push	{r7}
 8005b32:	b085      	sub	sp, #20
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	60f8      	str	r0, [r7, #12]
 8005b38:	60b9      	str	r1, [r7, #8]
 8005b3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4a07      	ldr	r2, [pc, #28]	; (8005b5c <vApplicationGetTimerTaskMemory+0x2c>)
 8005b40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	4a06      	ldr	r2, [pc, #24]	; (8005b60 <vApplicationGetTimerTaskMemory+0x30>)
 8005b46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b4e:	601a      	str	r2, [r3, #0]
}
 8005b50:	bf00      	nop
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	20000718 	.word	0x20000718
 8005b60:	200007d4 	.word	0x200007d4

08005b64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f103 0208 	add.w	r2, r3, #8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f103 0208 	add.w	r2, r3, #8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f103 0208 	add.w	r2, r3, #8
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2200      	movs	r2, #0
 8005b96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b98:	bf00      	nop
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b083      	sub	sp, #12
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bb2:	bf00      	nop
 8005bb4:	370c      	adds	r7, #12
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr

08005bbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b085      	sub	sp, #20
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
 8005bc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	689a      	ldr	r2, [r3, #8]
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	601a      	str	r2, [r3, #0]
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c1c:	d103      	bne.n	8005c26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	e00c      	b.n	8005c40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	3308      	adds	r3, #8
 8005c2a:	60fb      	str	r3, [r7, #12]
 8005c2c:	e002      	b.n	8005c34 <vListInsert+0x2e>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68ba      	ldr	r2, [r7, #8]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d2f6      	bcs.n	8005c2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	685a      	ldr	r2, [r3, #4]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	683a      	ldr	r2, [r7, #0]
 8005c4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	601a      	str	r2, [r3, #0]
}
 8005c6c:	bf00      	nop
 8005c6e:	3714      	adds	r7, #20
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	691b      	ldr	r3, [r3, #16]
 8005c84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	6892      	ldr	r2, [r2, #8]
 8005c8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6852      	ldr	r2, [r2, #4]
 8005c98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	685b      	ldr	r3, [r3, #4]
 8005c9e:	687a      	ldr	r2, [r7, #4]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d103      	bne.n	8005cac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	1e5a      	subs	r2, r3, #1
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr

08005ccc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b084      	sub	sp, #16
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005cf6:	f002 f9fd 	bl	80080f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d06:	fb01 f303 	mul.w	r3, r1, r3
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2200      	movs	r2, #0
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d26:	3b01      	subs	r3, #1
 8005d28:	68f9      	ldr	r1, [r7, #12]
 8005d2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	441a      	add	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	22ff      	movs	r2, #255	; 0xff
 8005d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d114      	bne.n	8005d76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01a      	beq.n	8005d8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3310      	adds	r3, #16
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 faaf 	bl	80072bc <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d012      	beq.n	8005d8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d64:	4b0c      	ldr	r3, [pc, #48]	; (8005d98 <xQueueGenericReset+0xcc>)
 8005d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	f3bf 8f6f 	isb	sy
 8005d74:	e009      	b.n	8005d8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3310      	adds	r3, #16
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff fef2 	bl	8005b64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	3324      	adds	r3, #36	; 0x24
 8005d84:	4618      	mov	r0, r3
 8005d86:	f7ff feed 	bl	8005b64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d8a:	f002 f9e3 	bl	8008154 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d8e:	2301      	movs	r3, #1
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3710      	adds	r7, #16
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	607a      	str	r2, [r7, #4]
 8005da8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db4:	f383 8811 	msr	BASEPRI, r3
 8005db8:	f3bf 8f6f 	isb	sy
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005dc2:	bf00      	nop
 8005dc4:	e7fe      	b.n	8005dc4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <xQueueGenericCreateStatic+0x52>
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d001      	beq.n	8005df2 <xQueueGenericCreateStatic+0x56>
 8005dee:	2301      	movs	r3, #1
 8005df0:	e000      	b.n	8005df4 <xQueueGenericCreateStatic+0x58>
 8005df2:	2300      	movs	r3, #0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d10a      	bne.n	8005e0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfc:	f383 8811 	msr	BASEPRI, r3
 8005e00:	f3bf 8f6f 	isb	sy
 8005e04:	f3bf 8f4f 	dsb	sy
 8005e08:	623b      	str	r3, [r7, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	e7fe      	b.n	8005e0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <xQueueGenericCreateStatic+0x7e>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <xQueueGenericCreateStatic+0x82>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e000      	b.n	8005e20 <xQueueGenericCreateStatic+0x84>
 8005e1e:	2300      	movs	r3, #0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	61fb      	str	r3, [r7, #28]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e3a:	2350      	movs	r3, #80	; 0x50
 8005e3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	2b50      	cmp	r3, #80	; 0x50
 8005e42:	d00a      	beq.n	8005e5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e48:	f383 8811 	msr	BASEPRI, r3
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	f3bf 8f4f 	dsb	sy
 8005e54:	61bb      	str	r3, [r7, #24]
}
 8005e56:	bf00      	nop
 8005e58:	e7fe      	b.n	8005e58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00d      	beq.n	8005e82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e68:	2201      	movs	r2, #1
 8005e6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e74:	9300      	str	r3, [sp, #0]
 8005e76:	4613      	mov	r3, r2
 8005e78:	687a      	ldr	r2, [r7, #4]
 8005e7a:	68b9      	ldr	r1, [r7, #8]
 8005e7c:	68f8      	ldr	r0, [r7, #12]
 8005e7e:	f000 f83f 	bl	8005f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3730      	adds	r7, #48	; 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	4613      	mov	r3, r2
 8005e98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d10a      	bne.n	8005eb6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea4:	f383 8811 	msr	BASEPRI, r3
 8005ea8:	f3bf 8f6f 	isb	sy
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	613b      	str	r3, [r7, #16]
}
 8005eb2:	bf00      	nop
 8005eb4:	e7fe      	b.n	8005eb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005ec0:	69fb      	ldr	r3, [r7, #28]
 8005ec2:	3350      	adds	r3, #80	; 0x50
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f002 fa37 	bl	8008338 <pvPortMalloc>
 8005eca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d011      	beq.n	8005ef6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	3350      	adds	r3, #80	; 0x50
 8005eda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005edc:	69bb      	ldr	r3, [r7, #24]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ee4:	79fa      	ldrb	r2, [r7, #7]
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	9300      	str	r3, [sp, #0]
 8005eea:	4613      	mov	r3, r2
 8005eec:	697a      	ldr	r2, [r7, #20]
 8005eee:	68b9      	ldr	r1, [r7, #8]
 8005ef0:	68f8      	ldr	r0, [r7, #12]
 8005ef2:	f000 f805 	bl	8005f00 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ef6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3720      	adds	r7, #32
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
 8005f0c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d103      	bne.n	8005f1c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	e002      	b.n	8005f22 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	68ba      	ldr	r2, [r7, #8]
 8005f2c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f2e:	2101      	movs	r1, #1
 8005f30:	69b8      	ldr	r0, [r7, #24]
 8005f32:	f7ff fecb 	bl	8005ccc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	78fa      	ldrb	r2, [r7, #3]
 8005f3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f3e:	bf00      	nop
 8005f40:	3710      	adds	r7, #16
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005f46:	b580      	push	{r7, lr}
 8005f48:	b082      	sub	sp, #8
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d00e      	beq.n	8005f72 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005f66:	2300      	movs	r3, #0
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2100      	movs	r1, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f8a1 	bl	80060b4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005f72:	bf00      	nop
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b086      	sub	sp, #24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	4603      	mov	r3, r0
 8005f82:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005f84:	2301      	movs	r3, #1
 8005f86:	617b      	str	r3, [r7, #20]
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005f8c:	79fb      	ldrb	r3, [r7, #7]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6939      	ldr	r1, [r7, #16]
 8005f92:	6978      	ldr	r0, [r7, #20]
 8005f94:	f7ff ff7a 	bl	8005e8c <xQueueGenericCreate>
 8005f98:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f7ff ffd3 	bl	8005f46 <prvInitialiseMutex>

		return xNewQueue;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
	}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3718      	adds	r7, #24
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b088      	sub	sp, #32
 8005fae:	af02      	add	r7, sp, #8
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	6039      	str	r1, [r7, #0]
 8005fb4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	2300      	movs	r3, #0
 8005fbc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	6939      	ldr	r1, [r7, #16]
 8005fc8:	6978      	ldr	r0, [r7, #20]
 8005fca:	f7ff fee7 	bl	8005d9c <xQueueGenericCreateStatic>
 8005fce:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f7ff ffb8 	bl	8005f46 <prvInitialiseMutex>

		return xNewQueue;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
	}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3718      	adds	r7, #24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	60b9      	str	r1, [r7, #8]
 8005fea:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff6:	f383 8811 	msr	BASEPRI, r3
 8005ffa:	f3bf 8f6f 	isb	sy
 8005ffe:	f3bf 8f4f 	dsb	sy
 8006002:	61bb      	str	r3, [r7, #24]
}
 8006004:	bf00      	nop
 8006006:	e7fe      	b.n	8006006 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	429a      	cmp	r2, r3
 800600e:	d90a      	bls.n	8006026 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	617b      	str	r3, [r7, #20]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006026:	2302      	movs	r3, #2
 8006028:	9300      	str	r3, [sp, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	2100      	movs	r1, #0
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f7ff feb3 	bl	8005d9c <xQueueGenericCreateStatic>
 8006036:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d002      	beq.n	8006044 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006044:	69fb      	ldr	r3, [r7, #28]
	}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800604e:	b580      	push	{r7, lr}
 8006050:	b086      	sub	sp, #24
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
 8006056:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d10a      	bne.n	8006074 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800605e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	613b      	str	r3, [r7, #16]
}
 8006070:	bf00      	nop
 8006072:	e7fe      	b.n	8006072 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006074:	683a      	ldr	r2, [r7, #0]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	429a      	cmp	r2, r3
 800607a:	d90a      	bls.n	8006092 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800607c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006080:	f383 8811 	msr	BASEPRI, r3
 8006084:	f3bf 8f6f 	isb	sy
 8006088:	f3bf 8f4f 	dsb	sy
 800608c:	60fb      	str	r3, [r7, #12]
}
 800608e:	bf00      	nop
 8006090:	e7fe      	b.n	8006090 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006092:	2202      	movs	r2, #2
 8006094:	2100      	movs	r1, #0
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f7ff fef8 	bl	8005e8c <xQueueGenericCreate>
 800609c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d002      	beq.n	80060aa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80060aa:	697b      	ldr	r3, [r7, #20]
	}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08e      	sub	sp, #56	; 0x38
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060c2:	2300      	movs	r3, #0
 80060c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10a      	bne.n	80060e6 <xQueueGenericSend+0x32>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060e2:	bf00      	nop
 80060e4:	e7fe      	b.n	80060e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <xQueueGenericSend+0x40>
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <xQueueGenericSend+0x44>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <xQueueGenericSend+0x46>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <xQueueGenericSend+0x60>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d103      	bne.n	8006122 <xQueueGenericSend+0x6e>
 800611a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <xQueueGenericSend+0x72>
 8006122:	2301      	movs	r3, #1
 8006124:	e000      	b.n	8006128 <xQueueGenericSend+0x74>
 8006126:	2300      	movs	r3, #0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <xQueueGenericSend+0x8e>
	__asm volatile
 800612c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006130:	f383 8811 	msr	BASEPRI, r3
 8006134:	f3bf 8f6f 	isb	sy
 8006138:	f3bf 8f4f 	dsb	sy
 800613c:	623b      	str	r3, [r7, #32]
}
 800613e:	bf00      	nop
 8006140:	e7fe      	b.n	8006140 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006142:	f001 fa7d 	bl	8007640 <xTaskGetSchedulerState>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d102      	bne.n	8006152 <xQueueGenericSend+0x9e>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <xQueueGenericSend+0xa2>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <xQueueGenericSend+0xa4>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10a      	bne.n	8006172 <xQueueGenericSend+0xbe>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	f383 8811 	msr	BASEPRI, r3
 8006164:	f3bf 8f6f 	isb	sy
 8006168:	f3bf 8f4f 	dsb	sy
 800616c:	61fb      	str	r3, [r7, #28]
}
 800616e:	bf00      	nop
 8006170:	e7fe      	b.n	8006170 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006172:	f001 ffbf 	bl	80080f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006178:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <xQueueGenericSend+0xd4>
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b02      	cmp	r3, #2
 8006186:	d129      	bne.n	80061dc <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800618e:	f000 faba 	bl	8006706 <prvCopyDataToQueue>
 8006192:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d010      	beq.n	80061be <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800619c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619e:	3324      	adds	r3, #36	; 0x24
 80061a0:	4618      	mov	r0, r3
 80061a2:	f001 f88b 	bl	80072bc <xTaskRemoveFromEventList>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d013      	beq.n	80061d4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061ac:	4b3f      	ldr	r3, [pc, #252]	; (80062ac <xQueueGenericSend+0x1f8>)
 80061ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	e00a      	b.n	80061d4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d007      	beq.n	80061d4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061c4:	4b39      	ldr	r3, [pc, #228]	; (80062ac <xQueueGenericSend+0x1f8>)
 80061c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ca:	601a      	str	r2, [r3, #0]
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061d4:	f001 ffbe 	bl	8008154 <vPortExitCritical>
				return pdPASS;
 80061d8:	2301      	movs	r3, #1
 80061da:	e063      	b.n	80062a4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d103      	bne.n	80061ea <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061e2:	f001 ffb7 	bl	8008154 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e05c      	b.n	80062a4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d106      	bne.n	80061fe <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061f0:	f107 0314 	add.w	r3, r7, #20
 80061f4:	4618      	mov	r0, r3
 80061f6:	f001 f8c5 	bl	8007384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061fa:	2301      	movs	r3, #1
 80061fc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061fe:	f001 ffa9 	bl	8008154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006202:	f000 fe31 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006206:	f001 ff75 	bl	80080f4 <vPortEnterCritical>
 800620a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006210:	b25b      	sxtb	r3, r3
 8006212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006216:	d103      	bne.n	8006220 <xQueueGenericSend+0x16c>
 8006218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006226:	b25b      	sxtb	r3, r3
 8006228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800622c:	d103      	bne.n	8006236 <xQueueGenericSend+0x182>
 800622e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006236:	f001 ff8d 	bl	8008154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800623a:	1d3a      	adds	r2, r7, #4
 800623c:	f107 0314 	add.w	r3, r7, #20
 8006240:	4611      	mov	r1, r2
 8006242:	4618      	mov	r0, r3
 8006244:	f001 f8b4 	bl	80073b0 <xTaskCheckForTimeOut>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d124      	bne.n	8006298 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800624e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006250:	f000 fb51 	bl	80068f6 <prvIsQueueFull>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d018      	beq.n	800628c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800625c:	3310      	adds	r3, #16
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	4611      	mov	r1, r2
 8006262:	4618      	mov	r0, r3
 8006264:	f000 ffda 	bl	800721c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800626a:	f000 fadc 	bl	8006826 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800626e:	f000 fe09 	bl	8006e84 <xTaskResumeAll>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	f47f af7c 	bne.w	8006172 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800627a:	4b0c      	ldr	r3, [pc, #48]	; (80062ac <xQueueGenericSend+0x1f8>)
 800627c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006280:	601a      	str	r2, [r3, #0]
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	e772      	b.n	8006172 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800628c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800628e:	f000 faca 	bl	8006826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006292:	f000 fdf7 	bl	8006e84 <xTaskResumeAll>
 8006296:	e76c      	b.n	8006172 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006298:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800629a:	f000 fac4 	bl	8006826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800629e:	f000 fdf1 	bl	8006e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3738      	adds	r7, #56	; 0x38
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b090      	sub	sp, #64	; 0x40
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	60f8      	str	r0, [r7, #12]
 80062b8:	60b9      	str	r1, [r7, #8]
 80062ba:	607a      	str	r2, [r7, #4]
 80062bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10a      	bne.n	80062de <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062cc:	f383 8811 	msr	BASEPRI, r3
 80062d0:	f3bf 8f6f 	isb	sy
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062da:	bf00      	nop
 80062dc:	e7fe      	b.n	80062dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <xQueueGenericSendFromISR+0x3c>
 80062e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d101      	bne.n	80062f0 <xQueueGenericSendFromISR+0x40>
 80062ec:	2301      	movs	r3, #1
 80062ee:	e000      	b.n	80062f2 <xQueueGenericSendFromISR+0x42>
 80062f0:	2300      	movs	r3, #0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80062f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062fa:	f383 8811 	msr	BASEPRI, r3
 80062fe:	f3bf 8f6f 	isb	sy
 8006302:	f3bf 8f4f 	dsb	sy
 8006306:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006308:	bf00      	nop
 800630a:	e7fe      	b.n	800630a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	2b02      	cmp	r3, #2
 8006310:	d103      	bne.n	800631a <xQueueGenericSendFromISR+0x6a>
 8006312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	2b01      	cmp	r3, #1
 8006318:	d101      	bne.n	800631e <xQueueGenericSendFromISR+0x6e>
 800631a:	2301      	movs	r3, #1
 800631c:	e000      	b.n	8006320 <xQueueGenericSendFromISR+0x70>
 800631e:	2300      	movs	r3, #0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	623b      	str	r3, [r7, #32]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800633a:	f001 ffbd 	bl	80082b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800633e:	f3ef 8211 	mrs	r2, BASEPRI
 8006342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	61fa      	str	r2, [r7, #28]
 8006354:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006356:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006358:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800635a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800635e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <xQueueGenericSendFromISR+0xbc>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b02      	cmp	r3, #2
 800636a:	d12f      	bne.n	80063cc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800636c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006372:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800637c:	683a      	ldr	r2, [r7, #0]
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006382:	f000 f9c0 	bl	8006706 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006386:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d112      	bne.n	80063b6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	2b00      	cmp	r3, #0
 8006396:	d016      	beq.n	80063c6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800639a:	3324      	adds	r3, #36	; 0x24
 800639c:	4618      	mov	r0, r3
 800639e:	f000 ff8d 	bl	80072bc <xTaskRemoveFromEventList>
 80063a2:	4603      	mov	r3, r0
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00e      	beq.n	80063c6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00b      	beq.n	80063c6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	e007      	b.n	80063c6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063ba:	3301      	adds	r3, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	b25a      	sxtb	r2, r3
 80063c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063c6:	2301      	movs	r3, #1
 80063c8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063ca:	e001      	b.n	80063d0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063cc:	2300      	movs	r3, #0
 80063ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3740      	adds	r7, #64	; 0x40
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b08e      	sub	sp, #56	; 0x38
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d10a      	bne.n	8006410 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80063fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fe:	f383 8811 	msr	BASEPRI, r3
 8006402:	f3bf 8f6f 	isb	sy
 8006406:	f3bf 8f4f 	dsb	sy
 800640a:	623b      	str	r3, [r7, #32]
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	61fb      	str	r3, [r7, #28]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800642e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <xQueueGiveFromISR+0x58>
 8006436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d101      	bne.n	8006442 <xQueueGiveFromISR+0x5c>
 800643e:	2301      	movs	r3, #1
 8006440:	e000      	b.n	8006444 <xQueueGiveFromISR+0x5e>
 8006442:	2300      	movs	r3, #0
 8006444:	2b00      	cmp	r3, #0
 8006446:	d10a      	bne.n	800645e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
 8006454:	f3bf 8f4f 	dsb	sy
 8006458:	61bb      	str	r3, [r7, #24]
}
 800645a:	bf00      	nop
 800645c:	e7fe      	b.n	800645c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800645e:	f001 ff2b 	bl	80082b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006462:	f3ef 8211 	mrs	r2, BASEPRI
 8006466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800646a:	f383 8811 	msr	BASEPRI, r3
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f3bf 8f4f 	dsb	sy
 8006476:	617a      	str	r2, [r7, #20]
 8006478:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800647a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800647c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006482:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006486:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006488:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800648a:	429a      	cmp	r2, r3
 800648c:	d22b      	bcs.n	80064e6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800648e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006490:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649a:	1c5a      	adds	r2, r3, #1
 800649c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80064a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d112      	bne.n	80064d0 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d016      	beq.n	80064e0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	3324      	adds	r3, #36	; 0x24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 ff00 	bl	80072bc <xTaskRemoveFromEventList>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00e      	beq.n	80064e0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d00b      	beq.n	80064e0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	e007      	b.n	80064e0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80064d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064d4:	3301      	adds	r3, #1
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	b25a      	sxtb	r2, r3
 80064da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80064e0:	2301      	movs	r3, #1
 80064e2:	637b      	str	r3, [r7, #52]	; 0x34
 80064e4:	e001      	b.n	80064ea <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064e6:	2300      	movs	r3, #0
 80064e8:	637b      	str	r3, [r7, #52]	; 0x34
 80064ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064ec:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f383 8811 	msr	BASEPRI, r3
}
 80064f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3738      	adds	r7, #56	; 0x38
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b08c      	sub	sp, #48	; 0x30
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800650c:	2300      	movs	r3, #0
 800650e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10a      	bne.n	8006530 <xQueueReceive+0x30>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	623b      	str	r3, [r7, #32]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d103      	bne.n	800653e <xQueueReceive+0x3e>
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	2b00      	cmp	r3, #0
 800653c:	d101      	bne.n	8006542 <xQueueReceive+0x42>
 800653e:	2301      	movs	r3, #1
 8006540:	e000      	b.n	8006544 <xQueueReceive+0x44>
 8006542:	2300      	movs	r3, #0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d10a      	bne.n	800655e <xQueueReceive+0x5e>
	__asm volatile
 8006548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800654c:	f383 8811 	msr	BASEPRI, r3
 8006550:	f3bf 8f6f 	isb	sy
 8006554:	f3bf 8f4f 	dsb	sy
 8006558:	61fb      	str	r3, [r7, #28]
}
 800655a:	bf00      	nop
 800655c:	e7fe      	b.n	800655c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800655e:	f001 f86f 	bl	8007640 <xTaskGetSchedulerState>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <xQueueReceive+0x6e>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <xQueueReceive+0x72>
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <xQueueReceive+0x74>
 8006572:	2300      	movs	r3, #0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10a      	bne.n	800658e <xQueueReceive+0x8e>
	__asm volatile
 8006578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657c:	f383 8811 	msr	BASEPRI, r3
 8006580:	f3bf 8f6f 	isb	sy
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	61bb      	str	r3, [r7, #24]
}
 800658a:	bf00      	nop
 800658c:	e7fe      	b.n	800658c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800658e:	f001 fdb1 	bl	80080f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006596:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2b00      	cmp	r3, #0
 800659c:	d01f      	beq.n	80065de <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800659e:	68b9      	ldr	r1, [r7, #8]
 80065a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a2:	f000 f91a 	bl	80067da <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	1e5a      	subs	r2, r3, #1
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b0:	691b      	ldr	r3, [r3, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00f      	beq.n	80065d6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80065b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b8:	3310      	adds	r3, #16
 80065ba:	4618      	mov	r0, r3
 80065bc:	f000 fe7e 	bl	80072bc <xTaskRemoveFromEventList>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80065c6:	4b3d      	ldr	r3, [pc, #244]	; (80066bc <xQueueReceive+0x1bc>)
 80065c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065cc:	601a      	str	r2, [r3, #0]
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065d6:	f001 fdbd 	bl	8008154 <vPortExitCritical>
				return pdPASS;
 80065da:	2301      	movs	r3, #1
 80065dc:	e069      	b.n	80066b2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d103      	bne.n	80065ec <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065e4:	f001 fdb6 	bl	8008154 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065e8:	2300      	movs	r3, #0
 80065ea:	e062      	b.n	80066b2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d106      	bne.n	8006600 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065f2:	f107 0310 	add.w	r3, r7, #16
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fec4 	bl	8007384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006600:	f001 fda8 	bl	8008154 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006604:	f000 fc30 	bl	8006e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006608:	f001 fd74 	bl	80080f4 <vPortEnterCritical>
 800660c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006612:	b25b      	sxtb	r3, r3
 8006614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006618:	d103      	bne.n	8006622 <xQueueReceive+0x122>
 800661a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006628:	b25b      	sxtb	r3, r3
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662e:	d103      	bne.n	8006638 <xQueueReceive+0x138>
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006638:	f001 fd8c 	bl	8008154 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800663c:	1d3a      	adds	r2, r7, #4
 800663e:	f107 0310 	add.w	r3, r7, #16
 8006642:	4611      	mov	r1, r2
 8006644:	4618      	mov	r0, r3
 8006646:	f000 feb3 	bl	80073b0 <xTaskCheckForTimeOut>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d123      	bne.n	8006698 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006650:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006652:	f000 f93a 	bl	80068ca <prvIsQueueEmpty>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d017      	beq.n	800668c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	3324      	adds	r3, #36	; 0x24
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	4611      	mov	r1, r2
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fdd9 	bl	800721c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800666a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800666c:	f000 f8db 	bl	8006826 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006670:	f000 fc08 	bl	8006e84 <xTaskResumeAll>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d189      	bne.n	800658e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800667a:	4b10      	ldr	r3, [pc, #64]	; (80066bc <xQueueReceive+0x1bc>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	e780      	b.n	800658e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800668c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668e:	f000 f8ca 	bl	8006826 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006692:	f000 fbf7 	bl	8006e84 <xTaskResumeAll>
 8006696:	e77a      	b.n	800658e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800669a:	f000 f8c4 	bl	8006826 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800669e:	f000 fbf1 	bl	8006e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80066a4:	f000 f911 	bl	80068ca <prvIsQueueEmpty>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f43f af6f 	beq.w	800658e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80066b0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3730      	adds	r7, #48	; 0x30
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	e000ed04 	.word	0xe000ed04

080066c0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10a      	bne.n	80066e8 <vQueueDelete+0x28>
	__asm volatile
 80066d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	60bb      	str	r3, [r7, #8]
}
 80066e4:	bf00      	nop
 80066e6:	e7fe      	b.n	80066e6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f947 	bl	800697c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d102      	bne.n	80066fe <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f001 fee9 	bl	80084d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80066fe:	bf00      	nop
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b086      	sub	sp, #24
 800670a:	af00      	add	r7, sp, #0
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10d      	bne.n	8006740 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d14d      	bne.n	80067c8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	4618      	mov	r0, r3
 8006732:	f000 ffa3 	bl	800767c <xTaskPriorityDisinherit>
 8006736:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	609a      	str	r2, [r3, #8]
 800673e:	e043      	b.n	80067c8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d119      	bne.n	800677a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	6858      	ldr	r0, [r3, #4]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674e:	461a      	mov	r2, r3
 8006750:	68b9      	ldr	r1, [r7, #8]
 8006752:	f002 f8fe 	bl	8008952 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675e:	441a      	add	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	429a      	cmp	r2, r3
 800676e:	d32b      	bcc.n	80067c8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	605a      	str	r2, [r3, #4]
 8006778:	e026      	b.n	80067c8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	68d8      	ldr	r0, [r3, #12]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006782:	461a      	mov	r2, r3
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	f002 f8e4 	bl	8008952 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	68da      	ldr	r2, [r3, #12]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006792:	425b      	negs	r3, r3
 8006794:	441a      	add	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d207      	bcs.n	80067b6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	689a      	ldr	r2, [r3, #8]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	425b      	negs	r3, r3
 80067b0:	441a      	add	r2, r3
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	d105      	bne.n	80067c8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	3b01      	subs	r3, #1
 80067c6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	1c5a      	adds	r2, r3, #1
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80067d0:	697b      	ldr	r3, [r7, #20]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3718      	adds	r7, #24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}

080067da <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b082      	sub	sp, #8
 80067de:	af00      	add	r7, sp, #0
 80067e0:	6078      	str	r0, [r7, #4]
 80067e2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d018      	beq.n	800681e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f4:	441a      	add	r2, r3
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	429a      	cmp	r2, r3
 8006804:	d303      	bcc.n	800680e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68d9      	ldr	r1, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006816:	461a      	mov	r2, r3
 8006818:	6838      	ldr	r0, [r7, #0]
 800681a:	f002 f89a 	bl	8008952 <memcpy>
	}
}
 800681e:	bf00      	nop
 8006820:	3708      	adds	r7, #8
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800682e:	f001 fc61 	bl	80080f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006838:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800683a:	e011      	b.n	8006860 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	2b00      	cmp	r3, #0
 8006842:	d012      	beq.n	800686a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	3324      	adds	r3, #36	; 0x24
 8006848:	4618      	mov	r0, r3
 800684a:	f000 fd37 	bl	80072bc <xTaskRemoveFromEventList>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006854:	f000 fe0e 	bl	8007474 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	3b01      	subs	r3, #1
 800685c:	b2db      	uxtb	r3, r3
 800685e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dce9      	bgt.n	800683c <prvUnlockQueue+0x16>
 8006868:	e000      	b.n	800686c <prvUnlockQueue+0x46>
					break;
 800686a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	22ff      	movs	r2, #255	; 0xff
 8006870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006874:	f001 fc6e 	bl	8008154 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006878:	f001 fc3c 	bl	80080f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006882:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006884:	e011      	b.n	80068aa <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d012      	beq.n	80068b4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3310      	adds	r3, #16
 8006892:	4618      	mov	r0, r3
 8006894:	f000 fd12 	bl	80072bc <xTaskRemoveFromEventList>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800689e:	f000 fde9 	bl	8007474 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	3b01      	subs	r3, #1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	dce9      	bgt.n	8006886 <prvUnlockQueue+0x60>
 80068b2:	e000      	b.n	80068b6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068b4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	22ff      	movs	r2, #255	; 0xff
 80068ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80068be:	f001 fc49 	bl	8008154 <vPortExitCritical>
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}

080068ca <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068d2:	f001 fc0f 	bl	80080f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d102      	bne.n	80068e4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80068de:	2301      	movs	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	e001      	b.n	80068e8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068e4:	2300      	movs	r3, #0
 80068e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068e8:	f001 fc34 	bl	8008154 <vPortExitCritical>

	return xReturn;
 80068ec:	68fb      	ldr	r3, [r7, #12]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068fe:	f001 fbf9 	bl	80080f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800690a:	429a      	cmp	r2, r3
 800690c:	d102      	bne.n	8006914 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800690e:	2301      	movs	r3, #1
 8006910:	60fb      	str	r3, [r7, #12]
 8006912:	e001      	b.n	8006918 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006918:	f001 fc1c 	bl	8008154 <vPortExitCritical>

	return xReturn;
 800691c:	68fb      	ldr	r3, [r7, #12]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3710      	adds	r7, #16
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
	...

08006928 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006928:	b480      	push	{r7}
 800692a:	b085      	sub	sp, #20
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
 8006930:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006932:	2300      	movs	r3, #0
 8006934:	60fb      	str	r3, [r7, #12]
 8006936:	e014      	b.n	8006962 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006938:	4a0f      	ldr	r2, [pc, #60]	; (8006978 <vQueueAddToRegistry+0x50>)
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10b      	bne.n	800695c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006944:	490c      	ldr	r1, [pc, #48]	; (8006978 <vQueueAddToRegistry+0x50>)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800694e:	4a0a      	ldr	r2, [pc, #40]	; (8006978 <vQueueAddToRegistry+0x50>)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	00db      	lsls	r3, r3, #3
 8006954:	4413      	add	r3, r2
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800695a:	e006      	b.n	800696a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	3301      	adds	r3, #1
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b07      	cmp	r3, #7
 8006966:	d9e7      	bls.n	8006938 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006968:	bf00      	nop
 800696a:	bf00      	nop
 800696c:	3714      	adds	r7, #20
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr
 8006976:	bf00      	nop
 8006978:	20000bd4 	.word	0x20000bd4

0800697c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006984:	2300      	movs	r3, #0
 8006986:	60fb      	str	r3, [r7, #12]
 8006988:	e016      	b.n	80069b8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800698a:	4a10      	ldr	r2, [pc, #64]	; (80069cc <vQueueUnregisterQueue+0x50>)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	00db      	lsls	r3, r3, #3
 8006990:	4413      	add	r3, r2
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	429a      	cmp	r2, r3
 8006998:	d10b      	bne.n	80069b2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800699a:	4a0c      	ldr	r2, [pc, #48]	; (80069cc <vQueueUnregisterQueue+0x50>)
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2100      	movs	r1, #0
 80069a0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80069a4:	4a09      	ldr	r2, [pc, #36]	; (80069cc <vQueueUnregisterQueue+0x50>)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4413      	add	r3, r2
 80069ac:	2200      	movs	r2, #0
 80069ae:	605a      	str	r2, [r3, #4]
				break;
 80069b0:	e006      	b.n	80069c0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3301      	adds	r3, #1
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2b07      	cmp	r3, #7
 80069bc:	d9e5      	bls.n	800698a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	20000bd4 	.word	0x20000bd4

080069d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069e0:	f001 fb88 	bl	80080f4 <vPortEnterCritical>
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069ea:	b25b      	sxtb	r3, r3
 80069ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f0:	d103      	bne.n	80069fa <vQueueWaitForMessageRestricted+0x2a>
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a00:	b25b      	sxtb	r3, r3
 8006a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a06:	d103      	bne.n	8006a10 <vQueueWaitForMessageRestricted+0x40>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a10:	f001 fba0 	bl	8008154 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	3324      	adds	r3, #36	; 0x24
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	4618      	mov	r0, r3
 8006a26:	f000 fc1d 	bl	8007264 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006a2a:	6978      	ldr	r0, [r7, #20]
 8006a2c:	f7ff fefb 	bl	8006826 <prvUnlockQueue>
	}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08e      	sub	sp, #56	; 0x38
 8006a3c:	af04      	add	r7, sp, #16
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <xTaskCreateStatic+0x2a>
	__asm volatile
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	623b      	str	r3, [r7, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	e7fe      	b.n	8006a60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <xTaskCreateStatic+0x46>
	__asm volatile
 8006a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6c:	f383 8811 	msr	BASEPRI, r3
 8006a70:	f3bf 8f6f 	isb	sy
 8006a74:	f3bf 8f4f 	dsb	sy
 8006a78:	61fb      	str	r3, [r7, #28]
}
 8006a7a:	bf00      	nop
 8006a7c:	e7fe      	b.n	8006a7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a7e:	23bc      	movs	r3, #188	; 0xbc
 8006a80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	2bbc      	cmp	r3, #188	; 0xbc
 8006a86:	d00a      	beq.n	8006a9e <xTaskCreateStatic+0x66>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	61bb      	str	r3, [r7, #24]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01e      	beq.n	8006ae4 <xTaskCreateStatic+0xac>
 8006aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d01b      	beq.n	8006ae4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ab4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	2202      	movs	r2, #2
 8006aba:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006abe:	2300      	movs	r3, #0
 8006ac0:	9303      	str	r3, [sp, #12]
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	9302      	str	r3, [sp, #8]
 8006ac6:	f107 0314 	add.w	r3, r7, #20
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ace:	9300      	str	r3, [sp, #0]
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	687a      	ldr	r2, [r7, #4]
 8006ad4:	68b9      	ldr	r1, [r7, #8]
 8006ad6:	68f8      	ldr	r0, [r7, #12]
 8006ad8:	f000 f80c 	bl	8006af4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006adc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ade:	f000 f8af 	bl	8006c40 <prvAddNewTaskToReadyList>
 8006ae2:	e001      	b.n	8006ae8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ae8:	697b      	ldr	r3, [r7, #20]
	}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3728      	adds	r7, #40	; 0x28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
	...

08006af4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	60b9      	str	r1, [r7, #8]
 8006afe:	607a      	str	r2, [r7, #4]
 8006b00:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	009b      	lsls	r3, r3, #2
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	21a5      	movs	r1, #165	; 0xa5
 8006b0e:	f001 ff2e 	bl	800896e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4413      	add	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	f023 0307 	bic.w	r3, r3, #7
 8006b2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b2c:	69bb      	ldr	r3, [r7, #24]
 8006b2e:	f003 0307 	and.w	r3, r3, #7
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00a      	beq.n	8006b4c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	617b      	str	r3, [r7, #20]
}
 8006b48:	bf00      	nop
 8006b4a:	e7fe      	b.n	8006b4a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b4c:	68bb      	ldr	r3, [r7, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d01f      	beq.n	8006b92 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	e012      	b.n	8006b7e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b58:	68ba      	ldr	r2, [r7, #8]
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	7819      	ldrb	r1, [r3, #0]
 8006b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	4413      	add	r3, r2
 8006b66:	3334      	adds	r3, #52	; 0x34
 8006b68:	460a      	mov	r2, r1
 8006b6a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	4413      	add	r3, r2
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
 8006b7e:	69fb      	ldr	r3, [r7, #28]
 8006b80:	2b0f      	cmp	r3, #15
 8006b82:	d9e9      	bls.n	8006b58 <prvInitialiseNewTask+0x64>
 8006b84:	e000      	b.n	8006b88 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b86:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b90:	e003      	b.n	8006b9a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b94:	2200      	movs	r2, #0
 8006b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b9c:	2b37      	cmp	r3, #55	; 0x37
 8006b9e:	d901      	bls.n	8006ba4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006ba0:	2337      	movs	r3, #55	; 0x37
 8006ba2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ba8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f7fe fff2 	bl	8005ba4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	3318      	adds	r3, #24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe ffed 	bl	8005ba4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	2200      	movs	r2, #0
 8006be4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	3354      	adds	r3, #84	; 0x54
 8006bf4:	2260      	movs	r2, #96	; 0x60
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 feb8 	bl	800896e <memset>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	4a0c      	ldr	r2, [pc, #48]	; (8006c34 <prvInitialiseNewTask+0x140>)
 8006c02:	659a      	str	r2, [r3, #88]	; 0x58
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	4a0c      	ldr	r2, [pc, #48]	; (8006c38 <prvInitialiseNewTask+0x144>)
 8006c08:	65da      	str	r2, [r3, #92]	; 0x5c
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	4a0b      	ldr	r2, [pc, #44]	; (8006c3c <prvInitialiseNewTask+0x148>)
 8006c0e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c10:	683a      	ldr	r2, [r7, #0]
 8006c12:	68f9      	ldr	r1, [r7, #12]
 8006c14:	69b8      	ldr	r0, [r7, #24]
 8006c16:	f001 f941 	bl	8007e9c <pxPortInitialiseStack>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d002      	beq.n	8006c2c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c2a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c2c:	bf00      	nop
 8006c2e:	3720      	adds	r7, #32
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	08009d50 	.word	0x08009d50
 8006c38:	08009d70 	.word	0x08009d70
 8006c3c:	08009d30 	.word	0x08009d30

08006c40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b082      	sub	sp, #8
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c48:	f001 fa54 	bl	80080f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c4c:	4b2d      	ldr	r3, [pc, #180]	; (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3301      	adds	r3, #1
 8006c52:	4a2c      	ldr	r2, [pc, #176]	; (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c56:	4b2c      	ldr	r3, [pc, #176]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d109      	bne.n	8006c72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c5e:	4a2a      	ldr	r2, [pc, #168]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c64:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <prvAddNewTaskToReadyList+0xc4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b01      	cmp	r3, #1
 8006c6a:	d110      	bne.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c6c:	f000 fc26 	bl	80074bc <prvInitialiseTaskLists>
 8006c70:	e00d      	b.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c72:	4b26      	ldr	r3, [pc, #152]	; (8006d0c <prvAddNewTaskToReadyList+0xcc>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d109      	bne.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c7a:	4b23      	ldr	r3, [pc, #140]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d802      	bhi.n	8006c8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c88:	4a1f      	ldr	r2, [pc, #124]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c8e:	4b20      	ldr	r3, [pc, #128]	; (8006d10 <prvAddNewTaskToReadyList+0xd0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a1e      	ldr	r2, [pc, #120]	; (8006d10 <prvAddNewTaskToReadyList+0xd0>)
 8006c96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c98:	4b1d      	ldr	r3, [pc, #116]	; (8006d10 <prvAddNewTaskToReadyList+0xd0>)
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca4:	4b1b      	ldr	r3, [pc, #108]	; (8006d14 <prvAddNewTaskToReadyList+0xd4>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d903      	bls.n	8006cb4 <prvAddNewTaskToReadyList+0x74>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb0:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <prvAddNewTaskToReadyList+0xd4>)
 8006cb2:	6013      	str	r3, [r2, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4a15      	ldr	r2, [pc, #84]	; (8006d18 <prvAddNewTaskToReadyList+0xd8>)
 8006cc2:	441a      	add	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4619      	mov	r1, r3
 8006cca:	4610      	mov	r0, r2
 8006ccc:	f7fe ff77 	bl	8005bbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cd0:	f001 fa40 	bl	8008154 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cd4:	4b0d      	ldr	r3, [pc, #52]	; (8006d0c <prvAddNewTaskToReadyList+0xcc>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d00e      	beq.n	8006cfa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <prvAddNewTaskToReadyList+0xc8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d207      	bcs.n	8006cfa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cea:	4b0c      	ldr	r3, [pc, #48]	; (8006d1c <prvAddNewTaskToReadyList+0xdc>)
 8006cec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cf0:	601a      	str	r2, [r3, #0]
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	200010e8 	.word	0x200010e8
 8006d08:	20000c14 	.word	0x20000c14
 8006d0c:	200010f4 	.word	0x200010f4
 8006d10:	20001104 	.word	0x20001104
 8006d14:	200010f0 	.word	0x200010f0
 8006d18:	20000c18 	.word	0x20000c18
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b084      	sub	sp, #16
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d017      	beq.n	8006d62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d32:	4b13      	ldr	r3, [pc, #76]	; (8006d80 <vTaskDelay+0x60>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d00a      	beq.n	8006d50 <vTaskDelay+0x30>
	__asm volatile
 8006d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3e:	f383 8811 	msr	BASEPRI, r3
 8006d42:	f3bf 8f6f 	isb	sy
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	60bb      	str	r3, [r7, #8]
}
 8006d4c:	bf00      	nop
 8006d4e:	e7fe      	b.n	8006d4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d50:	f000 f88a 	bl	8006e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fcfe 	bl	8007758 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d5c:	f000 f892 	bl	8006e84 <xTaskResumeAll>
 8006d60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d107      	bne.n	8006d78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d68:	4b06      	ldr	r3, [pc, #24]	; (8006d84 <vTaskDelay+0x64>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d78:	bf00      	nop
 8006d7a:	3710      	adds	r7, #16
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20001110 	.word	0x20001110
 8006d84:	e000ed04 	.word	0xe000ed04

08006d88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	; 0x28
 8006d8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d96:	463a      	mov	r2, r7
 8006d98:	1d39      	adds	r1, r7, #4
 8006d9a:	f107 0308 	add.w	r3, r7, #8
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7fe feac 	bl	8005afc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	68ba      	ldr	r2, [r7, #8]
 8006daa:	9202      	str	r2, [sp, #8]
 8006dac:	9301      	str	r3, [sp, #4]
 8006dae:	2300      	movs	r3, #0
 8006db0:	9300      	str	r3, [sp, #0]
 8006db2:	2300      	movs	r3, #0
 8006db4:	460a      	mov	r2, r1
 8006db6:	4924      	ldr	r1, [pc, #144]	; (8006e48 <vTaskStartScheduler+0xc0>)
 8006db8:	4824      	ldr	r0, [pc, #144]	; (8006e4c <vTaskStartScheduler+0xc4>)
 8006dba:	f7ff fe3d 	bl	8006a38 <xTaskCreateStatic>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4a23      	ldr	r2, [pc, #140]	; (8006e50 <vTaskStartScheduler+0xc8>)
 8006dc2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dc4:	4b22      	ldr	r3, [pc, #136]	; (8006e50 <vTaskStartScheduler+0xc8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	617b      	str	r3, [r7, #20]
 8006dd0:	e001      	b.n	8006dd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d102      	bne.n	8006de2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006ddc:	f000 fd10 	bl	8007800 <xTimerCreateTimerTask>
 8006de0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d11b      	bne.n	8006e20 <vTaskStartScheduler+0x98>
	__asm volatile
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	613b      	str	r3, [r7, #16]
}
 8006dfa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dfc:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <vTaskStartScheduler+0xcc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3354      	adds	r3, #84	; 0x54
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <vTaskStartScheduler+0xd0>)
 8006e04:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e06:	4b15      	ldr	r3, [pc, #84]	; (8006e5c <vTaskStartScheduler+0xd4>)
 8006e08:	f04f 32ff 	mov.w	r2, #4294967295
 8006e0c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <vTaskStartScheduler+0xd8>)
 8006e10:	2201      	movs	r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e14:	4b13      	ldr	r3, [pc, #76]	; (8006e64 <vTaskStartScheduler+0xdc>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e1a:	f001 f8c9 	bl	8007fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e1e:	e00e      	b.n	8006e3e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e26:	d10a      	bne.n	8006e3e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	f383 8811 	msr	BASEPRI, r3
 8006e30:	f3bf 8f6f 	isb	sy
 8006e34:	f3bf 8f4f 	dsb	sy
 8006e38:	60fb      	str	r3, [r7, #12]
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <vTaskStartScheduler+0xb4>
}
 8006e3e:	bf00      	nop
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	08009c24 	.word	0x08009c24
 8006e4c:	0800748d 	.word	0x0800748d
 8006e50:	2000110c 	.word	0x2000110c
 8006e54:	20000c14 	.word	0x20000c14
 8006e58:	20000018 	.word	0x20000018
 8006e5c:	20001108 	.word	0x20001108
 8006e60:	200010f4 	.word	0x200010f4
 8006e64:	200010ec 	.word	0x200010ec

08006e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e6c:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	3301      	adds	r3, #1
 8006e72:	4a03      	ldr	r2, [pc, #12]	; (8006e80 <vTaskSuspendAll+0x18>)
 8006e74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e76:	bf00      	nop
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	20001110 	.word	0x20001110

08006e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e92:	4b42      	ldr	r3, [pc, #264]	; (8006f9c <xTaskResumeAll+0x118>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	603b      	str	r3, [r7, #0]
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eb0:	f001 f920 	bl	80080f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006eb4:	4b39      	ldr	r3, [pc, #228]	; (8006f9c <xTaskResumeAll+0x118>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4a38      	ldr	r2, [pc, #224]	; (8006f9c <xTaskResumeAll+0x118>)
 8006ebc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ebe:	4b37      	ldr	r3, [pc, #220]	; (8006f9c <xTaskResumeAll+0x118>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d162      	bne.n	8006f8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ec6:	4b36      	ldr	r3, [pc, #216]	; (8006fa0 <xTaskResumeAll+0x11c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d05e      	beq.n	8006f8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ece:	e02f      	b.n	8006f30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ed0:	4b34      	ldr	r3, [pc, #208]	; (8006fa4 <xTaskResumeAll+0x120>)
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	3318      	adds	r3, #24
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe fecb 	bl	8005c78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	3304      	adds	r3, #4
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fe fec6 	bl	8005c78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ef0:	4b2d      	ldr	r3, [pc, #180]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d903      	bls.n	8006f00 <xTaskResumeAll+0x7c>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006efc:	4a2a      	ldr	r2, [pc, #168]	; (8006fa8 <xTaskResumeAll+0x124>)
 8006efe:	6013      	str	r3, [r2, #0]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4a27      	ldr	r2, [pc, #156]	; (8006fac <xTaskResumeAll+0x128>)
 8006f0e:	441a      	add	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	3304      	adds	r3, #4
 8006f14:	4619      	mov	r1, r3
 8006f16:	4610      	mov	r0, r2
 8006f18:	f7fe fe51 	bl	8005bbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f20:	4b23      	ldr	r3, [pc, #140]	; (8006fb0 <xTaskResumeAll+0x12c>)
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006f2a:	4b22      	ldr	r3, [pc, #136]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f30:	4b1c      	ldr	r3, [pc, #112]	; (8006fa4 <xTaskResumeAll+0x120>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d1cb      	bne.n	8006ed0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f3e:	f000 fb5f 	bl	8007600 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f42:	4b1d      	ldr	r3, [pc, #116]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d010      	beq.n	8006f70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f4e:	f000 f847 	bl	8006fe0 <xTaskIncrementTick>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006f58:	4b16      	ldr	r3, [pc, #88]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	3b01      	subs	r3, #1
 8006f62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1f1      	bne.n	8006f4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006f6a:	4b13      	ldr	r3, [pc, #76]	; (8006fb8 <xTaskResumeAll+0x134>)
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f70:	4b10      	ldr	r3, [pc, #64]	; (8006fb4 <xTaskResumeAll+0x130>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d009      	beq.n	8006f8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f7c:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <xTaskResumeAll+0x138>)
 8006f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f82:	601a      	str	r2, [r3, #0]
 8006f84:	f3bf 8f4f 	dsb	sy
 8006f88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f8c:	f001 f8e2 	bl	8008154 <vPortExitCritical>

	return xAlreadyYielded;
 8006f90:	68bb      	ldr	r3, [r7, #8]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3710      	adds	r7, #16
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop
 8006f9c:	20001110 	.word	0x20001110
 8006fa0:	200010e8 	.word	0x200010e8
 8006fa4:	200010a8 	.word	0x200010a8
 8006fa8:	200010f0 	.word	0x200010f0
 8006fac:	20000c18 	.word	0x20000c18
 8006fb0:	20000c14 	.word	0x20000c14
 8006fb4:	200010fc 	.word	0x200010fc
 8006fb8:	200010f8 	.word	0x200010f8
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fc6:	4b05      	ldr	r3, [pc, #20]	; (8006fdc <xTaskGetTickCount+0x1c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fcc:	687b      	ldr	r3, [r7, #4]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	200010ec 	.word	0x200010ec

08006fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fea:	4b4f      	ldr	r3, [pc, #316]	; (8007128 <xTaskIncrementTick+0x148>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	f040 808f 	bne.w	8007112 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ff4:	4b4d      	ldr	r3, [pc, #308]	; (800712c <xTaskIncrementTick+0x14c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	3301      	adds	r3, #1
 8006ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006ffc:	4a4b      	ldr	r2, [pc, #300]	; (800712c <xTaskIncrementTick+0x14c>)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d120      	bne.n	800704a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007008:	4b49      	ldr	r3, [pc, #292]	; (8007130 <xTaskIncrementTick+0x150>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d00a      	beq.n	8007028 <xTaskIncrementTick+0x48>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	603b      	str	r3, [r7, #0]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <xTaskIncrementTick+0x46>
 8007028:	4b41      	ldr	r3, [pc, #260]	; (8007130 <xTaskIncrementTick+0x150>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60fb      	str	r3, [r7, #12]
 800702e:	4b41      	ldr	r3, [pc, #260]	; (8007134 <xTaskIncrementTick+0x154>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a3f      	ldr	r2, [pc, #252]	; (8007130 <xTaskIncrementTick+0x150>)
 8007034:	6013      	str	r3, [r2, #0]
 8007036:	4a3f      	ldr	r2, [pc, #252]	; (8007134 <xTaskIncrementTick+0x154>)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	4b3e      	ldr	r3, [pc, #248]	; (8007138 <xTaskIncrementTick+0x158>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	3301      	adds	r3, #1
 8007042:	4a3d      	ldr	r2, [pc, #244]	; (8007138 <xTaskIncrementTick+0x158>)
 8007044:	6013      	str	r3, [r2, #0]
 8007046:	f000 fadb 	bl	8007600 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800704a:	4b3c      	ldr	r3, [pc, #240]	; (800713c <xTaskIncrementTick+0x15c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	429a      	cmp	r2, r3
 8007052:	d349      	bcc.n	80070e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007054:	4b36      	ldr	r3, [pc, #216]	; (8007130 <xTaskIncrementTick+0x150>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d104      	bne.n	8007068 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800705e:	4b37      	ldr	r3, [pc, #220]	; (800713c <xTaskIncrementTick+0x15c>)
 8007060:	f04f 32ff 	mov.w	r2, #4294967295
 8007064:	601a      	str	r2, [r3, #0]
					break;
 8007066:	e03f      	b.n	80070e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007068:	4b31      	ldr	r3, [pc, #196]	; (8007130 <xTaskIncrementTick+0x150>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	d203      	bcs.n	8007088 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007080:	4a2e      	ldr	r2, [pc, #184]	; (800713c <xTaskIncrementTick+0x15c>)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007086:	e02f      	b.n	80070e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe fdf3 	bl	8005c78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007096:	2b00      	cmp	r3, #0
 8007098:	d004      	beq.n	80070a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	3318      	adds	r3, #24
 800709e:	4618      	mov	r0, r3
 80070a0:	f7fe fdea 	bl	8005c78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a8:	4b25      	ldr	r3, [pc, #148]	; (8007140 <xTaskIncrementTick+0x160>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	429a      	cmp	r2, r3
 80070ae:	d903      	bls.n	80070b8 <xTaskIncrementTick+0xd8>
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070b4:	4a22      	ldr	r2, [pc, #136]	; (8007140 <xTaskIncrementTick+0x160>)
 80070b6:	6013      	str	r3, [r2, #0]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4a1f      	ldr	r2, [pc, #124]	; (8007144 <xTaskIncrementTick+0x164>)
 80070c6:	441a      	add	r2, r3
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3304      	adds	r3, #4
 80070cc:	4619      	mov	r1, r3
 80070ce:	4610      	mov	r0, r2
 80070d0:	f7fe fd75 	bl	8005bbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d8:	4b1b      	ldr	r3, [pc, #108]	; (8007148 <xTaskIncrementTick+0x168>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	429a      	cmp	r2, r3
 80070e0:	d3b8      	bcc.n	8007054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070e6:	e7b5      	b.n	8007054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070e8:	4b17      	ldr	r3, [pc, #92]	; (8007148 <xTaskIncrementTick+0x168>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ee:	4915      	ldr	r1, [pc, #84]	; (8007144 <xTaskIncrementTick+0x164>)
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	440b      	add	r3, r1
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d901      	bls.n	8007104 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007100:	2301      	movs	r3, #1
 8007102:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007104:	4b11      	ldr	r3, [pc, #68]	; (800714c <xTaskIncrementTick+0x16c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d007      	beq.n	800711c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800710c:	2301      	movs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
 8007110:	e004      	b.n	800711c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007112:	4b0f      	ldr	r3, [pc, #60]	; (8007150 <xTaskIncrementTick+0x170>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	3301      	adds	r3, #1
 8007118:	4a0d      	ldr	r2, [pc, #52]	; (8007150 <xTaskIncrementTick+0x170>)
 800711a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800711c:	697b      	ldr	r3, [r7, #20]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	20001110 	.word	0x20001110
 800712c:	200010ec 	.word	0x200010ec
 8007130:	200010a0 	.word	0x200010a0
 8007134:	200010a4 	.word	0x200010a4
 8007138:	20001100 	.word	0x20001100
 800713c:	20001108 	.word	0x20001108
 8007140:	200010f0 	.word	0x200010f0
 8007144:	20000c18 	.word	0x20000c18
 8007148:	20000c14 	.word	0x20000c14
 800714c:	200010fc 	.word	0x200010fc
 8007150:	200010f8 	.word	0x200010f8

08007154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800715a:	4b2a      	ldr	r3, [pc, #168]	; (8007204 <vTaskSwitchContext+0xb0>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d003      	beq.n	800716a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007162:	4b29      	ldr	r3, [pc, #164]	; (8007208 <vTaskSwitchContext+0xb4>)
 8007164:	2201      	movs	r2, #1
 8007166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007168:	e046      	b.n	80071f8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800716a:	4b27      	ldr	r3, [pc, #156]	; (8007208 <vTaskSwitchContext+0xb4>)
 800716c:	2200      	movs	r2, #0
 800716e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007170:	4b26      	ldr	r3, [pc, #152]	; (800720c <vTaskSwitchContext+0xb8>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	60fb      	str	r3, [r7, #12]
 8007176:	e010      	b.n	800719a <vTaskSwitchContext+0x46>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d10a      	bne.n	8007194 <vTaskSwitchContext+0x40>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	607b      	str	r3, [r7, #4]
}
 8007190:	bf00      	nop
 8007192:	e7fe      	b.n	8007192 <vTaskSwitchContext+0x3e>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	3b01      	subs	r3, #1
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	491d      	ldr	r1, [pc, #116]	; (8007210 <vTaskSwitchContext+0xbc>)
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d0e4      	beq.n	8007178 <vTaskSwitchContext+0x24>
 80071ae:	68fa      	ldr	r2, [r7, #12]
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4a15      	ldr	r2, [pc, #84]	; (8007210 <vTaskSwitchContext+0xbc>)
 80071ba:	4413      	add	r3, r2
 80071bc:	60bb      	str	r3, [r7, #8]
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	605a      	str	r2, [r3, #4]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	685a      	ldr	r2, [r3, #4]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	3308      	adds	r3, #8
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d104      	bne.n	80071de <vTaskSwitchContext+0x8a>
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	685a      	ldr	r2, [r3, #4]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	605a      	str	r2, [r3, #4]
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	68db      	ldr	r3, [r3, #12]
 80071e4:	4a0b      	ldr	r2, [pc, #44]	; (8007214 <vTaskSwitchContext+0xc0>)
 80071e6:	6013      	str	r3, [r2, #0]
 80071e8:	4a08      	ldr	r2, [pc, #32]	; (800720c <vTaskSwitchContext+0xb8>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071ee:	4b09      	ldr	r3, [pc, #36]	; (8007214 <vTaskSwitchContext+0xc0>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3354      	adds	r3, #84	; 0x54
 80071f4:	4a08      	ldr	r2, [pc, #32]	; (8007218 <vTaskSwitchContext+0xc4>)
 80071f6:	6013      	str	r3, [r2, #0]
}
 80071f8:	bf00      	nop
 80071fa:	3714      	adds	r7, #20
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20001110 	.word	0x20001110
 8007208:	200010fc 	.word	0x200010fc
 800720c:	200010f0 	.word	0x200010f0
 8007210:	20000c18 	.word	0x20000c18
 8007214:	20000c14 	.word	0x20000c14
 8007218:	20000018 	.word	0x20000018

0800721c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	60fb      	str	r3, [r7, #12]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007242:	4b07      	ldr	r3, [pc, #28]	; (8007260 <vTaskPlaceOnEventList+0x44>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3318      	adds	r3, #24
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fe fcdb 	bl	8005c06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007250:	2101      	movs	r1, #1
 8007252:	6838      	ldr	r0, [r7, #0]
 8007254:	f000 fa80 	bl	8007758 <prvAddCurrentTaskToDelayedList>
}
 8007258:	bf00      	nop
 800725a:	3710      	adds	r7, #16
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}
 8007260:	20000c14 	.word	0x20000c14

08007264 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	60f8      	str	r0, [r7, #12]
 800726c:	60b9      	str	r1, [r7, #8]
 800726e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800727a:	f383 8811 	msr	BASEPRI, r3
 800727e:	f3bf 8f6f 	isb	sy
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	617b      	str	r3, [r7, #20]
}
 8007288:	bf00      	nop
 800728a:	e7fe      	b.n	800728a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3318      	adds	r3, #24
 8007292:	4619      	mov	r1, r3
 8007294:	68f8      	ldr	r0, [r7, #12]
 8007296:	f7fe fc92 	bl	8005bbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80072a0:	f04f 33ff 	mov.w	r3, #4294967295
 80072a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	68b8      	ldr	r0, [r7, #8]
 80072aa:	f000 fa55 	bl	8007758 <prvAddCurrentTaskToDelayedList>
	}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	20000c14 	.word	0x20000c14

080072bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b086      	sub	sp, #24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	68db      	ldr	r3, [r3, #12]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d10a      	bne.n	80072e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80072d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	e7fe      	b.n	80072e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	3318      	adds	r3, #24
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fcc3 	bl	8005c78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f2:	4b1e      	ldr	r3, [pc, #120]	; (800736c <xTaskRemoveFromEventList+0xb0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d11d      	bne.n	8007336 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	3304      	adds	r3, #4
 80072fe:	4618      	mov	r0, r3
 8007300:	f7fe fcba 	bl	8005c78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007308:	4b19      	ldr	r3, [pc, #100]	; (8007370 <xTaskRemoveFromEventList+0xb4>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d903      	bls.n	8007318 <xTaskRemoveFromEventList+0x5c>
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	4a16      	ldr	r2, [pc, #88]	; (8007370 <xTaskRemoveFromEventList+0xb4>)
 8007316:	6013      	str	r3, [r2, #0]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4613      	mov	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	4a13      	ldr	r2, [pc, #76]	; (8007374 <xTaskRemoveFromEventList+0xb8>)
 8007326:	441a      	add	r2, r3
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	3304      	adds	r3, #4
 800732c:	4619      	mov	r1, r3
 800732e:	4610      	mov	r0, r2
 8007330:	f7fe fc45 	bl	8005bbe <vListInsertEnd>
 8007334:	e005      	b.n	8007342 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	3318      	adds	r3, #24
 800733a:	4619      	mov	r1, r3
 800733c:	480e      	ldr	r0, [pc, #56]	; (8007378 <xTaskRemoveFromEventList+0xbc>)
 800733e:	f7fe fc3e 	bl	8005bbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007346:	4b0d      	ldr	r3, [pc, #52]	; (800737c <xTaskRemoveFromEventList+0xc0>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734c:	429a      	cmp	r2, r3
 800734e:	d905      	bls.n	800735c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007350:	2301      	movs	r3, #1
 8007352:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007354:	4b0a      	ldr	r3, [pc, #40]	; (8007380 <xTaskRemoveFromEventList+0xc4>)
 8007356:	2201      	movs	r2, #1
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e001      	b.n	8007360 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007360:	697b      	ldr	r3, [r7, #20]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20001110 	.word	0x20001110
 8007370:	200010f0 	.word	0x200010f0
 8007374:	20000c18 	.word	0x20000c18
 8007378:	200010a8 	.word	0x200010a8
 800737c:	20000c14 	.word	0x20000c14
 8007380:	200010fc 	.word	0x200010fc

08007384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800738c:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <vTaskInternalSetTimeOutState+0x24>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <vTaskInternalSetTimeOutState+0x28>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	20001100 	.word	0x20001100
 80073ac:	200010ec 	.word	0x200010ec

080073b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10a      	bne.n	80073d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	613b      	str	r3, [r7, #16]
}
 80073d2:	bf00      	nop
 80073d4:	e7fe      	b.n	80073d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	60fb      	str	r3, [r7, #12]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80073f2:	f000 fe7f 	bl	80080f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80073f6:	4b1d      	ldr	r3, [pc, #116]	; (800746c <xTaskCheckForTimeOut+0xbc>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800740e:	d102      	bne.n	8007416 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007410:	2300      	movs	r3, #0
 8007412:	61fb      	str	r3, [r7, #28]
 8007414:	e023      	b.n	800745e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <xTaskCheckForTimeOut+0xc0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	429a      	cmp	r2, r3
 8007420:	d007      	beq.n	8007432 <xTaskCheckForTimeOut+0x82>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	69ba      	ldr	r2, [r7, #24]
 8007428:	429a      	cmp	r2, r3
 800742a:	d302      	bcc.n	8007432 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800742c:	2301      	movs	r3, #1
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e015      	b.n	800745e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	429a      	cmp	r2, r3
 800743a:	d20b      	bcs.n	8007454 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	1ad2      	subs	r2, r2, r3
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff ff9b 	bl	8007384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800744e:	2300      	movs	r3, #0
 8007450:	61fb      	str	r3, [r7, #28]
 8007452:	e004      	b.n	800745e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800745a:	2301      	movs	r3, #1
 800745c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800745e:	f000 fe79 	bl	8008154 <vPortExitCritical>

	return xReturn;
 8007462:	69fb      	ldr	r3, [r7, #28]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3720      	adds	r7, #32
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200010ec 	.word	0x200010ec
 8007470:	20001100 	.word	0x20001100

08007474 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007474:	b480      	push	{r7}
 8007476:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007478:	4b03      	ldr	r3, [pc, #12]	; (8007488 <vTaskMissedYield+0x14>)
 800747a:	2201      	movs	r2, #1
 800747c:	601a      	str	r2, [r3, #0]
}
 800747e:	bf00      	nop
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	200010fc 	.word	0x200010fc

0800748c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007494:	f000 f852 	bl	800753c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <prvIdleTask+0x28>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d9f9      	bls.n	8007494 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074a0:	4b05      	ldr	r3, [pc, #20]	; (80074b8 <prvIdleTask+0x2c>)
 80074a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	f3bf 8f4f 	dsb	sy
 80074ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074b0:	e7f0      	b.n	8007494 <prvIdleTask+0x8>
 80074b2:	bf00      	nop
 80074b4:	20000c18 	.word	0x20000c18
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074c2:	2300      	movs	r3, #0
 80074c4:	607b      	str	r3, [r7, #4]
 80074c6:	e00c      	b.n	80074e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	4613      	mov	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	4413      	add	r3, r2
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4a12      	ldr	r2, [pc, #72]	; (800751c <prvInitialiseTaskLists+0x60>)
 80074d4:	4413      	add	r3, r2
 80074d6:	4618      	mov	r0, r3
 80074d8:	f7fe fb44 	bl	8005b64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	3301      	adds	r3, #1
 80074e0:	607b      	str	r3, [r7, #4]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b37      	cmp	r3, #55	; 0x37
 80074e6:	d9ef      	bls.n	80074c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074e8:	480d      	ldr	r0, [pc, #52]	; (8007520 <prvInitialiseTaskLists+0x64>)
 80074ea:	f7fe fb3b 	bl	8005b64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074ee:	480d      	ldr	r0, [pc, #52]	; (8007524 <prvInitialiseTaskLists+0x68>)
 80074f0:	f7fe fb38 	bl	8005b64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80074f4:	480c      	ldr	r0, [pc, #48]	; (8007528 <prvInitialiseTaskLists+0x6c>)
 80074f6:	f7fe fb35 	bl	8005b64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80074fa:	480c      	ldr	r0, [pc, #48]	; (800752c <prvInitialiseTaskLists+0x70>)
 80074fc:	f7fe fb32 	bl	8005b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007500:	480b      	ldr	r0, [pc, #44]	; (8007530 <prvInitialiseTaskLists+0x74>)
 8007502:	f7fe fb2f 	bl	8005b64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007506:	4b0b      	ldr	r3, [pc, #44]	; (8007534 <prvInitialiseTaskLists+0x78>)
 8007508:	4a05      	ldr	r2, [pc, #20]	; (8007520 <prvInitialiseTaskLists+0x64>)
 800750a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800750c:	4b0a      	ldr	r3, [pc, #40]	; (8007538 <prvInitialiseTaskLists+0x7c>)
 800750e:	4a05      	ldr	r2, [pc, #20]	; (8007524 <prvInitialiseTaskLists+0x68>)
 8007510:	601a      	str	r2, [r3, #0]
}
 8007512:	bf00      	nop
 8007514:	3708      	adds	r7, #8
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000c18 	.word	0x20000c18
 8007520:	20001078 	.word	0x20001078
 8007524:	2000108c 	.word	0x2000108c
 8007528:	200010a8 	.word	0x200010a8
 800752c:	200010bc 	.word	0x200010bc
 8007530:	200010d4 	.word	0x200010d4
 8007534:	200010a0 	.word	0x200010a0
 8007538:	200010a4 	.word	0x200010a4

0800753c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007542:	e019      	b.n	8007578 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007544:	f000 fdd6 	bl	80080f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007548:	4b10      	ldr	r3, [pc, #64]	; (800758c <prvCheckTasksWaitingTermination+0x50>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	3304      	adds	r3, #4
 8007554:	4618      	mov	r0, r3
 8007556:	f7fe fb8f 	bl	8005c78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800755a:	4b0d      	ldr	r3, [pc, #52]	; (8007590 <prvCheckTasksWaitingTermination+0x54>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3b01      	subs	r3, #1
 8007560:	4a0b      	ldr	r2, [pc, #44]	; (8007590 <prvCheckTasksWaitingTermination+0x54>)
 8007562:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007564:	4b0b      	ldr	r3, [pc, #44]	; (8007594 <prvCheckTasksWaitingTermination+0x58>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	3b01      	subs	r3, #1
 800756a:	4a0a      	ldr	r2, [pc, #40]	; (8007594 <prvCheckTasksWaitingTermination+0x58>)
 800756c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800756e:	f000 fdf1 	bl	8008154 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f810 	bl	8007598 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007578:	4b06      	ldr	r3, [pc, #24]	; (8007594 <prvCheckTasksWaitingTermination+0x58>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e1      	bne.n	8007544 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007580:	bf00      	nop
 8007582:	bf00      	nop
 8007584:	3708      	adds	r7, #8
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}
 800758a:	bf00      	nop
 800758c:	200010bc 	.word	0x200010bc
 8007590:	200010e8 	.word	0x200010e8
 8007594:	200010d0 	.word	0x200010d0

08007598 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	3354      	adds	r3, #84	; 0x54
 80075a4:	4618      	mov	r0, r3
 80075a6:	f001 faa5 	bl	8008af4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d108      	bne.n	80075c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	4618      	mov	r0, r3
 80075ba:	f000 ff89 	bl	80084d0 <vPortFree>
				vPortFree( pxTCB );
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 ff86 	bl	80084d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075c4:	e018      	b.n	80075f8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d103      	bne.n	80075d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 ff7d 	bl	80084d0 <vPortFree>
	}
 80075d6:	e00f      	b.n	80075f8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80075de:	2b02      	cmp	r3, #2
 80075e0:	d00a      	beq.n	80075f8 <prvDeleteTCB+0x60>
	__asm volatile
 80075e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e6:	f383 8811 	msr	BASEPRI, r3
 80075ea:	f3bf 8f6f 	isb	sy
 80075ee:	f3bf 8f4f 	dsb	sy
 80075f2:	60fb      	str	r3, [r7, #12]
}
 80075f4:	bf00      	nop
 80075f6:	e7fe      	b.n	80075f6 <prvDeleteTCB+0x5e>
	}
 80075f8:	bf00      	nop
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007606:	4b0c      	ldr	r3, [pc, #48]	; (8007638 <prvResetNextTaskUnblockTime+0x38>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d104      	bne.n	800761a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007610:	4b0a      	ldr	r3, [pc, #40]	; (800763c <prvResetNextTaskUnblockTime+0x3c>)
 8007612:	f04f 32ff 	mov.w	r2, #4294967295
 8007616:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007618:	e008      	b.n	800762c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800761a:	4b07      	ldr	r3, [pc, #28]	; (8007638 <prvResetNextTaskUnblockTime+0x38>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	68db      	ldr	r3, [r3, #12]
 8007622:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	4a04      	ldr	r2, [pc, #16]	; (800763c <prvResetNextTaskUnblockTime+0x3c>)
 800762a:	6013      	str	r3, [r2, #0]
}
 800762c:	bf00      	nop
 800762e:	370c      	adds	r7, #12
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	200010a0 	.word	0x200010a0
 800763c:	20001108 	.word	0x20001108

08007640 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007646:	4b0b      	ldr	r3, [pc, #44]	; (8007674 <xTaskGetSchedulerState+0x34>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d102      	bne.n	8007654 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800764e:	2301      	movs	r3, #1
 8007650:	607b      	str	r3, [r7, #4]
 8007652:	e008      	b.n	8007666 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007654:	4b08      	ldr	r3, [pc, #32]	; (8007678 <xTaskGetSchedulerState+0x38>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d102      	bne.n	8007662 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800765c:	2302      	movs	r3, #2
 800765e:	607b      	str	r3, [r7, #4]
 8007660:	e001      	b.n	8007666 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007662:	2300      	movs	r3, #0
 8007664:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007666:	687b      	ldr	r3, [r7, #4]
	}
 8007668:	4618      	mov	r0, r3
 800766a:	370c      	adds	r7, #12
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr
 8007674:	200010f4 	.word	0x200010f4
 8007678:	20001110 	.word	0x20001110

0800767c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007688:	2300      	movs	r3, #0
 800768a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d056      	beq.n	8007740 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007692:	4b2e      	ldr	r3, [pc, #184]	; (800774c <xTaskPriorityDisinherit+0xd0>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	429a      	cmp	r2, r3
 800769a:	d00a      	beq.n	80076b2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	60fb      	str	r3, [r7, #12]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d10a      	bne.n	80076d0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80076ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076be:	f383 8811 	msr	BASEPRI, r3
 80076c2:	f3bf 8f6f 	isb	sy
 80076c6:	f3bf 8f4f 	dsb	sy
 80076ca:	60bb      	str	r3, [r7, #8]
}
 80076cc:	bf00      	nop
 80076ce:	e7fe      	b.n	80076ce <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d4:	1e5a      	subs	r2, r3, #1
 80076d6:	693b      	ldr	r3, [r7, #16]
 80076d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d02c      	beq.n	8007740 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d128      	bne.n	8007740 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076ee:	693b      	ldr	r3, [r7, #16]
 80076f0:	3304      	adds	r3, #4
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7fe fac0 	bl	8005c78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007700:	693b      	ldr	r3, [r7, #16]
 8007702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007704:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <xTaskPriorityDisinherit+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <xTaskPriorityDisinherit+0xa4>
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	4a0c      	ldr	r2, [pc, #48]	; (8007750 <xTaskPriorityDisinherit+0xd4>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a09      	ldr	r2, [pc, #36]	; (8007754 <xTaskPriorityDisinherit+0xd8>)
 800772e:	441a      	add	r2, r3
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fe fa41 	bl	8005bbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800773c:	2301      	movs	r3, #1
 800773e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007740:	697b      	ldr	r3, [r7, #20]
	}
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	20000c14 	.word	0x20000c14
 8007750:	200010f0 	.word	0x200010f0
 8007754:	20000c18 	.word	0x20000c18

08007758 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007762:	4b21      	ldr	r3, [pc, #132]	; (80077e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007768:	4b20      	ldr	r3, [pc, #128]	; (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	3304      	adds	r3, #4
 800776e:	4618      	mov	r0, r3
 8007770:	f7fe fa82 	bl	8005c78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800777a:	d10a      	bne.n	8007792 <prvAddCurrentTaskToDelayedList+0x3a>
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d007      	beq.n	8007792 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007782:	4b1a      	ldr	r3, [pc, #104]	; (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	3304      	adds	r3, #4
 8007788:	4619      	mov	r1, r3
 800778a:	4819      	ldr	r0, [pc, #100]	; (80077f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800778c:	f7fe fa17 	bl	8005bbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007790:	e026      	b.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	4413      	add	r3, r2
 8007798:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800779a:	4b14      	ldr	r3, [pc, #80]	; (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68ba      	ldr	r2, [r7, #8]
 80077a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d209      	bcs.n	80077be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077aa:	4b12      	ldr	r3, [pc, #72]	; (80077f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	4b0f      	ldr	r3, [pc, #60]	; (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	3304      	adds	r3, #4
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fe fa25 	bl	8005c06 <vListInsert>
}
 80077bc:	e010      	b.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077be:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <prvAddCurrentTaskToDelayedList+0x94>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	3304      	adds	r3, #4
 80077c8:	4619      	mov	r1, r3
 80077ca:	4610      	mov	r0, r2
 80077cc:	f7fe fa1b 	bl	8005c06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68ba      	ldr	r2, [r7, #8]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d202      	bcs.n	80077e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077da:	4a08      	ldr	r2, [pc, #32]	; (80077fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	6013      	str	r3, [r2, #0]
}
 80077e0:	bf00      	nop
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	200010ec 	.word	0x200010ec
 80077ec:	20000c14 	.word	0x20000c14
 80077f0:	200010d4 	.word	0x200010d4
 80077f4:	200010a4 	.word	0x200010a4
 80077f8:	200010a0 	.word	0x200010a0
 80077fc:	20001108 	.word	0x20001108

08007800 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08a      	sub	sp, #40	; 0x28
 8007804:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007806:	2300      	movs	r3, #0
 8007808:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800780a:	f000 fb07 	bl	8007e1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800780e:	4b1c      	ldr	r3, [pc, #112]	; (8007880 <xTimerCreateTimerTask+0x80>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d021      	beq.n	800785a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007816:	2300      	movs	r3, #0
 8007818:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800781a:	2300      	movs	r3, #0
 800781c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800781e:	1d3a      	adds	r2, r7, #4
 8007820:	f107 0108 	add.w	r1, r7, #8
 8007824:	f107 030c 	add.w	r3, r7, #12
 8007828:	4618      	mov	r0, r3
 800782a:	f7fe f981 	bl	8005b30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800782e:	6879      	ldr	r1, [r7, #4]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	9202      	str	r2, [sp, #8]
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	2302      	movs	r3, #2
 800783a:	9300      	str	r3, [sp, #0]
 800783c:	2300      	movs	r3, #0
 800783e:	460a      	mov	r2, r1
 8007840:	4910      	ldr	r1, [pc, #64]	; (8007884 <xTimerCreateTimerTask+0x84>)
 8007842:	4811      	ldr	r0, [pc, #68]	; (8007888 <xTimerCreateTimerTask+0x88>)
 8007844:	f7ff f8f8 	bl	8006a38 <xTaskCreateStatic>
 8007848:	4603      	mov	r3, r0
 800784a:	4a10      	ldr	r2, [pc, #64]	; (800788c <xTimerCreateTimerTask+0x8c>)
 800784c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800784e:	4b0f      	ldr	r3, [pc, #60]	; (800788c <xTimerCreateTimerTask+0x8c>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007856:	2301      	movs	r3, #1
 8007858:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10a      	bne.n	8007876 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	613b      	str	r3, [r7, #16]
}
 8007872:	bf00      	nop
 8007874:	e7fe      	b.n	8007874 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007876:	697b      	ldr	r3, [r7, #20]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20001144 	.word	0x20001144
 8007884:	08009c2c 	.word	0x08009c2c
 8007888:	080079c5 	.word	0x080079c5
 800788c:	20001148 	.word	0x20001148

08007890 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	; 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800789e:	2300      	movs	r3, #0
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d10a      	bne.n	80078be <xTimerGenericCommand+0x2e>
	__asm volatile
 80078a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ac:	f383 8811 	msr	BASEPRI, r3
 80078b0:	f3bf 8f6f 	isb	sy
 80078b4:	f3bf 8f4f 	dsb	sy
 80078b8:	623b      	str	r3, [r7, #32]
}
 80078ba:	bf00      	nop
 80078bc:	e7fe      	b.n	80078bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078be:	4b1a      	ldr	r3, [pc, #104]	; (8007928 <xTimerGenericCommand+0x98>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d02a      	beq.n	800791c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b05      	cmp	r3, #5
 80078d6:	dc18      	bgt.n	800790a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80078d8:	f7ff feb2 	bl	8007640 <xTaskGetSchedulerState>
 80078dc:	4603      	mov	r3, r0
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d109      	bne.n	80078f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80078e2:	4b11      	ldr	r3, [pc, #68]	; (8007928 <xTimerGenericCommand+0x98>)
 80078e4:	6818      	ldr	r0, [r3, #0]
 80078e6:	f107 0110 	add.w	r1, r7, #16
 80078ea:	2300      	movs	r3, #0
 80078ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078ee:	f7fe fbe1 	bl	80060b4 <xQueueGenericSend>
 80078f2:	6278      	str	r0, [r7, #36]	; 0x24
 80078f4:	e012      	b.n	800791c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078f6:	4b0c      	ldr	r3, [pc, #48]	; (8007928 <xTimerGenericCommand+0x98>)
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	f107 0110 	add.w	r1, r7, #16
 80078fe:	2300      	movs	r3, #0
 8007900:	2200      	movs	r2, #0
 8007902:	f7fe fbd7 	bl	80060b4 <xQueueGenericSend>
 8007906:	6278      	str	r0, [r7, #36]	; 0x24
 8007908:	e008      	b.n	800791c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800790a:	4b07      	ldr	r3, [pc, #28]	; (8007928 <xTimerGenericCommand+0x98>)
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	f107 0110 	add.w	r1, r7, #16
 8007912:	2300      	movs	r3, #0
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	f7fe fccb 	bl	80062b0 <xQueueGenericSendFromISR>
 800791a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800791e:	4618      	mov	r0, r3
 8007920:	3728      	adds	r7, #40	; 0x28
 8007922:	46bd      	mov	sp, r7
 8007924:	bd80      	pop	{r7, pc}
 8007926:	bf00      	nop
 8007928:	20001144 	.word	0x20001144

0800792c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af02      	add	r7, sp, #8
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007936:	4b22      	ldr	r3, [pc, #136]	; (80079c0 <prvProcessExpiredTimer+0x94>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	3304      	adds	r3, #4
 8007944:	4618      	mov	r0, r3
 8007946:	f7fe f997 	bl	8005c78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007950:	f003 0304 	and.w	r3, r3, #4
 8007954:	2b00      	cmp	r3, #0
 8007956:	d022      	beq.n	800799e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	699a      	ldr	r2, [r3, #24]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	18d1      	adds	r1, r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	6978      	ldr	r0, [r7, #20]
 8007966:	f000 f8d1 	bl	8007b0c <prvInsertTimerInActiveList>
 800796a:	4603      	mov	r3, r0
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01f      	beq.n	80079b0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007970:	2300      	movs	r3, #0
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	2100      	movs	r1, #0
 800797a:	6978      	ldr	r0, [r7, #20]
 800797c:	f7ff ff88 	bl	8007890 <xTimerGenericCommand>
 8007980:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d113      	bne.n	80079b0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	60fb      	str	r3, [r7, #12]
}
 800799a:	bf00      	nop
 800799c:	e7fe      	b.n	800799c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079a4:	f023 0301 	bic.w	r3, r3, #1
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	6978      	ldr	r0, [r7, #20]
 80079b6:	4798      	blx	r3
}
 80079b8:	bf00      	nop
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	2000113c 	.word	0x2000113c

080079c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079cc:	f107 0308 	add.w	r3, r7, #8
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 f857 	bl	8007a84 <prvGetNextExpireTime>
 80079d6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	4619      	mov	r1, r3
 80079dc:	68f8      	ldr	r0, [r7, #12]
 80079de:	f000 f803 	bl	80079e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80079e2:	f000 f8d5 	bl	8007b90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079e6:	e7f1      	b.n	80079cc <prvTimerTask+0x8>

080079e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80079f2:	f7ff fa39 	bl	8006e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079f6:	f107 0308 	add.w	r3, r7, #8
 80079fa:	4618      	mov	r0, r3
 80079fc:	f000 f866 	bl	8007acc <prvSampleTimeNow>
 8007a00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d130      	bne.n	8007a6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <prvProcessTimerOrBlockTask+0x3c>
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d806      	bhi.n	8007a24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a16:	f7ff fa35 	bl	8006e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f7ff ff85 	bl	800792c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a22:	e024      	b.n	8007a6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d008      	beq.n	8007a3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <prvProcessTimerOrBlockTask+0x90>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d101      	bne.n	8007a38 <prvProcessTimerOrBlockTask+0x50>
 8007a34:	2301      	movs	r3, #1
 8007a36:	e000      	b.n	8007a3a <prvProcessTimerOrBlockTask+0x52>
 8007a38:	2300      	movs	r3, #0
 8007a3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a3c:	4b0f      	ldr	r3, [pc, #60]	; (8007a7c <prvProcessTimerOrBlockTask+0x94>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	687a      	ldr	r2, [r7, #4]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	1ad3      	subs	r3, r2, r3
 8007a46:	683a      	ldr	r2, [r7, #0]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	f7fe ffc1 	bl	80069d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a4e:	f7ff fa19 	bl	8006e84 <xTaskResumeAll>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d10a      	bne.n	8007a6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a58:	4b09      	ldr	r3, [pc, #36]	; (8007a80 <prvProcessTimerOrBlockTask+0x98>)
 8007a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a5e:	601a      	str	r2, [r3, #0]
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	f3bf 8f6f 	isb	sy
}
 8007a68:	e001      	b.n	8007a6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a6a:	f7ff fa0b 	bl	8006e84 <xTaskResumeAll>
}
 8007a6e:	bf00      	nop
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20001140 	.word	0x20001140
 8007a7c:	20001144 	.word	0x20001144
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b085      	sub	sp, #20
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a8c:	4b0e      	ldr	r3, [pc, #56]	; (8007ac8 <prvGetNextExpireTime+0x44>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <prvGetNextExpireTime+0x16>
 8007a96:	2201      	movs	r2, #1
 8007a98:	e000      	b.n	8007a9c <prvGetNextExpireTime+0x18>
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d105      	bne.n	8007ab4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007aa8:	4b07      	ldr	r3, [pc, #28]	; (8007ac8 <prvGetNextExpireTime+0x44>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	e001      	b.n	8007ab8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3714      	adds	r7, #20
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	2000113c 	.word	0x2000113c

08007acc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ad4:	f7ff fa74 	bl	8006fc0 <xTaskGetTickCount>
 8007ad8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ada:	4b0b      	ldr	r3, [pc, #44]	; (8007b08 <prvSampleTimeNow+0x3c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	68fa      	ldr	r2, [r7, #12]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d205      	bcs.n	8007af0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ae4:	f000 f936 	bl	8007d54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2201      	movs	r2, #1
 8007aec:	601a      	str	r2, [r3, #0]
 8007aee:	e002      	b.n	8007af6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007af6:	4a04      	ldr	r2, [pc, #16]	; (8007b08 <prvSampleTimeNow+0x3c>)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007afc:	68fb      	ldr	r3, [r7, #12]
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3710      	adds	r7, #16
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}
 8007b06:	bf00      	nop
 8007b08:	2000114c 	.word	0x2000114c

08007b0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b086      	sub	sp, #24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
 8007b18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	68ba      	ldr	r2, [r7, #8]
 8007b22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	68fa      	ldr	r2, [r7, #12]
 8007b28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b2a:	68ba      	ldr	r2, [r7, #8]
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d812      	bhi.n	8007b58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	1ad2      	subs	r2, r2, r3
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d302      	bcc.n	8007b46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b40:	2301      	movs	r3, #1
 8007b42:	617b      	str	r3, [r7, #20]
 8007b44:	e01b      	b.n	8007b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b46:	4b10      	ldr	r3, [pc, #64]	; (8007b88 <prvInsertTimerInActiveList+0x7c>)
 8007b48:	681a      	ldr	r2, [r3, #0]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4619      	mov	r1, r3
 8007b50:	4610      	mov	r0, r2
 8007b52:	f7fe f858 	bl	8005c06 <vListInsert>
 8007b56:	e012      	b.n	8007b7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	429a      	cmp	r2, r3
 8007b5e:	d206      	bcs.n	8007b6e <prvInsertTimerInActiveList+0x62>
 8007b60:	68ba      	ldr	r2, [r7, #8]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d302      	bcc.n	8007b6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	617b      	str	r3, [r7, #20]
 8007b6c:	e007      	b.n	8007b7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b6e:	4b07      	ldr	r3, [pc, #28]	; (8007b8c <prvInsertTimerInActiveList+0x80>)
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3304      	adds	r3, #4
 8007b76:	4619      	mov	r1, r3
 8007b78:	4610      	mov	r0, r2
 8007b7a:	f7fe f844 	bl	8005c06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b7e:	697b      	ldr	r3, [r7, #20]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	20001140 	.word	0x20001140
 8007b8c:	2000113c 	.word	0x2000113c

08007b90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	; 0x38
 8007b94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b96:	e0ca      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	da18      	bge.n	8007bd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b9e:	1d3b      	adds	r3, r7, #4
 8007ba0:	3304      	adds	r3, #4
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10a      	bne.n	8007bc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bae:	f383 8811 	msr	BASEPRI, r3
 8007bb2:	f3bf 8f6f 	isb	sy
 8007bb6:	f3bf 8f4f 	dsb	sy
 8007bba:	61fb      	str	r3, [r7, #28]
}
 8007bbc:	bf00      	nop
 8007bbe:	e7fe      	b.n	8007bbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bc6:	6850      	ldr	r0, [r2, #4]
 8007bc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bca:	6892      	ldr	r2, [r2, #8]
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f2c0 80aa 	blt.w	8007d2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bde:	695b      	ldr	r3, [r3, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007be6:	3304      	adds	r3, #4
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe f845 	bl	8005c78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007bee:	463b      	mov	r3, r7
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f7ff ff6b 	bl	8007acc <prvSampleTimeNow>
 8007bf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2b09      	cmp	r3, #9
 8007bfc:	f200 8097 	bhi.w	8007d2e <prvProcessReceivedCommands+0x19e>
 8007c00:	a201      	add	r2, pc, #4	; (adr r2, 8007c08 <prvProcessReceivedCommands+0x78>)
 8007c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c06:	bf00      	nop
 8007c08:	08007c31 	.word	0x08007c31
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c31 	.word	0x08007c31
 8007c14:	08007ca5 	.word	0x08007ca5
 8007c18:	08007cb9 	.word	0x08007cb9
 8007c1c:	08007d03 	.word	0x08007d03
 8007c20:	08007c31 	.word	0x08007c31
 8007c24:	08007c31 	.word	0x08007c31
 8007c28:	08007ca5 	.word	0x08007ca5
 8007c2c:	08007cb9 	.word	0x08007cb9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c36:	f043 0301 	orr.w	r3, r3, #1
 8007c3a:	b2da      	uxtb	r2, r3
 8007c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c46:	699b      	ldr	r3, [r3, #24]
 8007c48:	18d1      	adds	r1, r2, r3
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c50:	f7ff ff5c 	bl	8007b0c <prvInsertTimerInActiveList>
 8007c54:	4603      	mov	r3, r0
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d069      	beq.n	8007d2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c68:	f003 0304 	and.w	r3, r3, #4
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d05e      	beq.n	8007d2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	441a      	add	r2, r3
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9300      	str	r3, [sp, #0]
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2100      	movs	r1, #0
 8007c80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c82:	f7ff fe05 	bl	8007890 <xTimerGenericCommand>
 8007c86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d14f      	bne.n	8007d2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	61bb      	str	r3, [r7, #24]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007cb6:	e03a      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10a      	bne.n	8007cee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cdc:	f383 8811 	msr	BASEPRI, r3
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	f3bf 8f4f 	dsb	sy
 8007ce8:	617b      	str	r3, [r7, #20]
}
 8007cea:	bf00      	nop
 8007cec:	e7fe      	b.n	8007cec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf0:	699a      	ldr	r2, [r3, #24]
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	18d1      	adds	r1, r2, r3
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007cfc:	f7ff ff06 	bl	8007b0c <prvInsertTimerInActiveList>
					break;
 8007d00:	e015      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d08:	f003 0302 	and.w	r3, r3, #2
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d103      	bne.n	8007d18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007d10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d12:	f000 fbdd 	bl	80084d0 <vPortFree>
 8007d16:	e00a      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d1e:	f023 0301 	bic.w	r3, r3, #1
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d2a:	e000      	b.n	8007d2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d2e:	4b08      	ldr	r3, [pc, #32]	; (8007d50 <prvProcessReceivedCommands+0x1c0>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	1d39      	adds	r1, r7, #4
 8007d34:	2200      	movs	r2, #0
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7fe fbe2 	bl	8006500 <xQueueReceive>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f47f af2a 	bne.w	8007b98 <prvProcessReceivedCommands+0x8>
	}
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	3730      	adds	r7, #48	; 0x30
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	20001144 	.word	0x20001144

08007d54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b088      	sub	sp, #32
 8007d58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d5a:	e048      	b.n	8007dee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d5c:	4b2d      	ldr	r3, [pc, #180]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68db      	ldr	r3, [r3, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d66:	4b2b      	ldr	r3, [pc, #172]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	68db      	ldr	r3, [r3, #12]
 8007d6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	3304      	adds	r3, #4
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7fd ff7f 	bl	8005c78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6a1b      	ldr	r3, [r3, #32]
 8007d7e:	68f8      	ldr	r0, [r7, #12]
 8007d80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d88:	f003 0304 	and.w	r3, r3, #4
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d02e      	beq.n	8007dee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	699b      	ldr	r3, [r3, #24]
 8007d94:	693a      	ldr	r2, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	429a      	cmp	r2, r3
 8007da0:	d90e      	bls.n	8007dc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dae:	4b19      	ldr	r3, [pc, #100]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	3304      	adds	r3, #4
 8007db6:	4619      	mov	r1, r3
 8007db8:	4610      	mov	r0, r2
 8007dba:	f7fd ff24 	bl	8005c06 <vListInsert>
 8007dbe:	e016      	b.n	8007dee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	9300      	str	r3, [sp, #0]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	693a      	ldr	r2, [r7, #16]
 8007dc8:	2100      	movs	r1, #0
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	f7ff fd60 	bl	8007890 <xTimerGenericCommand>
 8007dd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	603b      	str	r3, [r7, #0]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dee:	4b09      	ldr	r3, [pc, #36]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1b1      	bne.n	8007d5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007df8:	4b06      	ldr	r3, [pc, #24]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dfe:	4b06      	ldr	r3, [pc, #24]	; (8007e18 <prvSwitchTimerLists+0xc4>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a04      	ldr	r2, [pc, #16]	; (8007e14 <prvSwitchTimerLists+0xc0>)
 8007e04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e06:	4a04      	ldr	r2, [pc, #16]	; (8007e18 <prvSwitchTimerLists+0xc4>)
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	6013      	str	r3, [r2, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	3718      	adds	r7, #24
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	2000113c 	.word	0x2000113c
 8007e18:	20001140 	.word	0x20001140

08007e1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e22:	f000 f967 	bl	80080f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e26:	4b15      	ldr	r3, [pc, #84]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d120      	bne.n	8007e70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e2e:	4814      	ldr	r0, [pc, #80]	; (8007e80 <prvCheckForValidListAndQueue+0x64>)
 8007e30:	f7fd fe98 	bl	8005b64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e34:	4813      	ldr	r0, [pc, #76]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e36:	f7fd fe95 	bl	8005b64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e3a:	4b13      	ldr	r3, [pc, #76]	; (8007e88 <prvCheckForValidListAndQueue+0x6c>)
 8007e3c:	4a10      	ldr	r2, [pc, #64]	; (8007e80 <prvCheckForValidListAndQueue+0x64>)
 8007e3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e40:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <prvCheckForValidListAndQueue+0x70>)
 8007e42:	4a10      	ldr	r2, [pc, #64]	; (8007e84 <prvCheckForValidListAndQueue+0x68>)
 8007e44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e46:	2300      	movs	r3, #0
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4b11      	ldr	r3, [pc, #68]	; (8007e90 <prvCheckForValidListAndQueue+0x74>)
 8007e4c:	4a11      	ldr	r2, [pc, #68]	; (8007e94 <prvCheckForValidListAndQueue+0x78>)
 8007e4e:	2110      	movs	r1, #16
 8007e50:	200a      	movs	r0, #10
 8007e52:	f7fd ffa3 	bl	8005d9c <xQueueGenericCreateStatic>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4a08      	ldr	r2, [pc, #32]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <prvCheckForValidListAndQueue+0x60>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	490b      	ldr	r1, [pc, #44]	; (8007e98 <prvCheckForValidListAndQueue+0x7c>)
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f7fe fd5c 	bl	8006928 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e70:	f000 f970 	bl	8008154 <vPortExitCritical>
}
 8007e74:	bf00      	nop
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	20001144 	.word	0x20001144
 8007e80:	20001114 	.word	0x20001114
 8007e84:	20001128 	.word	0x20001128
 8007e88:	2000113c 	.word	0x2000113c
 8007e8c:	20001140 	.word	0x20001140
 8007e90:	200011f0 	.word	0x200011f0
 8007e94:	20001150 	.word	0x20001150
 8007e98:	08009c34 	.word	0x08009c34

08007e9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b04      	subs	r3, #4
 8007eac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007eb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	3b04      	subs	r3, #4
 8007eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	f023 0201 	bic.w	r2, r3, #1
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b04      	subs	r3, #4
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ecc:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <pxPortInitialiseStack+0x64>)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b14      	subs	r3, #20
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3b04      	subs	r3, #4
 8007ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f06f 0202 	mvn.w	r2, #2
 8007eea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	3b20      	subs	r3, #32
 8007ef0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3714      	adds	r7, #20
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efe:	4770      	bx	lr
 8007f00:	08007f05 	.word	0x08007f05

08007f04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f0e:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <prvTaskExitError+0x54>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f16:	d00a      	beq.n	8007f2e <prvTaskExitError+0x2a>
	__asm volatile
 8007f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f1c:	f383 8811 	msr	BASEPRI, r3
 8007f20:	f3bf 8f6f 	isb	sy
 8007f24:	f3bf 8f4f 	dsb	sy
 8007f28:	60fb      	str	r3, [r7, #12]
}
 8007f2a:	bf00      	nop
 8007f2c:	e7fe      	b.n	8007f2c <prvTaskExitError+0x28>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	60bb      	str	r3, [r7, #8]
}
 8007f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f42:	bf00      	nop
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d0fc      	beq.n	8007f44 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f4a:	bf00      	nop
 8007f4c:	bf00      	nop
 8007f4e:	3714      	adds	r7, #20
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr
 8007f58:	20000014 	.word	0x20000014
 8007f5c:	00000000 	.word	0x00000000

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	4770      	bx	lr
 8007f7c:	f3af 8000 	nop.w

08007f80 <pxCurrentTCBConst2>:
 8007f80:	20000c14 	.word	0x20000c14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f88:	4808      	ldr	r0, [pc, #32]	; (8007fac <prvPortStartFirstTask+0x24>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8814 	msr	CONTROL, r0
 8007f9a:	b662      	cpsie	i
 8007f9c:	b661      	cpsie	f
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	df00      	svc	0
 8007fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007faa:	bf00      	nop
 8007fac:	e000ed08 	.word	0xe000ed08

08007fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fb6:	4b46      	ldr	r3, [pc, #280]	; (80080d0 <xPortStartScheduler+0x120>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a46      	ldr	r2, [pc, #280]	; (80080d4 <xPortStartScheduler+0x124>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10a      	bne.n	8007fd6 <xPortStartScheduler+0x26>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	613b      	str	r3, [r7, #16]
}
 8007fd2:	bf00      	nop
 8007fd4:	e7fe      	b.n	8007fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fd6:	4b3e      	ldr	r3, [pc, #248]	; (80080d0 <xPortStartScheduler+0x120>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a3f      	ldr	r2, [pc, #252]	; (80080d8 <xPortStartScheduler+0x128>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10a      	bne.n	8007ff6 <xPortStartScheduler+0x46>
	__asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	60fb      	str	r3, [r7, #12]
}
 8007ff2:	bf00      	nop
 8007ff4:	e7fe      	b.n	8007ff4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ff6:	4b39      	ldr	r3, [pc, #228]	; (80080dc <xPortStartScheduler+0x12c>)
 8007ff8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	22ff      	movs	r2, #255	; 0xff
 8008006:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	b2db      	uxtb	r3, r3
 800800e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	b2db      	uxtb	r3, r3
 8008014:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008018:	b2da      	uxtb	r2, r3
 800801a:	4b31      	ldr	r3, [pc, #196]	; (80080e0 <xPortStartScheduler+0x130>)
 800801c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800801e:	4b31      	ldr	r3, [pc, #196]	; (80080e4 <xPortStartScheduler+0x134>)
 8008020:	2207      	movs	r2, #7
 8008022:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008024:	e009      	b.n	800803a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008026:	4b2f      	ldr	r3, [pc, #188]	; (80080e4 <xPortStartScheduler+0x134>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3b01      	subs	r3, #1
 800802c:	4a2d      	ldr	r2, [pc, #180]	; (80080e4 <xPortStartScheduler+0x134>)
 800802e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	b2db      	uxtb	r3, r3
 8008038:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800803a:	78fb      	ldrb	r3, [r7, #3]
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008042:	2b80      	cmp	r3, #128	; 0x80
 8008044:	d0ef      	beq.n	8008026 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008046:	4b27      	ldr	r3, [pc, #156]	; (80080e4 <xPortStartScheduler+0x134>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f1c3 0307 	rsb	r3, r3, #7
 800804e:	2b04      	cmp	r3, #4
 8008050:	d00a      	beq.n	8008068 <xPortStartScheduler+0xb8>
	__asm volatile
 8008052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008056:	f383 8811 	msr	BASEPRI, r3
 800805a:	f3bf 8f6f 	isb	sy
 800805e:	f3bf 8f4f 	dsb	sy
 8008062:	60bb      	str	r3, [r7, #8]
}
 8008064:	bf00      	nop
 8008066:	e7fe      	b.n	8008066 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008068:	4b1e      	ldr	r3, [pc, #120]	; (80080e4 <xPortStartScheduler+0x134>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	021b      	lsls	r3, r3, #8
 800806e:	4a1d      	ldr	r2, [pc, #116]	; (80080e4 <xPortStartScheduler+0x134>)
 8008070:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008072:	4b1c      	ldr	r3, [pc, #112]	; (80080e4 <xPortStartScheduler+0x134>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800807a:	4a1a      	ldr	r2, [pc, #104]	; (80080e4 <xPortStartScheduler+0x134>)
 800807c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	b2da      	uxtb	r2, r3
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008086:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <xPortStartScheduler+0x138>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	4a17      	ldr	r2, [pc, #92]	; (80080e8 <xPortStartScheduler+0x138>)
 800808c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008090:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <xPortStartScheduler+0x138>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	4a14      	ldr	r2, [pc, #80]	; (80080e8 <xPortStartScheduler+0x138>)
 8008098:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800809c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800809e:	f000 f8dd 	bl	800825c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080a2:	4b12      	ldr	r3, [pc, #72]	; (80080ec <xPortStartScheduler+0x13c>)
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080a8:	f000 f8fc 	bl	80082a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080ac:	4b10      	ldr	r3, [pc, #64]	; (80080f0 <xPortStartScheduler+0x140>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a0f      	ldr	r2, [pc, #60]	; (80080f0 <xPortStartScheduler+0x140>)
 80080b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80080b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080b8:	f7ff ff66 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080bc:	f7ff f84a 	bl	8007154 <vTaskSwitchContext>
	prvTaskExitError();
 80080c0:	f7ff ff20 	bl	8007f04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080c4:	2300      	movs	r3, #0
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3718      	adds	r7, #24
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	e000ed00 	.word	0xe000ed00
 80080d4:	410fc271 	.word	0x410fc271
 80080d8:	410fc270 	.word	0x410fc270
 80080dc:	e000e400 	.word	0xe000e400
 80080e0:	20001240 	.word	0x20001240
 80080e4:	20001244 	.word	0x20001244
 80080e8:	e000ed20 	.word	0xe000ed20
 80080ec:	20000014 	.word	0x20000014
 80080f0:	e000ef34 	.word	0xe000ef34

080080f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
	__asm volatile
 80080fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080fe:	f383 8811 	msr	BASEPRI, r3
 8008102:	f3bf 8f6f 	isb	sy
 8008106:	f3bf 8f4f 	dsb	sy
 800810a:	607b      	str	r3, [r7, #4]
}
 800810c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800810e:	4b0f      	ldr	r3, [pc, #60]	; (800814c <vPortEnterCritical+0x58>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	3301      	adds	r3, #1
 8008114:	4a0d      	ldr	r2, [pc, #52]	; (800814c <vPortEnterCritical+0x58>)
 8008116:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008118:	4b0c      	ldr	r3, [pc, #48]	; (800814c <vPortEnterCritical+0x58>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d10f      	bne.n	8008140 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008120:	4b0b      	ldr	r3, [pc, #44]	; (8008150 <vPortEnterCritical+0x5c>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00a      	beq.n	8008140 <vPortEnterCritical+0x4c>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	603b      	str	r3, [r7, #0]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <vPortEnterCritical+0x4a>
	}
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr
 800814c:	20000014 	.word	0x20000014
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008154:	b480      	push	{r7}
 8008156:	b083      	sub	sp, #12
 8008158:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800815a:	4b12      	ldr	r3, [pc, #72]	; (80081a4 <vPortExitCritical+0x50>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10a      	bne.n	8008178 <vPortExitCritical+0x24>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	607b      	str	r3, [r7, #4]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008178:	4b0a      	ldr	r3, [pc, #40]	; (80081a4 <vPortExitCritical+0x50>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	3b01      	subs	r3, #1
 800817e:	4a09      	ldr	r2, [pc, #36]	; (80081a4 <vPortExitCritical+0x50>)
 8008180:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008182:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <vPortExitCritical+0x50>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d105      	bne.n	8008196 <vPortExitCritical+0x42>
 800818a:	2300      	movs	r3, #0
 800818c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	f383 8811 	msr	BASEPRI, r3
}
 8008194:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008196:	bf00      	nop
 8008198:	370c      	adds	r7, #12
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	20000014 	.word	0x20000014
	...

080081b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081b0:	f3ef 8009 	mrs	r0, PSP
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4b15      	ldr	r3, [pc, #84]	; (8008210 <pxCurrentTCBConst>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	f01e 0f10 	tst.w	lr, #16
 80081c0:	bf08      	it	eq
 80081c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	6010      	str	r0, [r2, #0]
 80081cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80081d4:	f380 8811 	msr	BASEPRI, r0
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f7fe ffb8 	bl	8007154 <vTaskSwitchContext>
 80081e4:	f04f 0000 	mov.w	r0, #0
 80081e8:	f380 8811 	msr	BASEPRI, r0
 80081ec:	bc09      	pop	{r0, r3}
 80081ee:	6819      	ldr	r1, [r3, #0]
 80081f0:	6808      	ldr	r0, [r1, #0]
 80081f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f6:	f01e 0f10 	tst.w	lr, #16
 80081fa:	bf08      	it	eq
 80081fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008200:	f380 8809 	msr	PSP, r0
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst>:
 8008210:	20000c14 	.word	0x20000c14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
}
 8008230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008232:	f7fe fed5 	bl	8006fe0 <xTaskIncrementTick>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800823c:	4b06      	ldr	r3, [pc, #24]	; (8008258 <xPortSysTickHandler+0x40>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f383 8811 	msr	BASEPRI, r3
}
 800824e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008260:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <vPortSetupTimerInterrupt+0x34>)
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008266:	4b0b      	ldr	r3, [pc, #44]	; (8008294 <vPortSetupTimerInterrupt+0x38>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <vPortSetupTimerInterrupt+0x3c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0a      	ldr	r2, [pc, #40]	; (800829c <vPortSetupTimerInterrupt+0x40>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	095b      	lsrs	r3, r3, #5
 8008278:	4a09      	ldr	r2, [pc, #36]	; (80082a0 <vPortSetupTimerInterrupt+0x44>)
 800827a:	3b01      	subs	r3, #1
 800827c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800827e:	4b04      	ldr	r3, [pc, #16]	; (8008290 <vPortSetupTimerInterrupt+0x34>)
 8008280:	2207      	movs	r2, #7
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	e000e010 	.word	0xe000e010
 8008294:	e000e018 	.word	0xe000e018
 8008298:	20000008 	.word	0x20000008
 800829c:	10624dd3 	.word	0x10624dd3
 80082a0:	e000e014 	.word	0xe000e014

080082a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80082b4 <vPortEnableVFP+0x10>
 80082a8:	6801      	ldr	r1, [r0, #0]
 80082aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082ae:	6001      	str	r1, [r0, #0]
 80082b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082b2:	bf00      	nop
 80082b4:	e000ed88 	.word	0xe000ed88

080082b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082be:	f3ef 8305 	mrs	r3, IPSR
 80082c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b0f      	cmp	r3, #15
 80082c8:	d914      	bls.n	80082f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ca:	4a17      	ldr	r2, [pc, #92]	; (8008328 <vPortValidateInterruptPriority+0x70>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082d4:	4b15      	ldr	r3, [pc, #84]	; (800832c <vPortValidateInterruptPriority+0x74>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	7afa      	ldrb	r2, [r7, #11]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d20a      	bcs.n	80082f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
}
 80082f0:	bf00      	nop
 80082f2:	e7fe      	b.n	80082f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082f4:	4b0e      	ldr	r3, [pc, #56]	; (8008330 <vPortValidateInterruptPriority+0x78>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80082fc:	4b0d      	ldr	r3, [pc, #52]	; (8008334 <vPortValidateInterruptPriority+0x7c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	429a      	cmp	r2, r3
 8008302:	d90a      	bls.n	800831a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	603b      	str	r3, [r7, #0]
}
 8008316:	bf00      	nop
 8008318:	e7fe      	b.n	8008318 <vPortValidateInterruptPriority+0x60>
	}
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	e000e3f0 	.word	0xe000e3f0
 800832c:	20001240 	.word	0x20001240
 8008330:	e000ed0c 	.word	0xe000ed0c
 8008334:	20001244 	.word	0x20001244

08008338 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	; 0x28
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008340:	2300      	movs	r3, #0
 8008342:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008344:	f7fe fd90 	bl	8006e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008348:	4b5b      	ldr	r3, [pc, #364]	; (80084b8 <pvPortMalloc+0x180>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d101      	bne.n	8008354 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008350:	f000 f920 	bl	8008594 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008354:	4b59      	ldr	r3, [pc, #356]	; (80084bc <pvPortMalloc+0x184>)
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4013      	ands	r3, r2
 800835c:	2b00      	cmp	r3, #0
 800835e:	f040 8093 	bne.w	8008488 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d01d      	beq.n	80083a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008368:	2208      	movs	r2, #8
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4413      	add	r3, r2
 800836e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f003 0307 	and.w	r3, r3, #7
 8008376:	2b00      	cmp	r3, #0
 8008378:	d014      	beq.n	80083a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f023 0307 	bic.w	r3, r3, #7
 8008380:	3308      	adds	r3, #8
 8008382:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f003 0307 	and.w	r3, r3, #7
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00a      	beq.n	80083a4 <pvPortMalloc+0x6c>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	617b      	str	r3, [r7, #20]
}
 80083a0:	bf00      	nop
 80083a2:	e7fe      	b.n	80083a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d06e      	beq.n	8008488 <pvPortMalloc+0x150>
 80083aa:	4b45      	ldr	r3, [pc, #276]	; (80084c0 <pvPortMalloc+0x188>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	429a      	cmp	r2, r3
 80083b2:	d869      	bhi.n	8008488 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083b4:	4b43      	ldr	r3, [pc, #268]	; (80084c4 <pvPortMalloc+0x18c>)
 80083b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083b8:	4b42      	ldr	r3, [pc, #264]	; (80084c4 <pvPortMalloc+0x18c>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083be:	e004      	b.n	80083ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80083c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d903      	bls.n	80083dc <pvPortMalloc+0xa4>
 80083d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1f1      	bne.n	80083c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083dc:	4b36      	ldr	r3, [pc, #216]	; (80084b8 <pvPortMalloc+0x180>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d050      	beq.n	8008488 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083e6:	6a3b      	ldr	r3, [r7, #32]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2208      	movs	r2, #8
 80083ec:	4413      	add	r3, r2
 80083ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	6a3b      	ldr	r3, [r7, #32]
 80083f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	685a      	ldr	r2, [r3, #4]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	1ad2      	subs	r2, r2, r3
 8008400:	2308      	movs	r3, #8
 8008402:	005b      	lsls	r3, r3, #1
 8008404:	429a      	cmp	r2, r3
 8008406:	d91f      	bls.n	8008448 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	f003 0307 	and.w	r3, r3, #7
 8008416:	2b00      	cmp	r3, #0
 8008418:	d00a      	beq.n	8008430 <pvPortMalloc+0xf8>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	613b      	str	r3, [r7, #16]
}
 800842c:	bf00      	nop
 800842e:	e7fe      	b.n	800842e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	685a      	ldr	r2, [r3, #4]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	1ad2      	subs	r2, r2, r3
 8008438:	69bb      	ldr	r3, [r7, #24]
 800843a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	687a      	ldr	r2, [r7, #4]
 8008440:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008442:	69b8      	ldr	r0, [r7, #24]
 8008444:	f000 f908 	bl	8008658 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008448:	4b1d      	ldr	r3, [pc, #116]	; (80084c0 <pvPortMalloc+0x188>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	4a1b      	ldr	r2, [pc, #108]	; (80084c0 <pvPortMalloc+0x188>)
 8008454:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008456:	4b1a      	ldr	r3, [pc, #104]	; (80084c0 <pvPortMalloc+0x188>)
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	4b1b      	ldr	r3, [pc, #108]	; (80084c8 <pvPortMalloc+0x190>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	429a      	cmp	r2, r3
 8008460:	d203      	bcs.n	800846a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008462:	4b17      	ldr	r3, [pc, #92]	; (80084c0 <pvPortMalloc+0x188>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a18      	ldr	r2, [pc, #96]	; (80084c8 <pvPortMalloc+0x190>)
 8008468:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	685a      	ldr	r2, [r3, #4]
 800846e:	4b13      	ldr	r3, [pc, #76]	; (80084bc <pvPortMalloc+0x184>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	431a      	orrs	r2, r3
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847a:	2200      	movs	r2, #0
 800847c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800847e:	4b13      	ldr	r3, [pc, #76]	; (80084cc <pvPortMalloc+0x194>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	3301      	adds	r3, #1
 8008484:	4a11      	ldr	r2, [pc, #68]	; (80084cc <pvPortMalloc+0x194>)
 8008486:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008488:	f7fe fcfc 	bl	8006e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f003 0307 	and.w	r3, r3, #7
 8008492:	2b00      	cmp	r3, #0
 8008494:	d00a      	beq.n	80084ac <pvPortMalloc+0x174>
	__asm volatile
 8008496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800849a:	f383 8811 	msr	BASEPRI, r3
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	f3bf 8f4f 	dsb	sy
 80084a6:	60fb      	str	r3, [r7, #12]
}
 80084a8:	bf00      	nop
 80084aa:	e7fe      	b.n	80084aa <pvPortMalloc+0x172>
	return pvReturn;
 80084ac:	69fb      	ldr	r3, [r7, #28]
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3728      	adds	r7, #40	; 0x28
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	20004e50 	.word	0x20004e50
 80084bc:	20004e64 	.word	0x20004e64
 80084c0:	20004e54 	.word	0x20004e54
 80084c4:	20004e48 	.word	0x20004e48
 80084c8:	20004e58 	.word	0x20004e58
 80084cc:	20004e5c 	.word	0x20004e5c

080084d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b086      	sub	sp, #24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d04d      	beq.n	800857e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084e2:	2308      	movs	r3, #8
 80084e4:	425b      	negs	r3, r3
 80084e6:	697a      	ldr	r2, [r7, #20]
 80084e8:	4413      	add	r3, r2
 80084ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	685a      	ldr	r2, [r3, #4]
 80084f4:	4b24      	ldr	r3, [pc, #144]	; (8008588 <vPortFree+0xb8>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4013      	ands	r3, r2
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d10a      	bne.n	8008514 <vPortFree+0x44>
	__asm volatile
 80084fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008502:	f383 8811 	msr	BASEPRI, r3
 8008506:	f3bf 8f6f 	isb	sy
 800850a:	f3bf 8f4f 	dsb	sy
 800850e:	60fb      	str	r3, [r7, #12]
}
 8008510:	bf00      	nop
 8008512:	e7fe      	b.n	8008512 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d00a      	beq.n	8008532 <vPortFree+0x62>
	__asm volatile
 800851c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	60bb      	str	r3, [r7, #8]
}
 800852e:	bf00      	nop
 8008530:	e7fe      	b.n	8008530 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	4b14      	ldr	r3, [pc, #80]	; (8008588 <vPortFree+0xb8>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4013      	ands	r3, r2
 800853c:	2b00      	cmp	r3, #0
 800853e:	d01e      	beq.n	800857e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008540:	693b      	ldr	r3, [r7, #16]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d11a      	bne.n	800857e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	685a      	ldr	r2, [r3, #4]
 800854c:	4b0e      	ldr	r3, [pc, #56]	; (8008588 <vPortFree+0xb8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	43db      	mvns	r3, r3
 8008552:	401a      	ands	r2, r3
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008558:	f7fe fc86 	bl	8006e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	4b0a      	ldr	r3, [pc, #40]	; (800858c <vPortFree+0xbc>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4413      	add	r3, r2
 8008566:	4a09      	ldr	r2, [pc, #36]	; (800858c <vPortFree+0xbc>)
 8008568:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800856a:	6938      	ldr	r0, [r7, #16]
 800856c:	f000 f874 	bl	8008658 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <vPortFree+0xc0>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	3301      	adds	r3, #1
 8008576:	4a06      	ldr	r2, [pc, #24]	; (8008590 <vPortFree+0xc0>)
 8008578:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800857a:	f7fe fc83 	bl	8006e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800857e:	bf00      	nop
 8008580:	3718      	adds	r7, #24
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20004e64 	.word	0x20004e64
 800858c:	20004e54 	.word	0x20004e54
 8008590:	20004e60 	.word	0x20004e60

08008594 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800859a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800859e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085a0:	4b27      	ldr	r3, [pc, #156]	; (8008640 <prvHeapInit+0xac>)
 80085a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00c      	beq.n	80085c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3307      	adds	r3, #7
 80085b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f023 0307 	bic.w	r3, r3, #7
 80085ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	4a1f      	ldr	r2, [pc, #124]	; (8008640 <prvHeapInit+0xac>)
 80085c4:	4413      	add	r3, r2
 80085c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085cc:	4a1d      	ldr	r2, [pc, #116]	; (8008644 <prvHeapInit+0xb0>)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085d2:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <prvHeapInit+0xb0>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	4413      	add	r3, r2
 80085de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085e0:	2208      	movs	r2, #8
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	1a9b      	subs	r3, r3, r2
 80085e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 0307 	bic.w	r3, r3, #7
 80085ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	4a15      	ldr	r2, [pc, #84]	; (8008648 <prvHeapInit+0xb4>)
 80085f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085f6:	4b14      	ldr	r3, [pc, #80]	; (8008648 <prvHeapInit+0xb4>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	2200      	movs	r2, #0
 80085fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085fe:	4b12      	ldr	r3, [pc, #72]	; (8008648 <prvHeapInit+0xb4>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	1ad2      	subs	r2, r2, r3
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008614:	4b0c      	ldr	r3, [pc, #48]	; (8008648 <prvHeapInit+0xb4>)
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4a0a      	ldr	r2, [pc, #40]	; (800864c <prvHeapInit+0xb8>)
 8008622:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	4a09      	ldr	r2, [pc, #36]	; (8008650 <prvHeapInit+0xbc>)
 800862a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800862c:	4b09      	ldr	r3, [pc, #36]	; (8008654 <prvHeapInit+0xc0>)
 800862e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008632:	601a      	str	r2, [r3, #0]
}
 8008634:	bf00      	nop
 8008636:	3714      	adds	r7, #20
 8008638:	46bd      	mov	sp, r7
 800863a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863e:	4770      	bx	lr
 8008640:	20001248 	.word	0x20001248
 8008644:	20004e48 	.word	0x20004e48
 8008648:	20004e50 	.word	0x20004e50
 800864c:	20004e58 	.word	0x20004e58
 8008650:	20004e54 	.word	0x20004e54
 8008654:	20004e64 	.word	0x20004e64

08008658 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008660:	4b28      	ldr	r3, [pc, #160]	; (8008704 <prvInsertBlockIntoFreeList+0xac>)
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e002      	b.n	800866c <prvInsertBlockIntoFreeList+0x14>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	687a      	ldr	r2, [r7, #4]
 8008672:	429a      	cmp	r2, r3
 8008674:	d8f7      	bhi.n	8008666 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	68ba      	ldr	r2, [r7, #8]
 8008680:	4413      	add	r3, r2
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d108      	bne.n	800869a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685b      	ldr	r3, [r3, #4]
 8008690:	441a      	add	r2, r3
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	441a      	add	r2, r3
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d118      	bne.n	80086e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b15      	ldr	r3, [pc, #84]	; (8008708 <prvInsertBlockIntoFreeList+0xb0>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d00d      	beq.n	80086d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	685a      	ldr	r2, [r3, #4]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	441a      	add	r2, r3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	601a      	str	r2, [r3, #0]
 80086d4:	e008      	b.n	80086e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086d6:	4b0c      	ldr	r3, [pc, #48]	; (8008708 <prvInsertBlockIntoFreeList+0xb0>)
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	e003      	b.n	80086e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681a      	ldr	r2, [r3, #0]
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086e8:	68fa      	ldr	r2, [r7, #12]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d002      	beq.n	80086f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086f6:	bf00      	nop
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop
 8008704:	20004e48 	.word	0x20004e48
 8008708:	20004e50 	.word	0x20004e50

0800870c <__errno>:
 800870c:	4b01      	ldr	r3, [pc, #4]	; (8008714 <__errno+0x8>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	4770      	bx	lr
 8008712:	bf00      	nop
 8008714:	20000018 	.word	0x20000018

08008718 <std>:
 8008718:	2300      	movs	r3, #0
 800871a:	b510      	push	{r4, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	e9c0 3300 	strd	r3, r3, [r0]
 8008722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008726:	6083      	str	r3, [r0, #8]
 8008728:	8181      	strh	r1, [r0, #12]
 800872a:	6643      	str	r3, [r0, #100]	; 0x64
 800872c:	81c2      	strh	r2, [r0, #14]
 800872e:	6183      	str	r3, [r0, #24]
 8008730:	4619      	mov	r1, r3
 8008732:	2208      	movs	r2, #8
 8008734:	305c      	adds	r0, #92	; 0x5c
 8008736:	f000 f91a 	bl	800896e <memset>
 800873a:	4b05      	ldr	r3, [pc, #20]	; (8008750 <std+0x38>)
 800873c:	6263      	str	r3, [r4, #36]	; 0x24
 800873e:	4b05      	ldr	r3, [pc, #20]	; (8008754 <std+0x3c>)
 8008740:	62a3      	str	r3, [r4, #40]	; 0x28
 8008742:	4b05      	ldr	r3, [pc, #20]	; (8008758 <std+0x40>)
 8008744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008746:	4b05      	ldr	r3, [pc, #20]	; (800875c <std+0x44>)
 8008748:	6224      	str	r4, [r4, #32]
 800874a:	6323      	str	r3, [r4, #48]	; 0x30
 800874c:	bd10      	pop	{r4, pc}
 800874e:	bf00      	nop
 8008750:	08008c35 	.word	0x08008c35
 8008754:	08008c57 	.word	0x08008c57
 8008758:	08008c8f 	.word	0x08008c8f
 800875c:	08008cb3 	.word	0x08008cb3

08008760 <_cleanup_r>:
 8008760:	4901      	ldr	r1, [pc, #4]	; (8008768 <_cleanup_r+0x8>)
 8008762:	f000 b8af 	b.w	80088c4 <_fwalk_reent>
 8008766:	bf00      	nop
 8008768:	08008e25 	.word	0x08008e25

0800876c <__sfmoreglue>:
 800876c:	b570      	push	{r4, r5, r6, lr}
 800876e:	2268      	movs	r2, #104	; 0x68
 8008770:	1e4d      	subs	r5, r1, #1
 8008772:	4355      	muls	r5, r2
 8008774:	460e      	mov	r6, r1
 8008776:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800877a:	f000 f921 	bl	80089c0 <_malloc_r>
 800877e:	4604      	mov	r4, r0
 8008780:	b140      	cbz	r0, 8008794 <__sfmoreglue+0x28>
 8008782:	2100      	movs	r1, #0
 8008784:	e9c0 1600 	strd	r1, r6, [r0]
 8008788:	300c      	adds	r0, #12
 800878a:	60a0      	str	r0, [r4, #8]
 800878c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008790:	f000 f8ed 	bl	800896e <memset>
 8008794:	4620      	mov	r0, r4
 8008796:	bd70      	pop	{r4, r5, r6, pc}

08008798 <__sfp_lock_acquire>:
 8008798:	4801      	ldr	r0, [pc, #4]	; (80087a0 <__sfp_lock_acquire+0x8>)
 800879a:	f000 b8d8 	b.w	800894e <__retarget_lock_acquire_recursive>
 800879e:	bf00      	nop
 80087a0:	20004e69 	.word	0x20004e69

080087a4 <__sfp_lock_release>:
 80087a4:	4801      	ldr	r0, [pc, #4]	; (80087ac <__sfp_lock_release+0x8>)
 80087a6:	f000 b8d3 	b.w	8008950 <__retarget_lock_release_recursive>
 80087aa:	bf00      	nop
 80087ac:	20004e69 	.word	0x20004e69

080087b0 <__sinit_lock_acquire>:
 80087b0:	4801      	ldr	r0, [pc, #4]	; (80087b8 <__sinit_lock_acquire+0x8>)
 80087b2:	f000 b8cc 	b.w	800894e <__retarget_lock_acquire_recursive>
 80087b6:	bf00      	nop
 80087b8:	20004e6a 	.word	0x20004e6a

080087bc <__sinit_lock_release>:
 80087bc:	4801      	ldr	r0, [pc, #4]	; (80087c4 <__sinit_lock_release+0x8>)
 80087be:	f000 b8c7 	b.w	8008950 <__retarget_lock_release_recursive>
 80087c2:	bf00      	nop
 80087c4:	20004e6a 	.word	0x20004e6a

080087c8 <__sinit>:
 80087c8:	b510      	push	{r4, lr}
 80087ca:	4604      	mov	r4, r0
 80087cc:	f7ff fff0 	bl	80087b0 <__sinit_lock_acquire>
 80087d0:	69a3      	ldr	r3, [r4, #24]
 80087d2:	b11b      	cbz	r3, 80087dc <__sinit+0x14>
 80087d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087d8:	f7ff bff0 	b.w	80087bc <__sinit_lock_release>
 80087dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80087e0:	6523      	str	r3, [r4, #80]	; 0x50
 80087e2:	4b13      	ldr	r3, [pc, #76]	; (8008830 <__sinit+0x68>)
 80087e4:	4a13      	ldr	r2, [pc, #76]	; (8008834 <__sinit+0x6c>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80087ea:	42a3      	cmp	r3, r4
 80087ec:	bf04      	itt	eq
 80087ee:	2301      	moveq	r3, #1
 80087f0:	61a3      	streq	r3, [r4, #24]
 80087f2:	4620      	mov	r0, r4
 80087f4:	f000 f820 	bl	8008838 <__sfp>
 80087f8:	6060      	str	r0, [r4, #4]
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 f81c 	bl	8008838 <__sfp>
 8008800:	60a0      	str	r0, [r4, #8]
 8008802:	4620      	mov	r0, r4
 8008804:	f000 f818 	bl	8008838 <__sfp>
 8008808:	2200      	movs	r2, #0
 800880a:	60e0      	str	r0, [r4, #12]
 800880c:	2104      	movs	r1, #4
 800880e:	6860      	ldr	r0, [r4, #4]
 8008810:	f7ff ff82 	bl	8008718 <std>
 8008814:	68a0      	ldr	r0, [r4, #8]
 8008816:	2201      	movs	r2, #1
 8008818:	2109      	movs	r1, #9
 800881a:	f7ff ff7d 	bl	8008718 <std>
 800881e:	68e0      	ldr	r0, [r4, #12]
 8008820:	2202      	movs	r2, #2
 8008822:	2112      	movs	r1, #18
 8008824:	f7ff ff78 	bl	8008718 <std>
 8008828:	2301      	movs	r3, #1
 800882a:	61a3      	str	r3, [r4, #24]
 800882c:	e7d2      	b.n	80087d4 <__sinit+0xc>
 800882e:	bf00      	nop
 8008830:	08009d90 	.word	0x08009d90
 8008834:	08008761 	.word	0x08008761

08008838 <__sfp>:
 8008838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883a:	4607      	mov	r7, r0
 800883c:	f7ff ffac 	bl	8008798 <__sfp_lock_acquire>
 8008840:	4b1e      	ldr	r3, [pc, #120]	; (80088bc <__sfp+0x84>)
 8008842:	681e      	ldr	r6, [r3, #0]
 8008844:	69b3      	ldr	r3, [r6, #24]
 8008846:	b913      	cbnz	r3, 800884e <__sfp+0x16>
 8008848:	4630      	mov	r0, r6
 800884a:	f7ff ffbd 	bl	80087c8 <__sinit>
 800884e:	3648      	adds	r6, #72	; 0x48
 8008850:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008854:	3b01      	subs	r3, #1
 8008856:	d503      	bpl.n	8008860 <__sfp+0x28>
 8008858:	6833      	ldr	r3, [r6, #0]
 800885a:	b30b      	cbz	r3, 80088a0 <__sfp+0x68>
 800885c:	6836      	ldr	r6, [r6, #0]
 800885e:	e7f7      	b.n	8008850 <__sfp+0x18>
 8008860:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008864:	b9d5      	cbnz	r5, 800889c <__sfp+0x64>
 8008866:	4b16      	ldr	r3, [pc, #88]	; (80088c0 <__sfp+0x88>)
 8008868:	60e3      	str	r3, [r4, #12]
 800886a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800886e:	6665      	str	r5, [r4, #100]	; 0x64
 8008870:	f000 f86c 	bl	800894c <__retarget_lock_init_recursive>
 8008874:	f7ff ff96 	bl	80087a4 <__sfp_lock_release>
 8008878:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800887c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008880:	6025      	str	r5, [r4, #0]
 8008882:	61a5      	str	r5, [r4, #24]
 8008884:	2208      	movs	r2, #8
 8008886:	4629      	mov	r1, r5
 8008888:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800888c:	f000 f86f 	bl	800896e <memset>
 8008890:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008894:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008898:	4620      	mov	r0, r4
 800889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889c:	3468      	adds	r4, #104	; 0x68
 800889e:	e7d9      	b.n	8008854 <__sfp+0x1c>
 80088a0:	2104      	movs	r1, #4
 80088a2:	4638      	mov	r0, r7
 80088a4:	f7ff ff62 	bl	800876c <__sfmoreglue>
 80088a8:	4604      	mov	r4, r0
 80088aa:	6030      	str	r0, [r6, #0]
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d1d5      	bne.n	800885c <__sfp+0x24>
 80088b0:	f7ff ff78 	bl	80087a4 <__sfp_lock_release>
 80088b4:	230c      	movs	r3, #12
 80088b6:	603b      	str	r3, [r7, #0]
 80088b8:	e7ee      	b.n	8008898 <__sfp+0x60>
 80088ba:	bf00      	nop
 80088bc:	08009d90 	.word	0x08009d90
 80088c0:	ffff0001 	.word	0xffff0001

080088c4 <_fwalk_reent>:
 80088c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088c8:	4606      	mov	r6, r0
 80088ca:	4688      	mov	r8, r1
 80088cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80088d0:	2700      	movs	r7, #0
 80088d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80088d6:	f1b9 0901 	subs.w	r9, r9, #1
 80088da:	d505      	bpl.n	80088e8 <_fwalk_reent+0x24>
 80088dc:	6824      	ldr	r4, [r4, #0]
 80088de:	2c00      	cmp	r4, #0
 80088e0:	d1f7      	bne.n	80088d2 <_fwalk_reent+0xe>
 80088e2:	4638      	mov	r0, r7
 80088e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088e8:	89ab      	ldrh	r3, [r5, #12]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d907      	bls.n	80088fe <_fwalk_reent+0x3a>
 80088ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088f2:	3301      	adds	r3, #1
 80088f4:	d003      	beq.n	80088fe <_fwalk_reent+0x3a>
 80088f6:	4629      	mov	r1, r5
 80088f8:	4630      	mov	r0, r6
 80088fa:	47c0      	blx	r8
 80088fc:	4307      	orrs	r7, r0
 80088fe:	3568      	adds	r5, #104	; 0x68
 8008900:	e7e9      	b.n	80088d6 <_fwalk_reent+0x12>
	...

08008904 <__libc_init_array>:
 8008904:	b570      	push	{r4, r5, r6, lr}
 8008906:	4d0d      	ldr	r5, [pc, #52]	; (800893c <__libc_init_array+0x38>)
 8008908:	4c0d      	ldr	r4, [pc, #52]	; (8008940 <__libc_init_array+0x3c>)
 800890a:	1b64      	subs	r4, r4, r5
 800890c:	10a4      	asrs	r4, r4, #2
 800890e:	2600      	movs	r6, #0
 8008910:	42a6      	cmp	r6, r4
 8008912:	d109      	bne.n	8008928 <__libc_init_array+0x24>
 8008914:	4d0b      	ldr	r5, [pc, #44]	; (8008944 <__libc_init_array+0x40>)
 8008916:	4c0c      	ldr	r4, [pc, #48]	; (8008948 <__libc_init_array+0x44>)
 8008918:	f001 f920 	bl	8009b5c <_init>
 800891c:	1b64      	subs	r4, r4, r5
 800891e:	10a4      	asrs	r4, r4, #2
 8008920:	2600      	movs	r6, #0
 8008922:	42a6      	cmp	r6, r4
 8008924:	d105      	bne.n	8008932 <__libc_init_array+0x2e>
 8008926:	bd70      	pop	{r4, r5, r6, pc}
 8008928:	f855 3b04 	ldr.w	r3, [r5], #4
 800892c:	4798      	blx	r3
 800892e:	3601      	adds	r6, #1
 8008930:	e7ee      	b.n	8008910 <__libc_init_array+0xc>
 8008932:	f855 3b04 	ldr.w	r3, [r5], #4
 8008936:	4798      	blx	r3
 8008938:	3601      	adds	r6, #1
 800893a:	e7f2      	b.n	8008922 <__libc_init_array+0x1e>
 800893c:	08009dd0 	.word	0x08009dd0
 8008940:	08009dd0 	.word	0x08009dd0
 8008944:	08009dd0 	.word	0x08009dd0
 8008948:	08009dd4 	.word	0x08009dd4

0800894c <__retarget_lock_init_recursive>:
 800894c:	4770      	bx	lr

0800894e <__retarget_lock_acquire_recursive>:
 800894e:	4770      	bx	lr

08008950 <__retarget_lock_release_recursive>:
 8008950:	4770      	bx	lr

08008952 <memcpy>:
 8008952:	440a      	add	r2, r1
 8008954:	4291      	cmp	r1, r2
 8008956:	f100 33ff 	add.w	r3, r0, #4294967295
 800895a:	d100      	bne.n	800895e <memcpy+0xc>
 800895c:	4770      	bx	lr
 800895e:	b510      	push	{r4, lr}
 8008960:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008964:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008968:	4291      	cmp	r1, r2
 800896a:	d1f9      	bne.n	8008960 <memcpy+0xe>
 800896c:	bd10      	pop	{r4, pc}

0800896e <memset>:
 800896e:	4402      	add	r2, r0
 8008970:	4603      	mov	r3, r0
 8008972:	4293      	cmp	r3, r2
 8008974:	d100      	bne.n	8008978 <memset+0xa>
 8008976:	4770      	bx	lr
 8008978:	f803 1b01 	strb.w	r1, [r3], #1
 800897c:	e7f9      	b.n	8008972 <memset+0x4>
	...

08008980 <sbrk_aligned>:
 8008980:	b570      	push	{r4, r5, r6, lr}
 8008982:	4e0e      	ldr	r6, [pc, #56]	; (80089bc <sbrk_aligned+0x3c>)
 8008984:	460c      	mov	r4, r1
 8008986:	6831      	ldr	r1, [r6, #0]
 8008988:	4605      	mov	r5, r0
 800898a:	b911      	cbnz	r1, 8008992 <sbrk_aligned+0x12>
 800898c:	f000 f90e 	bl	8008bac <_sbrk_r>
 8008990:	6030      	str	r0, [r6, #0]
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	f000 f909 	bl	8008bac <_sbrk_r>
 800899a:	1c43      	adds	r3, r0, #1
 800899c:	d00a      	beq.n	80089b4 <sbrk_aligned+0x34>
 800899e:	1cc4      	adds	r4, r0, #3
 80089a0:	f024 0403 	bic.w	r4, r4, #3
 80089a4:	42a0      	cmp	r0, r4
 80089a6:	d007      	beq.n	80089b8 <sbrk_aligned+0x38>
 80089a8:	1a21      	subs	r1, r4, r0
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f8fe 	bl	8008bac <_sbrk_r>
 80089b0:	3001      	adds	r0, #1
 80089b2:	d101      	bne.n	80089b8 <sbrk_aligned+0x38>
 80089b4:	f04f 34ff 	mov.w	r4, #4294967295
 80089b8:	4620      	mov	r0, r4
 80089ba:	bd70      	pop	{r4, r5, r6, pc}
 80089bc:	20004e70 	.word	0x20004e70

080089c0 <_malloc_r>:
 80089c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	1ccd      	adds	r5, r1, #3
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	2d00      	cmp	r5, #0
 80089d4:	4607      	mov	r7, r0
 80089d6:	db01      	blt.n	80089dc <_malloc_r+0x1c>
 80089d8:	42a9      	cmp	r1, r5
 80089da:	d905      	bls.n	80089e8 <_malloc_r+0x28>
 80089dc:	230c      	movs	r3, #12
 80089de:	603b      	str	r3, [r7, #0]
 80089e0:	2600      	movs	r6, #0
 80089e2:	4630      	mov	r0, r6
 80089e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089e8:	4e2e      	ldr	r6, [pc, #184]	; (8008aa4 <_malloc_r+0xe4>)
 80089ea:	f000 fa69 	bl	8008ec0 <__malloc_lock>
 80089ee:	6833      	ldr	r3, [r6, #0]
 80089f0:	461c      	mov	r4, r3
 80089f2:	bb34      	cbnz	r4, 8008a42 <_malloc_r+0x82>
 80089f4:	4629      	mov	r1, r5
 80089f6:	4638      	mov	r0, r7
 80089f8:	f7ff ffc2 	bl	8008980 <sbrk_aligned>
 80089fc:	1c43      	adds	r3, r0, #1
 80089fe:	4604      	mov	r4, r0
 8008a00:	d14d      	bne.n	8008a9e <_malloc_r+0xde>
 8008a02:	6834      	ldr	r4, [r6, #0]
 8008a04:	4626      	mov	r6, r4
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	d140      	bne.n	8008a8c <_malloc_r+0xcc>
 8008a0a:	6823      	ldr	r3, [r4, #0]
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4638      	mov	r0, r7
 8008a10:	eb04 0803 	add.w	r8, r4, r3
 8008a14:	f000 f8ca 	bl	8008bac <_sbrk_r>
 8008a18:	4580      	cmp	r8, r0
 8008a1a:	d13a      	bne.n	8008a92 <_malloc_r+0xd2>
 8008a1c:	6821      	ldr	r1, [r4, #0]
 8008a1e:	3503      	adds	r5, #3
 8008a20:	1a6d      	subs	r5, r5, r1
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff ffa5 	bl	8008980 <sbrk_aligned>
 8008a36:	3001      	adds	r0, #1
 8008a38:	d02b      	beq.n	8008a92 <_malloc_r+0xd2>
 8008a3a:	6823      	ldr	r3, [r4, #0]
 8008a3c:	442b      	add	r3, r5
 8008a3e:	6023      	str	r3, [r4, #0]
 8008a40:	e00e      	b.n	8008a60 <_malloc_r+0xa0>
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	1b52      	subs	r2, r2, r5
 8008a46:	d41e      	bmi.n	8008a86 <_malloc_r+0xc6>
 8008a48:	2a0b      	cmp	r2, #11
 8008a4a:	d916      	bls.n	8008a7a <_malloc_r+0xba>
 8008a4c:	1961      	adds	r1, r4, r5
 8008a4e:	42a3      	cmp	r3, r4
 8008a50:	6025      	str	r5, [r4, #0]
 8008a52:	bf18      	it	ne
 8008a54:	6059      	strne	r1, [r3, #4]
 8008a56:	6863      	ldr	r3, [r4, #4]
 8008a58:	bf08      	it	eq
 8008a5a:	6031      	streq	r1, [r6, #0]
 8008a5c:	5162      	str	r2, [r4, r5]
 8008a5e:	604b      	str	r3, [r1, #4]
 8008a60:	4638      	mov	r0, r7
 8008a62:	f104 060b 	add.w	r6, r4, #11
 8008a66:	f000 fa31 	bl	8008ecc <__malloc_unlock>
 8008a6a:	f026 0607 	bic.w	r6, r6, #7
 8008a6e:	1d23      	adds	r3, r4, #4
 8008a70:	1af2      	subs	r2, r6, r3
 8008a72:	d0b6      	beq.n	80089e2 <_malloc_r+0x22>
 8008a74:	1b9b      	subs	r3, r3, r6
 8008a76:	50a3      	str	r3, [r4, r2]
 8008a78:	e7b3      	b.n	80089e2 <_malloc_r+0x22>
 8008a7a:	6862      	ldr	r2, [r4, #4]
 8008a7c:	42a3      	cmp	r3, r4
 8008a7e:	bf0c      	ite	eq
 8008a80:	6032      	streq	r2, [r6, #0]
 8008a82:	605a      	strne	r2, [r3, #4]
 8008a84:	e7ec      	b.n	8008a60 <_malloc_r+0xa0>
 8008a86:	4623      	mov	r3, r4
 8008a88:	6864      	ldr	r4, [r4, #4]
 8008a8a:	e7b2      	b.n	80089f2 <_malloc_r+0x32>
 8008a8c:	4634      	mov	r4, r6
 8008a8e:	6876      	ldr	r6, [r6, #4]
 8008a90:	e7b9      	b.n	8008a06 <_malloc_r+0x46>
 8008a92:	230c      	movs	r3, #12
 8008a94:	603b      	str	r3, [r7, #0]
 8008a96:	4638      	mov	r0, r7
 8008a98:	f000 fa18 	bl	8008ecc <__malloc_unlock>
 8008a9c:	e7a1      	b.n	80089e2 <_malloc_r+0x22>
 8008a9e:	6025      	str	r5, [r4, #0]
 8008aa0:	e7de      	b.n	8008a60 <_malloc_r+0xa0>
 8008aa2:	bf00      	nop
 8008aa4:	20004e6c 	.word	0x20004e6c

08008aa8 <iprintf>:
 8008aa8:	b40f      	push	{r0, r1, r2, r3}
 8008aaa:	4b0a      	ldr	r3, [pc, #40]	; (8008ad4 <iprintf+0x2c>)
 8008aac:	b513      	push	{r0, r1, r4, lr}
 8008aae:	681c      	ldr	r4, [r3, #0]
 8008ab0:	b124      	cbz	r4, 8008abc <iprintf+0x14>
 8008ab2:	69a3      	ldr	r3, [r4, #24]
 8008ab4:	b913      	cbnz	r3, 8008abc <iprintf+0x14>
 8008ab6:	4620      	mov	r0, r4
 8008ab8:	f7ff fe86 	bl	80087c8 <__sinit>
 8008abc:	ab05      	add	r3, sp, #20
 8008abe:	9a04      	ldr	r2, [sp, #16]
 8008ac0:	68a1      	ldr	r1, [r4, #8]
 8008ac2:	9301      	str	r3, [sp, #4]
 8008ac4:	4620      	mov	r0, r4
 8008ac6:	f000 fbd9 	bl	800927c <_vfiprintf_r>
 8008aca:	b002      	add	sp, #8
 8008acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad0:	b004      	add	sp, #16
 8008ad2:	4770      	bx	lr
 8008ad4:	20000018 	.word	0x20000018

08008ad8 <cleanup_glue>:
 8008ad8:	b538      	push	{r3, r4, r5, lr}
 8008ada:	460c      	mov	r4, r1
 8008adc:	6809      	ldr	r1, [r1, #0]
 8008ade:	4605      	mov	r5, r0
 8008ae0:	b109      	cbz	r1, 8008ae6 <cleanup_glue+0xe>
 8008ae2:	f7ff fff9 	bl	8008ad8 <cleanup_glue>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008aee:	f000 b9f3 	b.w	8008ed8 <_free_r>
	...

08008af4 <_reclaim_reent>:
 8008af4:	4b2c      	ldr	r3, [pc, #176]	; (8008ba8 <_reclaim_reent+0xb4>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	4283      	cmp	r3, r0
 8008afa:	b570      	push	{r4, r5, r6, lr}
 8008afc:	4604      	mov	r4, r0
 8008afe:	d051      	beq.n	8008ba4 <_reclaim_reent+0xb0>
 8008b00:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008b02:	b143      	cbz	r3, 8008b16 <_reclaim_reent+0x22>
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d14a      	bne.n	8008ba0 <_reclaim_reent+0xac>
 8008b0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b0c:	6819      	ldr	r1, [r3, #0]
 8008b0e:	b111      	cbz	r1, 8008b16 <_reclaim_reent+0x22>
 8008b10:	4620      	mov	r0, r4
 8008b12:	f000 f9e1 	bl	8008ed8 <_free_r>
 8008b16:	6961      	ldr	r1, [r4, #20]
 8008b18:	b111      	cbz	r1, 8008b20 <_reclaim_reent+0x2c>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f000 f9dc 	bl	8008ed8 <_free_r>
 8008b20:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008b22:	b111      	cbz	r1, 8008b2a <_reclaim_reent+0x36>
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 f9d7 	bl	8008ed8 <_free_r>
 8008b2a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008b2c:	b111      	cbz	r1, 8008b34 <_reclaim_reent+0x40>
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f9d2 	bl	8008ed8 <_free_r>
 8008b34:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008b36:	b111      	cbz	r1, 8008b3e <_reclaim_reent+0x4a>
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 f9cd 	bl	8008ed8 <_free_r>
 8008b3e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008b40:	b111      	cbz	r1, 8008b48 <_reclaim_reent+0x54>
 8008b42:	4620      	mov	r0, r4
 8008b44:	f000 f9c8 	bl	8008ed8 <_free_r>
 8008b48:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008b4a:	b111      	cbz	r1, 8008b52 <_reclaim_reent+0x5e>
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 f9c3 	bl	8008ed8 <_free_r>
 8008b52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008b54:	b111      	cbz	r1, 8008b5c <_reclaim_reent+0x68>
 8008b56:	4620      	mov	r0, r4
 8008b58:	f000 f9be 	bl	8008ed8 <_free_r>
 8008b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b5e:	b111      	cbz	r1, 8008b66 <_reclaim_reent+0x72>
 8008b60:	4620      	mov	r0, r4
 8008b62:	f000 f9b9 	bl	8008ed8 <_free_r>
 8008b66:	69a3      	ldr	r3, [r4, #24]
 8008b68:	b1e3      	cbz	r3, 8008ba4 <_reclaim_reent+0xb0>
 8008b6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4798      	blx	r3
 8008b70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008b72:	b1b9      	cbz	r1, 8008ba4 <_reclaim_reent+0xb0>
 8008b74:	4620      	mov	r0, r4
 8008b76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008b7a:	f7ff bfad 	b.w	8008ad8 <cleanup_glue>
 8008b7e:	5949      	ldr	r1, [r1, r5]
 8008b80:	b941      	cbnz	r1, 8008b94 <_reclaim_reent+0xa0>
 8008b82:	3504      	adds	r5, #4
 8008b84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b86:	2d80      	cmp	r5, #128	; 0x80
 8008b88:	68d9      	ldr	r1, [r3, #12]
 8008b8a:	d1f8      	bne.n	8008b7e <_reclaim_reent+0x8a>
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 f9a3 	bl	8008ed8 <_free_r>
 8008b92:	e7ba      	b.n	8008b0a <_reclaim_reent+0x16>
 8008b94:	680e      	ldr	r6, [r1, #0]
 8008b96:	4620      	mov	r0, r4
 8008b98:	f000 f99e 	bl	8008ed8 <_free_r>
 8008b9c:	4631      	mov	r1, r6
 8008b9e:	e7ef      	b.n	8008b80 <_reclaim_reent+0x8c>
 8008ba0:	2500      	movs	r5, #0
 8008ba2:	e7ef      	b.n	8008b84 <_reclaim_reent+0x90>
 8008ba4:	bd70      	pop	{r4, r5, r6, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20000018 	.word	0x20000018

08008bac <_sbrk_r>:
 8008bac:	b538      	push	{r3, r4, r5, lr}
 8008bae:	4d06      	ldr	r5, [pc, #24]	; (8008bc8 <_sbrk_r+0x1c>)
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	4604      	mov	r4, r0
 8008bb4:	4608      	mov	r0, r1
 8008bb6:	602b      	str	r3, [r5, #0]
 8008bb8:	f7f8 fcc4 	bl	8001544 <_sbrk>
 8008bbc:	1c43      	adds	r3, r0, #1
 8008bbe:	d102      	bne.n	8008bc6 <_sbrk_r+0x1a>
 8008bc0:	682b      	ldr	r3, [r5, #0]
 8008bc2:	b103      	cbz	r3, 8008bc6 <_sbrk_r+0x1a>
 8008bc4:	6023      	str	r3, [r4, #0]
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	20004e74 	.word	0x20004e74

08008bcc <sniprintf>:
 8008bcc:	b40c      	push	{r2, r3}
 8008bce:	b530      	push	{r4, r5, lr}
 8008bd0:	4b17      	ldr	r3, [pc, #92]	; (8008c30 <sniprintf+0x64>)
 8008bd2:	1e0c      	subs	r4, r1, #0
 8008bd4:	681d      	ldr	r5, [r3, #0]
 8008bd6:	b09d      	sub	sp, #116	; 0x74
 8008bd8:	da08      	bge.n	8008bec <sniprintf+0x20>
 8008bda:	238b      	movs	r3, #139	; 0x8b
 8008bdc:	602b      	str	r3, [r5, #0]
 8008bde:	f04f 30ff 	mov.w	r0, #4294967295
 8008be2:	b01d      	add	sp, #116	; 0x74
 8008be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008be8:	b002      	add	sp, #8
 8008bea:	4770      	bx	lr
 8008bec:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008bf0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008bf4:	bf14      	ite	ne
 8008bf6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008bfa:	4623      	moveq	r3, r4
 8008bfc:	9304      	str	r3, [sp, #16]
 8008bfe:	9307      	str	r3, [sp, #28]
 8008c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008c04:	9002      	str	r0, [sp, #8]
 8008c06:	9006      	str	r0, [sp, #24]
 8008c08:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c0e:	ab21      	add	r3, sp, #132	; 0x84
 8008c10:	a902      	add	r1, sp, #8
 8008c12:	4628      	mov	r0, r5
 8008c14:	9301      	str	r3, [sp, #4]
 8008c16:	f000 fa07 	bl	8009028 <_svfiprintf_r>
 8008c1a:	1c43      	adds	r3, r0, #1
 8008c1c:	bfbc      	itt	lt
 8008c1e:	238b      	movlt	r3, #139	; 0x8b
 8008c20:	602b      	strlt	r3, [r5, #0]
 8008c22:	2c00      	cmp	r4, #0
 8008c24:	d0dd      	beq.n	8008be2 <sniprintf+0x16>
 8008c26:	9b02      	ldr	r3, [sp, #8]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	701a      	strb	r2, [r3, #0]
 8008c2c:	e7d9      	b.n	8008be2 <sniprintf+0x16>
 8008c2e:	bf00      	nop
 8008c30:	20000018 	.word	0x20000018

08008c34 <__sread>:
 8008c34:	b510      	push	{r4, lr}
 8008c36:	460c      	mov	r4, r1
 8008c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3c:	f000 fde2 	bl	8009804 <_read_r>
 8008c40:	2800      	cmp	r0, #0
 8008c42:	bfab      	itete	ge
 8008c44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008c46:	89a3      	ldrhlt	r3, [r4, #12]
 8008c48:	181b      	addge	r3, r3, r0
 8008c4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008c4e:	bfac      	ite	ge
 8008c50:	6563      	strge	r3, [r4, #84]	; 0x54
 8008c52:	81a3      	strhlt	r3, [r4, #12]
 8008c54:	bd10      	pop	{r4, pc}

08008c56 <__swrite>:
 8008c56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5a:	461f      	mov	r7, r3
 8008c5c:	898b      	ldrh	r3, [r1, #12]
 8008c5e:	05db      	lsls	r3, r3, #23
 8008c60:	4605      	mov	r5, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	4616      	mov	r6, r2
 8008c66:	d505      	bpl.n	8008c74 <__swrite+0x1e>
 8008c68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f000 f914 	bl	8008e9c <_lseek_r>
 8008c74:	89a3      	ldrh	r3, [r4, #12]
 8008c76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008c7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	4632      	mov	r2, r6
 8008c82:	463b      	mov	r3, r7
 8008c84:	4628      	mov	r0, r5
 8008c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c8a:	f000 b823 	b.w	8008cd4 <_write_r>

08008c8e <__sseek>:
 8008c8e:	b510      	push	{r4, lr}
 8008c90:	460c      	mov	r4, r1
 8008c92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c96:	f000 f901 	bl	8008e9c <_lseek_r>
 8008c9a:	1c43      	adds	r3, r0, #1
 8008c9c:	89a3      	ldrh	r3, [r4, #12]
 8008c9e:	bf15      	itete	ne
 8008ca0:	6560      	strne	r0, [r4, #84]	; 0x54
 8008ca2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008ca6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008caa:	81a3      	strheq	r3, [r4, #12]
 8008cac:	bf18      	it	ne
 8008cae:	81a3      	strhne	r3, [r4, #12]
 8008cb0:	bd10      	pop	{r4, pc}

08008cb2 <__sclose>:
 8008cb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb6:	f000 b81f 	b.w	8008cf8 <_close_r>

08008cba <strnlen>:
 8008cba:	b510      	push	{r4, lr}
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	4401      	add	r1, r0
 8008cc0:	428a      	cmp	r2, r1
 8008cc2:	4613      	mov	r3, r2
 8008cc4:	d003      	beq.n	8008cce <strnlen+0x14>
 8008cc6:	781c      	ldrb	r4, [r3, #0]
 8008cc8:	3201      	adds	r2, #1
 8008cca:	2c00      	cmp	r4, #0
 8008ccc:	d1f8      	bne.n	8008cc0 <strnlen+0x6>
 8008cce:	1a18      	subs	r0, r3, r0
 8008cd0:	bd10      	pop	{r4, pc}
	...

08008cd4 <_write_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4d07      	ldr	r5, [pc, #28]	; (8008cf4 <_write_r+0x20>)
 8008cd8:	4604      	mov	r4, r0
 8008cda:	4608      	mov	r0, r1
 8008cdc:	4611      	mov	r1, r2
 8008cde:	2200      	movs	r2, #0
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	461a      	mov	r2, r3
 8008ce4:	f7f8 fbdd 	bl	80014a2 <_write>
 8008ce8:	1c43      	adds	r3, r0, #1
 8008cea:	d102      	bne.n	8008cf2 <_write_r+0x1e>
 8008cec:	682b      	ldr	r3, [r5, #0]
 8008cee:	b103      	cbz	r3, 8008cf2 <_write_r+0x1e>
 8008cf0:	6023      	str	r3, [r4, #0]
 8008cf2:	bd38      	pop	{r3, r4, r5, pc}
 8008cf4:	20004e74 	.word	0x20004e74

08008cf8 <_close_r>:
 8008cf8:	b538      	push	{r3, r4, r5, lr}
 8008cfa:	4d06      	ldr	r5, [pc, #24]	; (8008d14 <_close_r+0x1c>)
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	4604      	mov	r4, r0
 8008d00:	4608      	mov	r0, r1
 8008d02:	602b      	str	r3, [r5, #0]
 8008d04:	f7f8 fbe9 	bl	80014da <_close>
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d102      	bne.n	8008d12 <_close_r+0x1a>
 8008d0c:	682b      	ldr	r3, [r5, #0]
 8008d0e:	b103      	cbz	r3, 8008d12 <_close_r+0x1a>
 8008d10:	6023      	str	r3, [r4, #0]
 8008d12:	bd38      	pop	{r3, r4, r5, pc}
 8008d14:	20004e74 	.word	0x20004e74

08008d18 <__sflush_r>:
 8008d18:	898a      	ldrh	r2, [r1, #12]
 8008d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d1e:	4605      	mov	r5, r0
 8008d20:	0710      	lsls	r0, r2, #28
 8008d22:	460c      	mov	r4, r1
 8008d24:	d458      	bmi.n	8008dd8 <__sflush_r+0xc0>
 8008d26:	684b      	ldr	r3, [r1, #4]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dc05      	bgt.n	8008d38 <__sflush_r+0x20>
 8008d2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dc02      	bgt.n	8008d38 <__sflush_r+0x20>
 8008d32:	2000      	movs	r0, #0
 8008d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d3a:	2e00      	cmp	r6, #0
 8008d3c:	d0f9      	beq.n	8008d32 <__sflush_r+0x1a>
 8008d3e:	2300      	movs	r3, #0
 8008d40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008d44:	682f      	ldr	r7, [r5, #0]
 8008d46:	602b      	str	r3, [r5, #0]
 8008d48:	d032      	beq.n	8008db0 <__sflush_r+0x98>
 8008d4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008d4c:	89a3      	ldrh	r3, [r4, #12]
 8008d4e:	075a      	lsls	r2, r3, #29
 8008d50:	d505      	bpl.n	8008d5e <__sflush_r+0x46>
 8008d52:	6863      	ldr	r3, [r4, #4]
 8008d54:	1ac0      	subs	r0, r0, r3
 8008d56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008d58:	b10b      	cbz	r3, 8008d5e <__sflush_r+0x46>
 8008d5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008d5c:	1ac0      	subs	r0, r0, r3
 8008d5e:	2300      	movs	r3, #0
 8008d60:	4602      	mov	r2, r0
 8008d62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008d64:	6a21      	ldr	r1, [r4, #32]
 8008d66:	4628      	mov	r0, r5
 8008d68:	47b0      	blx	r6
 8008d6a:	1c43      	adds	r3, r0, #1
 8008d6c:	89a3      	ldrh	r3, [r4, #12]
 8008d6e:	d106      	bne.n	8008d7e <__sflush_r+0x66>
 8008d70:	6829      	ldr	r1, [r5, #0]
 8008d72:	291d      	cmp	r1, #29
 8008d74:	d82c      	bhi.n	8008dd0 <__sflush_r+0xb8>
 8008d76:	4a2a      	ldr	r2, [pc, #168]	; (8008e20 <__sflush_r+0x108>)
 8008d78:	40ca      	lsrs	r2, r1
 8008d7a:	07d6      	lsls	r6, r2, #31
 8008d7c:	d528      	bpl.n	8008dd0 <__sflush_r+0xb8>
 8008d7e:	2200      	movs	r2, #0
 8008d80:	6062      	str	r2, [r4, #4]
 8008d82:	04d9      	lsls	r1, r3, #19
 8008d84:	6922      	ldr	r2, [r4, #16]
 8008d86:	6022      	str	r2, [r4, #0]
 8008d88:	d504      	bpl.n	8008d94 <__sflush_r+0x7c>
 8008d8a:	1c42      	adds	r2, r0, #1
 8008d8c:	d101      	bne.n	8008d92 <__sflush_r+0x7a>
 8008d8e:	682b      	ldr	r3, [r5, #0]
 8008d90:	b903      	cbnz	r3, 8008d94 <__sflush_r+0x7c>
 8008d92:	6560      	str	r0, [r4, #84]	; 0x54
 8008d94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d96:	602f      	str	r7, [r5, #0]
 8008d98:	2900      	cmp	r1, #0
 8008d9a:	d0ca      	beq.n	8008d32 <__sflush_r+0x1a>
 8008d9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008da0:	4299      	cmp	r1, r3
 8008da2:	d002      	beq.n	8008daa <__sflush_r+0x92>
 8008da4:	4628      	mov	r0, r5
 8008da6:	f000 f897 	bl	8008ed8 <_free_r>
 8008daa:	2000      	movs	r0, #0
 8008dac:	6360      	str	r0, [r4, #52]	; 0x34
 8008dae:	e7c1      	b.n	8008d34 <__sflush_r+0x1c>
 8008db0:	6a21      	ldr	r1, [r4, #32]
 8008db2:	2301      	movs	r3, #1
 8008db4:	4628      	mov	r0, r5
 8008db6:	47b0      	blx	r6
 8008db8:	1c41      	adds	r1, r0, #1
 8008dba:	d1c7      	bne.n	8008d4c <__sflush_r+0x34>
 8008dbc:	682b      	ldr	r3, [r5, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d0c4      	beq.n	8008d4c <__sflush_r+0x34>
 8008dc2:	2b1d      	cmp	r3, #29
 8008dc4:	d001      	beq.n	8008dca <__sflush_r+0xb2>
 8008dc6:	2b16      	cmp	r3, #22
 8008dc8:	d101      	bne.n	8008dce <__sflush_r+0xb6>
 8008dca:	602f      	str	r7, [r5, #0]
 8008dcc:	e7b1      	b.n	8008d32 <__sflush_r+0x1a>
 8008dce:	89a3      	ldrh	r3, [r4, #12]
 8008dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008dd4:	81a3      	strh	r3, [r4, #12]
 8008dd6:	e7ad      	b.n	8008d34 <__sflush_r+0x1c>
 8008dd8:	690f      	ldr	r7, [r1, #16]
 8008dda:	2f00      	cmp	r7, #0
 8008ddc:	d0a9      	beq.n	8008d32 <__sflush_r+0x1a>
 8008dde:	0793      	lsls	r3, r2, #30
 8008de0:	680e      	ldr	r6, [r1, #0]
 8008de2:	bf08      	it	eq
 8008de4:	694b      	ldreq	r3, [r1, #20]
 8008de6:	600f      	str	r7, [r1, #0]
 8008de8:	bf18      	it	ne
 8008dea:	2300      	movne	r3, #0
 8008dec:	eba6 0807 	sub.w	r8, r6, r7
 8008df0:	608b      	str	r3, [r1, #8]
 8008df2:	f1b8 0f00 	cmp.w	r8, #0
 8008df6:	dd9c      	ble.n	8008d32 <__sflush_r+0x1a>
 8008df8:	6a21      	ldr	r1, [r4, #32]
 8008dfa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008dfc:	4643      	mov	r3, r8
 8008dfe:	463a      	mov	r2, r7
 8008e00:	4628      	mov	r0, r5
 8008e02:	47b0      	blx	r6
 8008e04:	2800      	cmp	r0, #0
 8008e06:	dc06      	bgt.n	8008e16 <__sflush_r+0xfe>
 8008e08:	89a3      	ldrh	r3, [r4, #12]
 8008e0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e0e:	81a3      	strh	r3, [r4, #12]
 8008e10:	f04f 30ff 	mov.w	r0, #4294967295
 8008e14:	e78e      	b.n	8008d34 <__sflush_r+0x1c>
 8008e16:	4407      	add	r7, r0
 8008e18:	eba8 0800 	sub.w	r8, r8, r0
 8008e1c:	e7e9      	b.n	8008df2 <__sflush_r+0xda>
 8008e1e:	bf00      	nop
 8008e20:	20400001 	.word	0x20400001

08008e24 <_fflush_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	690b      	ldr	r3, [r1, #16]
 8008e28:	4605      	mov	r5, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	b913      	cbnz	r3, 8008e34 <_fflush_r+0x10>
 8008e2e:	2500      	movs	r5, #0
 8008e30:	4628      	mov	r0, r5
 8008e32:	bd38      	pop	{r3, r4, r5, pc}
 8008e34:	b118      	cbz	r0, 8008e3e <_fflush_r+0x1a>
 8008e36:	6983      	ldr	r3, [r0, #24]
 8008e38:	b90b      	cbnz	r3, 8008e3e <_fflush_r+0x1a>
 8008e3a:	f7ff fcc5 	bl	80087c8 <__sinit>
 8008e3e:	4b14      	ldr	r3, [pc, #80]	; (8008e90 <_fflush_r+0x6c>)
 8008e40:	429c      	cmp	r4, r3
 8008e42:	d11b      	bne.n	8008e7c <_fflush_r+0x58>
 8008e44:	686c      	ldr	r4, [r5, #4]
 8008e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0ef      	beq.n	8008e2e <_fflush_r+0xa>
 8008e4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008e50:	07d0      	lsls	r0, r2, #31
 8008e52:	d404      	bmi.n	8008e5e <_fflush_r+0x3a>
 8008e54:	0599      	lsls	r1, r3, #22
 8008e56:	d402      	bmi.n	8008e5e <_fflush_r+0x3a>
 8008e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e5a:	f7ff fd78 	bl	800894e <__retarget_lock_acquire_recursive>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	4621      	mov	r1, r4
 8008e62:	f7ff ff59 	bl	8008d18 <__sflush_r>
 8008e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e68:	07da      	lsls	r2, r3, #31
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	d4e0      	bmi.n	8008e30 <_fflush_r+0xc>
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	059b      	lsls	r3, r3, #22
 8008e72:	d4dd      	bmi.n	8008e30 <_fflush_r+0xc>
 8008e74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e76:	f7ff fd6b 	bl	8008950 <__retarget_lock_release_recursive>
 8008e7a:	e7d9      	b.n	8008e30 <_fflush_r+0xc>
 8008e7c:	4b05      	ldr	r3, [pc, #20]	; (8008e94 <_fflush_r+0x70>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d101      	bne.n	8008e86 <_fflush_r+0x62>
 8008e82:	68ac      	ldr	r4, [r5, #8]
 8008e84:	e7df      	b.n	8008e46 <_fflush_r+0x22>
 8008e86:	4b04      	ldr	r3, [pc, #16]	; (8008e98 <_fflush_r+0x74>)
 8008e88:	429c      	cmp	r4, r3
 8008e8a:	bf08      	it	eq
 8008e8c:	68ec      	ldreq	r4, [r5, #12]
 8008e8e:	e7da      	b.n	8008e46 <_fflush_r+0x22>
 8008e90:	08009d50 	.word	0x08009d50
 8008e94:	08009d70 	.word	0x08009d70
 8008e98:	08009d30 	.word	0x08009d30

08008e9c <_lseek_r>:
 8008e9c:	b538      	push	{r3, r4, r5, lr}
 8008e9e:	4d07      	ldr	r5, [pc, #28]	; (8008ebc <_lseek_r+0x20>)
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	4608      	mov	r0, r1
 8008ea4:	4611      	mov	r1, r2
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	602a      	str	r2, [r5, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f7f8 fb3c 	bl	8001528 <_lseek>
 8008eb0:	1c43      	adds	r3, r0, #1
 8008eb2:	d102      	bne.n	8008eba <_lseek_r+0x1e>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b103      	cbz	r3, 8008eba <_lseek_r+0x1e>
 8008eb8:	6023      	str	r3, [r4, #0]
 8008eba:	bd38      	pop	{r3, r4, r5, pc}
 8008ebc:	20004e74 	.word	0x20004e74

08008ec0 <__malloc_lock>:
 8008ec0:	4801      	ldr	r0, [pc, #4]	; (8008ec8 <__malloc_lock+0x8>)
 8008ec2:	f7ff bd44 	b.w	800894e <__retarget_lock_acquire_recursive>
 8008ec6:	bf00      	nop
 8008ec8:	20004e68 	.word	0x20004e68

08008ecc <__malloc_unlock>:
 8008ecc:	4801      	ldr	r0, [pc, #4]	; (8008ed4 <__malloc_unlock+0x8>)
 8008ece:	f7ff bd3f 	b.w	8008950 <__retarget_lock_release_recursive>
 8008ed2:	bf00      	nop
 8008ed4:	20004e68 	.word	0x20004e68

08008ed8 <_free_r>:
 8008ed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eda:	2900      	cmp	r1, #0
 8008edc:	d044      	beq.n	8008f68 <_free_r+0x90>
 8008ede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ee2:	9001      	str	r0, [sp, #4]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eea:	bfb8      	it	lt
 8008eec:	18e4      	addlt	r4, r4, r3
 8008eee:	f7ff ffe7 	bl	8008ec0 <__malloc_lock>
 8008ef2:	4a1e      	ldr	r2, [pc, #120]	; (8008f6c <_free_r+0x94>)
 8008ef4:	9801      	ldr	r0, [sp, #4]
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	b933      	cbnz	r3, 8008f08 <_free_r+0x30>
 8008efa:	6063      	str	r3, [r4, #4]
 8008efc:	6014      	str	r4, [r2, #0]
 8008efe:	b003      	add	sp, #12
 8008f00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f04:	f7ff bfe2 	b.w	8008ecc <__malloc_unlock>
 8008f08:	42a3      	cmp	r3, r4
 8008f0a:	d908      	bls.n	8008f1e <_free_r+0x46>
 8008f0c:	6825      	ldr	r5, [r4, #0]
 8008f0e:	1961      	adds	r1, r4, r5
 8008f10:	428b      	cmp	r3, r1
 8008f12:	bf01      	itttt	eq
 8008f14:	6819      	ldreq	r1, [r3, #0]
 8008f16:	685b      	ldreq	r3, [r3, #4]
 8008f18:	1949      	addeq	r1, r1, r5
 8008f1a:	6021      	streq	r1, [r4, #0]
 8008f1c:	e7ed      	b.n	8008efa <_free_r+0x22>
 8008f1e:	461a      	mov	r2, r3
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	b10b      	cbz	r3, 8008f28 <_free_r+0x50>
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d9fa      	bls.n	8008f1e <_free_r+0x46>
 8008f28:	6811      	ldr	r1, [r2, #0]
 8008f2a:	1855      	adds	r5, r2, r1
 8008f2c:	42a5      	cmp	r5, r4
 8008f2e:	d10b      	bne.n	8008f48 <_free_r+0x70>
 8008f30:	6824      	ldr	r4, [r4, #0]
 8008f32:	4421      	add	r1, r4
 8008f34:	1854      	adds	r4, r2, r1
 8008f36:	42a3      	cmp	r3, r4
 8008f38:	6011      	str	r1, [r2, #0]
 8008f3a:	d1e0      	bne.n	8008efe <_free_r+0x26>
 8008f3c:	681c      	ldr	r4, [r3, #0]
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	6053      	str	r3, [r2, #4]
 8008f42:	4421      	add	r1, r4
 8008f44:	6011      	str	r1, [r2, #0]
 8008f46:	e7da      	b.n	8008efe <_free_r+0x26>
 8008f48:	d902      	bls.n	8008f50 <_free_r+0x78>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	6003      	str	r3, [r0, #0]
 8008f4e:	e7d6      	b.n	8008efe <_free_r+0x26>
 8008f50:	6825      	ldr	r5, [r4, #0]
 8008f52:	1961      	adds	r1, r4, r5
 8008f54:	428b      	cmp	r3, r1
 8008f56:	bf04      	itt	eq
 8008f58:	6819      	ldreq	r1, [r3, #0]
 8008f5a:	685b      	ldreq	r3, [r3, #4]
 8008f5c:	6063      	str	r3, [r4, #4]
 8008f5e:	bf04      	itt	eq
 8008f60:	1949      	addeq	r1, r1, r5
 8008f62:	6021      	streq	r1, [r4, #0]
 8008f64:	6054      	str	r4, [r2, #4]
 8008f66:	e7ca      	b.n	8008efe <_free_r+0x26>
 8008f68:	b003      	add	sp, #12
 8008f6a:	bd30      	pop	{r4, r5, pc}
 8008f6c:	20004e6c 	.word	0x20004e6c

08008f70 <__ssputs_r>:
 8008f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f74:	688e      	ldr	r6, [r1, #8]
 8008f76:	429e      	cmp	r6, r3
 8008f78:	4682      	mov	sl, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	461f      	mov	r7, r3
 8008f80:	d838      	bhi.n	8008ff4 <__ssputs_r+0x84>
 8008f82:	898a      	ldrh	r2, [r1, #12]
 8008f84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f88:	d032      	beq.n	8008ff0 <__ssputs_r+0x80>
 8008f8a:	6825      	ldr	r5, [r4, #0]
 8008f8c:	6909      	ldr	r1, [r1, #16]
 8008f8e:	eba5 0901 	sub.w	r9, r5, r1
 8008f92:	6965      	ldr	r5, [r4, #20]
 8008f94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	444b      	add	r3, r9
 8008fa0:	106d      	asrs	r5, r5, #1
 8008fa2:	429d      	cmp	r5, r3
 8008fa4:	bf38      	it	cc
 8008fa6:	461d      	movcc	r5, r3
 8008fa8:	0553      	lsls	r3, r2, #21
 8008faa:	d531      	bpl.n	8009010 <__ssputs_r+0xa0>
 8008fac:	4629      	mov	r1, r5
 8008fae:	f7ff fd07 	bl	80089c0 <_malloc_r>
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	b950      	cbnz	r0, 8008fcc <__ssputs_r+0x5c>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	f8ca 3000 	str.w	r3, [sl]
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fc2:	81a3      	strh	r3, [r4, #12]
 8008fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fcc:	6921      	ldr	r1, [r4, #16]
 8008fce:	464a      	mov	r2, r9
 8008fd0:	f7ff fcbf 	bl	8008952 <memcpy>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	6126      	str	r6, [r4, #16]
 8008fe2:	6165      	str	r5, [r4, #20]
 8008fe4:	444e      	add	r6, r9
 8008fe6:	eba5 0509 	sub.w	r5, r5, r9
 8008fea:	6026      	str	r6, [r4, #0]
 8008fec:	60a5      	str	r5, [r4, #8]
 8008fee:	463e      	mov	r6, r7
 8008ff0:	42be      	cmp	r6, r7
 8008ff2:	d900      	bls.n	8008ff6 <__ssputs_r+0x86>
 8008ff4:	463e      	mov	r6, r7
 8008ff6:	6820      	ldr	r0, [r4, #0]
 8008ff8:	4632      	mov	r2, r6
 8008ffa:	4641      	mov	r1, r8
 8008ffc:	f000 fd3a 	bl	8009a74 <memmove>
 8009000:	68a3      	ldr	r3, [r4, #8]
 8009002:	1b9b      	subs	r3, r3, r6
 8009004:	60a3      	str	r3, [r4, #8]
 8009006:	6823      	ldr	r3, [r4, #0]
 8009008:	4433      	add	r3, r6
 800900a:	6023      	str	r3, [r4, #0]
 800900c:	2000      	movs	r0, #0
 800900e:	e7db      	b.n	8008fc8 <__ssputs_r+0x58>
 8009010:	462a      	mov	r2, r5
 8009012:	f000 fd49 	bl	8009aa8 <_realloc_r>
 8009016:	4606      	mov	r6, r0
 8009018:	2800      	cmp	r0, #0
 800901a:	d1e1      	bne.n	8008fe0 <__ssputs_r+0x70>
 800901c:	6921      	ldr	r1, [r4, #16]
 800901e:	4650      	mov	r0, sl
 8009020:	f7ff ff5a 	bl	8008ed8 <_free_r>
 8009024:	e7c7      	b.n	8008fb6 <__ssputs_r+0x46>
	...

08009028 <_svfiprintf_r>:
 8009028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800902c:	4698      	mov	r8, r3
 800902e:	898b      	ldrh	r3, [r1, #12]
 8009030:	061b      	lsls	r3, r3, #24
 8009032:	b09d      	sub	sp, #116	; 0x74
 8009034:	4607      	mov	r7, r0
 8009036:	460d      	mov	r5, r1
 8009038:	4614      	mov	r4, r2
 800903a:	d50e      	bpl.n	800905a <_svfiprintf_r+0x32>
 800903c:	690b      	ldr	r3, [r1, #16]
 800903e:	b963      	cbnz	r3, 800905a <_svfiprintf_r+0x32>
 8009040:	2140      	movs	r1, #64	; 0x40
 8009042:	f7ff fcbd 	bl	80089c0 <_malloc_r>
 8009046:	6028      	str	r0, [r5, #0]
 8009048:	6128      	str	r0, [r5, #16]
 800904a:	b920      	cbnz	r0, 8009056 <_svfiprintf_r+0x2e>
 800904c:	230c      	movs	r3, #12
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	f04f 30ff 	mov.w	r0, #4294967295
 8009054:	e0d1      	b.n	80091fa <_svfiprintf_r+0x1d2>
 8009056:	2340      	movs	r3, #64	; 0x40
 8009058:	616b      	str	r3, [r5, #20]
 800905a:	2300      	movs	r3, #0
 800905c:	9309      	str	r3, [sp, #36]	; 0x24
 800905e:	2320      	movs	r3, #32
 8009060:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009064:	f8cd 800c 	str.w	r8, [sp, #12]
 8009068:	2330      	movs	r3, #48	; 0x30
 800906a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009214 <_svfiprintf_r+0x1ec>
 800906e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009072:	f04f 0901 	mov.w	r9, #1
 8009076:	4623      	mov	r3, r4
 8009078:	469a      	mov	sl, r3
 800907a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800907e:	b10a      	cbz	r2, 8009084 <_svfiprintf_r+0x5c>
 8009080:	2a25      	cmp	r2, #37	; 0x25
 8009082:	d1f9      	bne.n	8009078 <_svfiprintf_r+0x50>
 8009084:	ebba 0b04 	subs.w	fp, sl, r4
 8009088:	d00b      	beq.n	80090a2 <_svfiprintf_r+0x7a>
 800908a:	465b      	mov	r3, fp
 800908c:	4622      	mov	r2, r4
 800908e:	4629      	mov	r1, r5
 8009090:	4638      	mov	r0, r7
 8009092:	f7ff ff6d 	bl	8008f70 <__ssputs_r>
 8009096:	3001      	adds	r0, #1
 8009098:	f000 80aa 	beq.w	80091f0 <_svfiprintf_r+0x1c8>
 800909c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800909e:	445a      	add	r2, fp
 80090a0:	9209      	str	r2, [sp, #36]	; 0x24
 80090a2:	f89a 3000 	ldrb.w	r3, [sl]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 80a2 	beq.w	80091f0 <_svfiprintf_r+0x1c8>
 80090ac:	2300      	movs	r3, #0
 80090ae:	f04f 32ff 	mov.w	r2, #4294967295
 80090b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b6:	f10a 0a01 	add.w	sl, sl, #1
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	9307      	str	r3, [sp, #28]
 80090be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c2:	931a      	str	r3, [sp, #104]	; 0x68
 80090c4:	4654      	mov	r4, sl
 80090c6:	2205      	movs	r2, #5
 80090c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090cc:	4851      	ldr	r0, [pc, #324]	; (8009214 <_svfiprintf_r+0x1ec>)
 80090ce:	f7f7 f887 	bl	80001e0 <memchr>
 80090d2:	9a04      	ldr	r2, [sp, #16]
 80090d4:	b9d8      	cbnz	r0, 800910e <_svfiprintf_r+0xe6>
 80090d6:	06d0      	lsls	r0, r2, #27
 80090d8:	bf44      	itt	mi
 80090da:	2320      	movmi	r3, #32
 80090dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e0:	0711      	lsls	r1, r2, #28
 80090e2:	bf44      	itt	mi
 80090e4:	232b      	movmi	r3, #43	; 0x2b
 80090e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090ea:	f89a 3000 	ldrb.w	r3, [sl]
 80090ee:	2b2a      	cmp	r3, #42	; 0x2a
 80090f0:	d015      	beq.n	800911e <_svfiprintf_r+0xf6>
 80090f2:	9a07      	ldr	r2, [sp, #28]
 80090f4:	4654      	mov	r4, sl
 80090f6:	2000      	movs	r0, #0
 80090f8:	f04f 0c0a 	mov.w	ip, #10
 80090fc:	4621      	mov	r1, r4
 80090fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009102:	3b30      	subs	r3, #48	; 0x30
 8009104:	2b09      	cmp	r3, #9
 8009106:	d94e      	bls.n	80091a6 <_svfiprintf_r+0x17e>
 8009108:	b1b0      	cbz	r0, 8009138 <_svfiprintf_r+0x110>
 800910a:	9207      	str	r2, [sp, #28]
 800910c:	e014      	b.n	8009138 <_svfiprintf_r+0x110>
 800910e:	eba0 0308 	sub.w	r3, r0, r8
 8009112:	fa09 f303 	lsl.w	r3, r9, r3
 8009116:	4313      	orrs	r3, r2
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	46a2      	mov	sl, r4
 800911c:	e7d2      	b.n	80090c4 <_svfiprintf_r+0x9c>
 800911e:	9b03      	ldr	r3, [sp, #12]
 8009120:	1d19      	adds	r1, r3, #4
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	9103      	str	r1, [sp, #12]
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfbb      	ittet	lt
 800912a:	425b      	neglt	r3, r3
 800912c:	f042 0202 	orrlt.w	r2, r2, #2
 8009130:	9307      	strge	r3, [sp, #28]
 8009132:	9307      	strlt	r3, [sp, #28]
 8009134:	bfb8      	it	lt
 8009136:	9204      	strlt	r2, [sp, #16]
 8009138:	7823      	ldrb	r3, [r4, #0]
 800913a:	2b2e      	cmp	r3, #46	; 0x2e
 800913c:	d10c      	bne.n	8009158 <_svfiprintf_r+0x130>
 800913e:	7863      	ldrb	r3, [r4, #1]
 8009140:	2b2a      	cmp	r3, #42	; 0x2a
 8009142:	d135      	bne.n	80091b0 <_svfiprintf_r+0x188>
 8009144:	9b03      	ldr	r3, [sp, #12]
 8009146:	1d1a      	adds	r2, r3, #4
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	9203      	str	r2, [sp, #12]
 800914c:	2b00      	cmp	r3, #0
 800914e:	bfb8      	it	lt
 8009150:	f04f 33ff 	movlt.w	r3, #4294967295
 8009154:	3402      	adds	r4, #2
 8009156:	9305      	str	r3, [sp, #20]
 8009158:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009224 <_svfiprintf_r+0x1fc>
 800915c:	7821      	ldrb	r1, [r4, #0]
 800915e:	2203      	movs	r2, #3
 8009160:	4650      	mov	r0, sl
 8009162:	f7f7 f83d 	bl	80001e0 <memchr>
 8009166:	b140      	cbz	r0, 800917a <_svfiprintf_r+0x152>
 8009168:	2340      	movs	r3, #64	; 0x40
 800916a:	eba0 000a 	sub.w	r0, r0, sl
 800916e:	fa03 f000 	lsl.w	r0, r3, r0
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	4303      	orrs	r3, r0
 8009176:	3401      	adds	r4, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917e:	4826      	ldr	r0, [pc, #152]	; (8009218 <_svfiprintf_r+0x1f0>)
 8009180:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009184:	2206      	movs	r2, #6
 8009186:	f7f7 f82b 	bl	80001e0 <memchr>
 800918a:	2800      	cmp	r0, #0
 800918c:	d038      	beq.n	8009200 <_svfiprintf_r+0x1d8>
 800918e:	4b23      	ldr	r3, [pc, #140]	; (800921c <_svfiprintf_r+0x1f4>)
 8009190:	bb1b      	cbnz	r3, 80091da <_svfiprintf_r+0x1b2>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	3307      	adds	r3, #7
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	3308      	adds	r3, #8
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a0:	4433      	add	r3, r6
 80091a2:	9309      	str	r3, [sp, #36]	; 0x24
 80091a4:	e767      	b.n	8009076 <_svfiprintf_r+0x4e>
 80091a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80091aa:	460c      	mov	r4, r1
 80091ac:	2001      	movs	r0, #1
 80091ae:	e7a5      	b.n	80090fc <_svfiprintf_r+0xd4>
 80091b0:	2300      	movs	r3, #0
 80091b2:	3401      	adds	r4, #1
 80091b4:	9305      	str	r3, [sp, #20]
 80091b6:	4619      	mov	r1, r3
 80091b8:	f04f 0c0a 	mov.w	ip, #10
 80091bc:	4620      	mov	r0, r4
 80091be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091c2:	3a30      	subs	r2, #48	; 0x30
 80091c4:	2a09      	cmp	r2, #9
 80091c6:	d903      	bls.n	80091d0 <_svfiprintf_r+0x1a8>
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0c5      	beq.n	8009158 <_svfiprintf_r+0x130>
 80091cc:	9105      	str	r1, [sp, #20]
 80091ce:	e7c3      	b.n	8009158 <_svfiprintf_r+0x130>
 80091d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80091d4:	4604      	mov	r4, r0
 80091d6:	2301      	movs	r3, #1
 80091d8:	e7f0      	b.n	80091bc <_svfiprintf_r+0x194>
 80091da:	ab03      	add	r3, sp, #12
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	462a      	mov	r2, r5
 80091e0:	4b0f      	ldr	r3, [pc, #60]	; (8009220 <_svfiprintf_r+0x1f8>)
 80091e2:	a904      	add	r1, sp, #16
 80091e4:	4638      	mov	r0, r7
 80091e6:	f3af 8000 	nop.w
 80091ea:	1c42      	adds	r2, r0, #1
 80091ec:	4606      	mov	r6, r0
 80091ee:	d1d6      	bne.n	800919e <_svfiprintf_r+0x176>
 80091f0:	89ab      	ldrh	r3, [r5, #12]
 80091f2:	065b      	lsls	r3, r3, #25
 80091f4:	f53f af2c 	bmi.w	8009050 <_svfiprintf_r+0x28>
 80091f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091fa:	b01d      	add	sp, #116	; 0x74
 80091fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009200:	ab03      	add	r3, sp, #12
 8009202:	9300      	str	r3, [sp, #0]
 8009204:	462a      	mov	r2, r5
 8009206:	4b06      	ldr	r3, [pc, #24]	; (8009220 <_svfiprintf_r+0x1f8>)
 8009208:	a904      	add	r1, sp, #16
 800920a:	4638      	mov	r0, r7
 800920c:	f000 f9d4 	bl	80095b8 <_printf_i>
 8009210:	e7eb      	b.n	80091ea <_svfiprintf_r+0x1c2>
 8009212:	bf00      	nop
 8009214:	08009d94 	.word	0x08009d94
 8009218:	08009d9e 	.word	0x08009d9e
 800921c:	00000000 	.word	0x00000000
 8009220:	08008f71 	.word	0x08008f71
 8009224:	08009d9a 	.word	0x08009d9a

08009228 <__sfputc_r>:
 8009228:	6893      	ldr	r3, [r2, #8]
 800922a:	3b01      	subs	r3, #1
 800922c:	2b00      	cmp	r3, #0
 800922e:	b410      	push	{r4}
 8009230:	6093      	str	r3, [r2, #8]
 8009232:	da08      	bge.n	8009246 <__sfputc_r+0x1e>
 8009234:	6994      	ldr	r4, [r2, #24]
 8009236:	42a3      	cmp	r3, r4
 8009238:	db01      	blt.n	800923e <__sfputc_r+0x16>
 800923a:	290a      	cmp	r1, #10
 800923c:	d103      	bne.n	8009246 <__sfputc_r+0x1e>
 800923e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009242:	f000 baf1 	b.w	8009828 <__swbuf_r>
 8009246:	6813      	ldr	r3, [r2, #0]
 8009248:	1c58      	adds	r0, r3, #1
 800924a:	6010      	str	r0, [r2, #0]
 800924c:	7019      	strb	r1, [r3, #0]
 800924e:	4608      	mov	r0, r1
 8009250:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009254:	4770      	bx	lr

08009256 <__sfputs_r>:
 8009256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009258:	4606      	mov	r6, r0
 800925a:	460f      	mov	r7, r1
 800925c:	4614      	mov	r4, r2
 800925e:	18d5      	adds	r5, r2, r3
 8009260:	42ac      	cmp	r4, r5
 8009262:	d101      	bne.n	8009268 <__sfputs_r+0x12>
 8009264:	2000      	movs	r0, #0
 8009266:	e007      	b.n	8009278 <__sfputs_r+0x22>
 8009268:	f814 1b01 	ldrb.w	r1, [r4], #1
 800926c:	463a      	mov	r2, r7
 800926e:	4630      	mov	r0, r6
 8009270:	f7ff ffda 	bl	8009228 <__sfputc_r>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d1f3      	bne.n	8009260 <__sfputs_r+0xa>
 8009278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800927c <_vfiprintf_r>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	460d      	mov	r5, r1
 8009282:	b09d      	sub	sp, #116	; 0x74
 8009284:	4614      	mov	r4, r2
 8009286:	4698      	mov	r8, r3
 8009288:	4606      	mov	r6, r0
 800928a:	b118      	cbz	r0, 8009294 <_vfiprintf_r+0x18>
 800928c:	6983      	ldr	r3, [r0, #24]
 800928e:	b90b      	cbnz	r3, 8009294 <_vfiprintf_r+0x18>
 8009290:	f7ff fa9a 	bl	80087c8 <__sinit>
 8009294:	4b89      	ldr	r3, [pc, #548]	; (80094bc <_vfiprintf_r+0x240>)
 8009296:	429d      	cmp	r5, r3
 8009298:	d11b      	bne.n	80092d2 <_vfiprintf_r+0x56>
 800929a:	6875      	ldr	r5, [r6, #4]
 800929c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800929e:	07d9      	lsls	r1, r3, #31
 80092a0:	d405      	bmi.n	80092ae <_vfiprintf_r+0x32>
 80092a2:	89ab      	ldrh	r3, [r5, #12]
 80092a4:	059a      	lsls	r2, r3, #22
 80092a6:	d402      	bmi.n	80092ae <_vfiprintf_r+0x32>
 80092a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092aa:	f7ff fb50 	bl	800894e <__retarget_lock_acquire_recursive>
 80092ae:	89ab      	ldrh	r3, [r5, #12]
 80092b0:	071b      	lsls	r3, r3, #28
 80092b2:	d501      	bpl.n	80092b8 <_vfiprintf_r+0x3c>
 80092b4:	692b      	ldr	r3, [r5, #16]
 80092b6:	b9eb      	cbnz	r3, 80092f4 <_vfiprintf_r+0x78>
 80092b8:	4629      	mov	r1, r5
 80092ba:	4630      	mov	r0, r6
 80092bc:	f000 fb06 	bl	80098cc <__swsetup_r>
 80092c0:	b1c0      	cbz	r0, 80092f4 <_vfiprintf_r+0x78>
 80092c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c4:	07dc      	lsls	r4, r3, #31
 80092c6:	d50e      	bpl.n	80092e6 <_vfiprintf_r+0x6a>
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295
 80092cc:	b01d      	add	sp, #116	; 0x74
 80092ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092d2:	4b7b      	ldr	r3, [pc, #492]	; (80094c0 <_vfiprintf_r+0x244>)
 80092d4:	429d      	cmp	r5, r3
 80092d6:	d101      	bne.n	80092dc <_vfiprintf_r+0x60>
 80092d8:	68b5      	ldr	r5, [r6, #8]
 80092da:	e7df      	b.n	800929c <_vfiprintf_r+0x20>
 80092dc:	4b79      	ldr	r3, [pc, #484]	; (80094c4 <_vfiprintf_r+0x248>)
 80092de:	429d      	cmp	r5, r3
 80092e0:	bf08      	it	eq
 80092e2:	68f5      	ldreq	r5, [r6, #12]
 80092e4:	e7da      	b.n	800929c <_vfiprintf_r+0x20>
 80092e6:	89ab      	ldrh	r3, [r5, #12]
 80092e8:	0598      	lsls	r0, r3, #22
 80092ea:	d4ed      	bmi.n	80092c8 <_vfiprintf_r+0x4c>
 80092ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ee:	f7ff fb2f 	bl	8008950 <__retarget_lock_release_recursive>
 80092f2:	e7e9      	b.n	80092c8 <_vfiprintf_r+0x4c>
 80092f4:	2300      	movs	r3, #0
 80092f6:	9309      	str	r3, [sp, #36]	; 0x24
 80092f8:	2320      	movs	r3, #32
 80092fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8009302:	2330      	movs	r3, #48	; 0x30
 8009304:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80094c8 <_vfiprintf_r+0x24c>
 8009308:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800930c:	f04f 0901 	mov.w	r9, #1
 8009310:	4623      	mov	r3, r4
 8009312:	469a      	mov	sl, r3
 8009314:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009318:	b10a      	cbz	r2, 800931e <_vfiprintf_r+0xa2>
 800931a:	2a25      	cmp	r2, #37	; 0x25
 800931c:	d1f9      	bne.n	8009312 <_vfiprintf_r+0x96>
 800931e:	ebba 0b04 	subs.w	fp, sl, r4
 8009322:	d00b      	beq.n	800933c <_vfiprintf_r+0xc0>
 8009324:	465b      	mov	r3, fp
 8009326:	4622      	mov	r2, r4
 8009328:	4629      	mov	r1, r5
 800932a:	4630      	mov	r0, r6
 800932c:	f7ff ff93 	bl	8009256 <__sfputs_r>
 8009330:	3001      	adds	r0, #1
 8009332:	f000 80aa 	beq.w	800948a <_vfiprintf_r+0x20e>
 8009336:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009338:	445a      	add	r2, fp
 800933a:	9209      	str	r2, [sp, #36]	; 0x24
 800933c:	f89a 3000 	ldrb.w	r3, [sl]
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 80a2 	beq.w	800948a <_vfiprintf_r+0x20e>
 8009346:	2300      	movs	r3, #0
 8009348:	f04f 32ff 	mov.w	r2, #4294967295
 800934c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009350:	f10a 0a01 	add.w	sl, sl, #1
 8009354:	9304      	str	r3, [sp, #16]
 8009356:	9307      	str	r3, [sp, #28]
 8009358:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800935c:	931a      	str	r3, [sp, #104]	; 0x68
 800935e:	4654      	mov	r4, sl
 8009360:	2205      	movs	r2, #5
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	4858      	ldr	r0, [pc, #352]	; (80094c8 <_vfiprintf_r+0x24c>)
 8009368:	f7f6 ff3a 	bl	80001e0 <memchr>
 800936c:	9a04      	ldr	r2, [sp, #16]
 800936e:	b9d8      	cbnz	r0, 80093a8 <_vfiprintf_r+0x12c>
 8009370:	06d1      	lsls	r1, r2, #27
 8009372:	bf44      	itt	mi
 8009374:	2320      	movmi	r3, #32
 8009376:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800937a:	0713      	lsls	r3, r2, #28
 800937c:	bf44      	itt	mi
 800937e:	232b      	movmi	r3, #43	; 0x2b
 8009380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009384:	f89a 3000 	ldrb.w	r3, [sl]
 8009388:	2b2a      	cmp	r3, #42	; 0x2a
 800938a:	d015      	beq.n	80093b8 <_vfiprintf_r+0x13c>
 800938c:	9a07      	ldr	r2, [sp, #28]
 800938e:	4654      	mov	r4, sl
 8009390:	2000      	movs	r0, #0
 8009392:	f04f 0c0a 	mov.w	ip, #10
 8009396:	4621      	mov	r1, r4
 8009398:	f811 3b01 	ldrb.w	r3, [r1], #1
 800939c:	3b30      	subs	r3, #48	; 0x30
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d94e      	bls.n	8009440 <_vfiprintf_r+0x1c4>
 80093a2:	b1b0      	cbz	r0, 80093d2 <_vfiprintf_r+0x156>
 80093a4:	9207      	str	r2, [sp, #28]
 80093a6:	e014      	b.n	80093d2 <_vfiprintf_r+0x156>
 80093a8:	eba0 0308 	sub.w	r3, r0, r8
 80093ac:	fa09 f303 	lsl.w	r3, r9, r3
 80093b0:	4313      	orrs	r3, r2
 80093b2:	9304      	str	r3, [sp, #16]
 80093b4:	46a2      	mov	sl, r4
 80093b6:	e7d2      	b.n	800935e <_vfiprintf_r+0xe2>
 80093b8:	9b03      	ldr	r3, [sp, #12]
 80093ba:	1d19      	adds	r1, r3, #4
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	9103      	str	r1, [sp, #12]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	bfbb      	ittet	lt
 80093c4:	425b      	neglt	r3, r3
 80093c6:	f042 0202 	orrlt.w	r2, r2, #2
 80093ca:	9307      	strge	r3, [sp, #28]
 80093cc:	9307      	strlt	r3, [sp, #28]
 80093ce:	bfb8      	it	lt
 80093d0:	9204      	strlt	r2, [sp, #16]
 80093d2:	7823      	ldrb	r3, [r4, #0]
 80093d4:	2b2e      	cmp	r3, #46	; 0x2e
 80093d6:	d10c      	bne.n	80093f2 <_vfiprintf_r+0x176>
 80093d8:	7863      	ldrb	r3, [r4, #1]
 80093da:	2b2a      	cmp	r3, #42	; 0x2a
 80093dc:	d135      	bne.n	800944a <_vfiprintf_r+0x1ce>
 80093de:	9b03      	ldr	r3, [sp, #12]
 80093e0:	1d1a      	adds	r2, r3, #4
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	9203      	str	r2, [sp, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	bfb8      	it	lt
 80093ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80093ee:	3402      	adds	r4, #2
 80093f0:	9305      	str	r3, [sp, #20]
 80093f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80094d8 <_vfiprintf_r+0x25c>
 80093f6:	7821      	ldrb	r1, [r4, #0]
 80093f8:	2203      	movs	r2, #3
 80093fa:	4650      	mov	r0, sl
 80093fc:	f7f6 fef0 	bl	80001e0 <memchr>
 8009400:	b140      	cbz	r0, 8009414 <_vfiprintf_r+0x198>
 8009402:	2340      	movs	r3, #64	; 0x40
 8009404:	eba0 000a 	sub.w	r0, r0, sl
 8009408:	fa03 f000 	lsl.w	r0, r3, r0
 800940c:	9b04      	ldr	r3, [sp, #16]
 800940e:	4303      	orrs	r3, r0
 8009410:	3401      	adds	r4, #1
 8009412:	9304      	str	r3, [sp, #16]
 8009414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009418:	482c      	ldr	r0, [pc, #176]	; (80094cc <_vfiprintf_r+0x250>)
 800941a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800941e:	2206      	movs	r2, #6
 8009420:	f7f6 fede 	bl	80001e0 <memchr>
 8009424:	2800      	cmp	r0, #0
 8009426:	d03f      	beq.n	80094a8 <_vfiprintf_r+0x22c>
 8009428:	4b29      	ldr	r3, [pc, #164]	; (80094d0 <_vfiprintf_r+0x254>)
 800942a:	bb1b      	cbnz	r3, 8009474 <_vfiprintf_r+0x1f8>
 800942c:	9b03      	ldr	r3, [sp, #12]
 800942e:	3307      	adds	r3, #7
 8009430:	f023 0307 	bic.w	r3, r3, #7
 8009434:	3308      	adds	r3, #8
 8009436:	9303      	str	r3, [sp, #12]
 8009438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943a:	443b      	add	r3, r7
 800943c:	9309      	str	r3, [sp, #36]	; 0x24
 800943e:	e767      	b.n	8009310 <_vfiprintf_r+0x94>
 8009440:	fb0c 3202 	mla	r2, ip, r2, r3
 8009444:	460c      	mov	r4, r1
 8009446:	2001      	movs	r0, #1
 8009448:	e7a5      	b.n	8009396 <_vfiprintf_r+0x11a>
 800944a:	2300      	movs	r3, #0
 800944c:	3401      	adds	r4, #1
 800944e:	9305      	str	r3, [sp, #20]
 8009450:	4619      	mov	r1, r3
 8009452:	f04f 0c0a 	mov.w	ip, #10
 8009456:	4620      	mov	r0, r4
 8009458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800945c:	3a30      	subs	r2, #48	; 0x30
 800945e:	2a09      	cmp	r2, #9
 8009460:	d903      	bls.n	800946a <_vfiprintf_r+0x1ee>
 8009462:	2b00      	cmp	r3, #0
 8009464:	d0c5      	beq.n	80093f2 <_vfiprintf_r+0x176>
 8009466:	9105      	str	r1, [sp, #20]
 8009468:	e7c3      	b.n	80093f2 <_vfiprintf_r+0x176>
 800946a:	fb0c 2101 	mla	r1, ip, r1, r2
 800946e:	4604      	mov	r4, r0
 8009470:	2301      	movs	r3, #1
 8009472:	e7f0      	b.n	8009456 <_vfiprintf_r+0x1da>
 8009474:	ab03      	add	r3, sp, #12
 8009476:	9300      	str	r3, [sp, #0]
 8009478:	462a      	mov	r2, r5
 800947a:	4b16      	ldr	r3, [pc, #88]	; (80094d4 <_vfiprintf_r+0x258>)
 800947c:	a904      	add	r1, sp, #16
 800947e:	4630      	mov	r0, r6
 8009480:	f3af 8000 	nop.w
 8009484:	4607      	mov	r7, r0
 8009486:	1c78      	adds	r0, r7, #1
 8009488:	d1d6      	bne.n	8009438 <_vfiprintf_r+0x1bc>
 800948a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800948c:	07d9      	lsls	r1, r3, #31
 800948e:	d405      	bmi.n	800949c <_vfiprintf_r+0x220>
 8009490:	89ab      	ldrh	r3, [r5, #12]
 8009492:	059a      	lsls	r2, r3, #22
 8009494:	d402      	bmi.n	800949c <_vfiprintf_r+0x220>
 8009496:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009498:	f7ff fa5a 	bl	8008950 <__retarget_lock_release_recursive>
 800949c:	89ab      	ldrh	r3, [r5, #12]
 800949e:	065b      	lsls	r3, r3, #25
 80094a0:	f53f af12 	bmi.w	80092c8 <_vfiprintf_r+0x4c>
 80094a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80094a6:	e711      	b.n	80092cc <_vfiprintf_r+0x50>
 80094a8:	ab03      	add	r3, sp, #12
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	462a      	mov	r2, r5
 80094ae:	4b09      	ldr	r3, [pc, #36]	; (80094d4 <_vfiprintf_r+0x258>)
 80094b0:	a904      	add	r1, sp, #16
 80094b2:	4630      	mov	r0, r6
 80094b4:	f000 f880 	bl	80095b8 <_printf_i>
 80094b8:	e7e4      	b.n	8009484 <_vfiprintf_r+0x208>
 80094ba:	bf00      	nop
 80094bc:	08009d50 	.word	0x08009d50
 80094c0:	08009d70 	.word	0x08009d70
 80094c4:	08009d30 	.word	0x08009d30
 80094c8:	08009d94 	.word	0x08009d94
 80094cc:	08009d9e 	.word	0x08009d9e
 80094d0:	00000000 	.word	0x00000000
 80094d4:	08009257 	.word	0x08009257
 80094d8:	08009d9a 	.word	0x08009d9a

080094dc <_printf_common>:
 80094dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e0:	4616      	mov	r6, r2
 80094e2:	4699      	mov	r9, r3
 80094e4:	688a      	ldr	r2, [r1, #8]
 80094e6:	690b      	ldr	r3, [r1, #16]
 80094e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094ec:	4293      	cmp	r3, r2
 80094ee:	bfb8      	it	lt
 80094f0:	4613      	movlt	r3, r2
 80094f2:	6033      	str	r3, [r6, #0]
 80094f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094f8:	4607      	mov	r7, r0
 80094fa:	460c      	mov	r4, r1
 80094fc:	b10a      	cbz	r2, 8009502 <_printf_common+0x26>
 80094fe:	3301      	adds	r3, #1
 8009500:	6033      	str	r3, [r6, #0]
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	0699      	lsls	r1, r3, #26
 8009506:	bf42      	ittt	mi
 8009508:	6833      	ldrmi	r3, [r6, #0]
 800950a:	3302      	addmi	r3, #2
 800950c:	6033      	strmi	r3, [r6, #0]
 800950e:	6825      	ldr	r5, [r4, #0]
 8009510:	f015 0506 	ands.w	r5, r5, #6
 8009514:	d106      	bne.n	8009524 <_printf_common+0x48>
 8009516:	f104 0a19 	add.w	sl, r4, #25
 800951a:	68e3      	ldr	r3, [r4, #12]
 800951c:	6832      	ldr	r2, [r6, #0]
 800951e:	1a9b      	subs	r3, r3, r2
 8009520:	42ab      	cmp	r3, r5
 8009522:	dc26      	bgt.n	8009572 <_printf_common+0x96>
 8009524:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009528:	1e13      	subs	r3, r2, #0
 800952a:	6822      	ldr	r2, [r4, #0]
 800952c:	bf18      	it	ne
 800952e:	2301      	movne	r3, #1
 8009530:	0692      	lsls	r2, r2, #26
 8009532:	d42b      	bmi.n	800958c <_printf_common+0xb0>
 8009534:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009538:	4649      	mov	r1, r9
 800953a:	4638      	mov	r0, r7
 800953c:	47c0      	blx	r8
 800953e:	3001      	adds	r0, #1
 8009540:	d01e      	beq.n	8009580 <_printf_common+0xa4>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	68e5      	ldr	r5, [r4, #12]
 8009546:	6832      	ldr	r2, [r6, #0]
 8009548:	f003 0306 	and.w	r3, r3, #6
 800954c:	2b04      	cmp	r3, #4
 800954e:	bf08      	it	eq
 8009550:	1aad      	subeq	r5, r5, r2
 8009552:	68a3      	ldr	r3, [r4, #8]
 8009554:	6922      	ldr	r2, [r4, #16]
 8009556:	bf0c      	ite	eq
 8009558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800955c:	2500      	movne	r5, #0
 800955e:	4293      	cmp	r3, r2
 8009560:	bfc4      	itt	gt
 8009562:	1a9b      	subgt	r3, r3, r2
 8009564:	18ed      	addgt	r5, r5, r3
 8009566:	2600      	movs	r6, #0
 8009568:	341a      	adds	r4, #26
 800956a:	42b5      	cmp	r5, r6
 800956c:	d11a      	bne.n	80095a4 <_printf_common+0xc8>
 800956e:	2000      	movs	r0, #0
 8009570:	e008      	b.n	8009584 <_printf_common+0xa8>
 8009572:	2301      	movs	r3, #1
 8009574:	4652      	mov	r2, sl
 8009576:	4649      	mov	r1, r9
 8009578:	4638      	mov	r0, r7
 800957a:	47c0      	blx	r8
 800957c:	3001      	adds	r0, #1
 800957e:	d103      	bne.n	8009588 <_printf_common+0xac>
 8009580:	f04f 30ff 	mov.w	r0, #4294967295
 8009584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009588:	3501      	adds	r5, #1
 800958a:	e7c6      	b.n	800951a <_printf_common+0x3e>
 800958c:	18e1      	adds	r1, r4, r3
 800958e:	1c5a      	adds	r2, r3, #1
 8009590:	2030      	movs	r0, #48	; 0x30
 8009592:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009596:	4422      	add	r2, r4
 8009598:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800959c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095a0:	3302      	adds	r3, #2
 80095a2:	e7c7      	b.n	8009534 <_printf_common+0x58>
 80095a4:	2301      	movs	r3, #1
 80095a6:	4622      	mov	r2, r4
 80095a8:	4649      	mov	r1, r9
 80095aa:	4638      	mov	r0, r7
 80095ac:	47c0      	blx	r8
 80095ae:	3001      	adds	r0, #1
 80095b0:	d0e6      	beq.n	8009580 <_printf_common+0xa4>
 80095b2:	3601      	adds	r6, #1
 80095b4:	e7d9      	b.n	800956a <_printf_common+0x8e>
	...

080095b8 <_printf_i>:
 80095b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095bc:	7e0f      	ldrb	r7, [r1, #24]
 80095be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095c0:	2f78      	cmp	r7, #120	; 0x78
 80095c2:	4691      	mov	r9, r2
 80095c4:	4680      	mov	r8, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	469a      	mov	sl, r3
 80095ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095ce:	d807      	bhi.n	80095e0 <_printf_i+0x28>
 80095d0:	2f62      	cmp	r7, #98	; 0x62
 80095d2:	d80a      	bhi.n	80095ea <_printf_i+0x32>
 80095d4:	2f00      	cmp	r7, #0
 80095d6:	f000 80d8 	beq.w	800978a <_printf_i+0x1d2>
 80095da:	2f58      	cmp	r7, #88	; 0x58
 80095dc:	f000 80a3 	beq.w	8009726 <_printf_i+0x16e>
 80095e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095e8:	e03a      	b.n	8009660 <_printf_i+0xa8>
 80095ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095ee:	2b15      	cmp	r3, #21
 80095f0:	d8f6      	bhi.n	80095e0 <_printf_i+0x28>
 80095f2:	a101      	add	r1, pc, #4	; (adr r1, 80095f8 <_printf_i+0x40>)
 80095f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f8:	08009651 	.word	0x08009651
 80095fc:	08009665 	.word	0x08009665
 8009600:	080095e1 	.word	0x080095e1
 8009604:	080095e1 	.word	0x080095e1
 8009608:	080095e1 	.word	0x080095e1
 800960c:	080095e1 	.word	0x080095e1
 8009610:	08009665 	.word	0x08009665
 8009614:	080095e1 	.word	0x080095e1
 8009618:	080095e1 	.word	0x080095e1
 800961c:	080095e1 	.word	0x080095e1
 8009620:	080095e1 	.word	0x080095e1
 8009624:	08009771 	.word	0x08009771
 8009628:	08009695 	.word	0x08009695
 800962c:	08009753 	.word	0x08009753
 8009630:	080095e1 	.word	0x080095e1
 8009634:	080095e1 	.word	0x080095e1
 8009638:	08009793 	.word	0x08009793
 800963c:	080095e1 	.word	0x080095e1
 8009640:	08009695 	.word	0x08009695
 8009644:	080095e1 	.word	0x080095e1
 8009648:	080095e1 	.word	0x080095e1
 800964c:	0800975b 	.word	0x0800975b
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	1d1a      	adds	r2, r3, #4
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	602a      	str	r2, [r5, #0]
 8009658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800965c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009660:	2301      	movs	r3, #1
 8009662:	e0a3      	b.n	80097ac <_printf_i+0x1f4>
 8009664:	6820      	ldr	r0, [r4, #0]
 8009666:	6829      	ldr	r1, [r5, #0]
 8009668:	0606      	lsls	r6, r0, #24
 800966a:	f101 0304 	add.w	r3, r1, #4
 800966e:	d50a      	bpl.n	8009686 <_printf_i+0xce>
 8009670:	680e      	ldr	r6, [r1, #0]
 8009672:	602b      	str	r3, [r5, #0]
 8009674:	2e00      	cmp	r6, #0
 8009676:	da03      	bge.n	8009680 <_printf_i+0xc8>
 8009678:	232d      	movs	r3, #45	; 0x2d
 800967a:	4276      	negs	r6, r6
 800967c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009680:	485e      	ldr	r0, [pc, #376]	; (80097fc <_printf_i+0x244>)
 8009682:	230a      	movs	r3, #10
 8009684:	e019      	b.n	80096ba <_printf_i+0x102>
 8009686:	680e      	ldr	r6, [r1, #0]
 8009688:	602b      	str	r3, [r5, #0]
 800968a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800968e:	bf18      	it	ne
 8009690:	b236      	sxthne	r6, r6
 8009692:	e7ef      	b.n	8009674 <_printf_i+0xbc>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	6820      	ldr	r0, [r4, #0]
 8009698:	1d19      	adds	r1, r3, #4
 800969a:	6029      	str	r1, [r5, #0]
 800969c:	0601      	lsls	r1, r0, #24
 800969e:	d501      	bpl.n	80096a4 <_printf_i+0xec>
 80096a0:	681e      	ldr	r6, [r3, #0]
 80096a2:	e002      	b.n	80096aa <_printf_i+0xf2>
 80096a4:	0646      	lsls	r6, r0, #25
 80096a6:	d5fb      	bpl.n	80096a0 <_printf_i+0xe8>
 80096a8:	881e      	ldrh	r6, [r3, #0]
 80096aa:	4854      	ldr	r0, [pc, #336]	; (80097fc <_printf_i+0x244>)
 80096ac:	2f6f      	cmp	r7, #111	; 0x6f
 80096ae:	bf0c      	ite	eq
 80096b0:	2308      	moveq	r3, #8
 80096b2:	230a      	movne	r3, #10
 80096b4:	2100      	movs	r1, #0
 80096b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096ba:	6865      	ldr	r5, [r4, #4]
 80096bc:	60a5      	str	r5, [r4, #8]
 80096be:	2d00      	cmp	r5, #0
 80096c0:	bfa2      	ittt	ge
 80096c2:	6821      	ldrge	r1, [r4, #0]
 80096c4:	f021 0104 	bicge.w	r1, r1, #4
 80096c8:	6021      	strge	r1, [r4, #0]
 80096ca:	b90e      	cbnz	r6, 80096d0 <_printf_i+0x118>
 80096cc:	2d00      	cmp	r5, #0
 80096ce:	d04d      	beq.n	800976c <_printf_i+0x1b4>
 80096d0:	4615      	mov	r5, r2
 80096d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80096d6:	fb03 6711 	mls	r7, r3, r1, r6
 80096da:	5dc7      	ldrb	r7, [r0, r7]
 80096dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096e0:	4637      	mov	r7, r6
 80096e2:	42bb      	cmp	r3, r7
 80096e4:	460e      	mov	r6, r1
 80096e6:	d9f4      	bls.n	80096d2 <_printf_i+0x11a>
 80096e8:	2b08      	cmp	r3, #8
 80096ea:	d10b      	bne.n	8009704 <_printf_i+0x14c>
 80096ec:	6823      	ldr	r3, [r4, #0]
 80096ee:	07de      	lsls	r6, r3, #31
 80096f0:	d508      	bpl.n	8009704 <_printf_i+0x14c>
 80096f2:	6923      	ldr	r3, [r4, #16]
 80096f4:	6861      	ldr	r1, [r4, #4]
 80096f6:	4299      	cmp	r1, r3
 80096f8:	bfde      	ittt	le
 80096fa:	2330      	movle	r3, #48	; 0x30
 80096fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009700:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009704:	1b52      	subs	r2, r2, r5
 8009706:	6122      	str	r2, [r4, #16]
 8009708:	f8cd a000 	str.w	sl, [sp]
 800970c:	464b      	mov	r3, r9
 800970e:	aa03      	add	r2, sp, #12
 8009710:	4621      	mov	r1, r4
 8009712:	4640      	mov	r0, r8
 8009714:	f7ff fee2 	bl	80094dc <_printf_common>
 8009718:	3001      	adds	r0, #1
 800971a:	d14c      	bne.n	80097b6 <_printf_i+0x1fe>
 800971c:	f04f 30ff 	mov.w	r0, #4294967295
 8009720:	b004      	add	sp, #16
 8009722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009726:	4835      	ldr	r0, [pc, #212]	; (80097fc <_printf_i+0x244>)
 8009728:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800972c:	6829      	ldr	r1, [r5, #0]
 800972e:	6823      	ldr	r3, [r4, #0]
 8009730:	f851 6b04 	ldr.w	r6, [r1], #4
 8009734:	6029      	str	r1, [r5, #0]
 8009736:	061d      	lsls	r5, r3, #24
 8009738:	d514      	bpl.n	8009764 <_printf_i+0x1ac>
 800973a:	07df      	lsls	r7, r3, #31
 800973c:	bf44      	itt	mi
 800973e:	f043 0320 	orrmi.w	r3, r3, #32
 8009742:	6023      	strmi	r3, [r4, #0]
 8009744:	b91e      	cbnz	r6, 800974e <_printf_i+0x196>
 8009746:	6823      	ldr	r3, [r4, #0]
 8009748:	f023 0320 	bic.w	r3, r3, #32
 800974c:	6023      	str	r3, [r4, #0]
 800974e:	2310      	movs	r3, #16
 8009750:	e7b0      	b.n	80096b4 <_printf_i+0xfc>
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	f043 0320 	orr.w	r3, r3, #32
 8009758:	6023      	str	r3, [r4, #0]
 800975a:	2378      	movs	r3, #120	; 0x78
 800975c:	4828      	ldr	r0, [pc, #160]	; (8009800 <_printf_i+0x248>)
 800975e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009762:	e7e3      	b.n	800972c <_printf_i+0x174>
 8009764:	0659      	lsls	r1, r3, #25
 8009766:	bf48      	it	mi
 8009768:	b2b6      	uxthmi	r6, r6
 800976a:	e7e6      	b.n	800973a <_printf_i+0x182>
 800976c:	4615      	mov	r5, r2
 800976e:	e7bb      	b.n	80096e8 <_printf_i+0x130>
 8009770:	682b      	ldr	r3, [r5, #0]
 8009772:	6826      	ldr	r6, [r4, #0]
 8009774:	6961      	ldr	r1, [r4, #20]
 8009776:	1d18      	adds	r0, r3, #4
 8009778:	6028      	str	r0, [r5, #0]
 800977a:	0635      	lsls	r5, r6, #24
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	d501      	bpl.n	8009784 <_printf_i+0x1cc>
 8009780:	6019      	str	r1, [r3, #0]
 8009782:	e002      	b.n	800978a <_printf_i+0x1d2>
 8009784:	0670      	lsls	r0, r6, #25
 8009786:	d5fb      	bpl.n	8009780 <_printf_i+0x1c8>
 8009788:	8019      	strh	r1, [r3, #0]
 800978a:	2300      	movs	r3, #0
 800978c:	6123      	str	r3, [r4, #16]
 800978e:	4615      	mov	r5, r2
 8009790:	e7ba      	b.n	8009708 <_printf_i+0x150>
 8009792:	682b      	ldr	r3, [r5, #0]
 8009794:	1d1a      	adds	r2, r3, #4
 8009796:	602a      	str	r2, [r5, #0]
 8009798:	681d      	ldr	r5, [r3, #0]
 800979a:	6862      	ldr	r2, [r4, #4]
 800979c:	2100      	movs	r1, #0
 800979e:	4628      	mov	r0, r5
 80097a0:	f7f6 fd1e 	bl	80001e0 <memchr>
 80097a4:	b108      	cbz	r0, 80097aa <_printf_i+0x1f2>
 80097a6:	1b40      	subs	r0, r0, r5
 80097a8:	6060      	str	r0, [r4, #4]
 80097aa:	6863      	ldr	r3, [r4, #4]
 80097ac:	6123      	str	r3, [r4, #16]
 80097ae:	2300      	movs	r3, #0
 80097b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b4:	e7a8      	b.n	8009708 <_printf_i+0x150>
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	462a      	mov	r2, r5
 80097ba:	4649      	mov	r1, r9
 80097bc:	4640      	mov	r0, r8
 80097be:	47d0      	blx	sl
 80097c0:	3001      	adds	r0, #1
 80097c2:	d0ab      	beq.n	800971c <_printf_i+0x164>
 80097c4:	6823      	ldr	r3, [r4, #0]
 80097c6:	079b      	lsls	r3, r3, #30
 80097c8:	d413      	bmi.n	80097f2 <_printf_i+0x23a>
 80097ca:	68e0      	ldr	r0, [r4, #12]
 80097cc:	9b03      	ldr	r3, [sp, #12]
 80097ce:	4298      	cmp	r0, r3
 80097d0:	bfb8      	it	lt
 80097d2:	4618      	movlt	r0, r3
 80097d4:	e7a4      	b.n	8009720 <_printf_i+0x168>
 80097d6:	2301      	movs	r3, #1
 80097d8:	4632      	mov	r2, r6
 80097da:	4649      	mov	r1, r9
 80097dc:	4640      	mov	r0, r8
 80097de:	47d0      	blx	sl
 80097e0:	3001      	adds	r0, #1
 80097e2:	d09b      	beq.n	800971c <_printf_i+0x164>
 80097e4:	3501      	adds	r5, #1
 80097e6:	68e3      	ldr	r3, [r4, #12]
 80097e8:	9903      	ldr	r1, [sp, #12]
 80097ea:	1a5b      	subs	r3, r3, r1
 80097ec:	42ab      	cmp	r3, r5
 80097ee:	dcf2      	bgt.n	80097d6 <_printf_i+0x21e>
 80097f0:	e7eb      	b.n	80097ca <_printf_i+0x212>
 80097f2:	2500      	movs	r5, #0
 80097f4:	f104 0619 	add.w	r6, r4, #25
 80097f8:	e7f5      	b.n	80097e6 <_printf_i+0x22e>
 80097fa:	bf00      	nop
 80097fc:	08009da5 	.word	0x08009da5
 8009800:	08009db6 	.word	0x08009db6

08009804 <_read_r>:
 8009804:	b538      	push	{r3, r4, r5, lr}
 8009806:	4d07      	ldr	r5, [pc, #28]	; (8009824 <_read_r+0x20>)
 8009808:	4604      	mov	r4, r0
 800980a:	4608      	mov	r0, r1
 800980c:	4611      	mov	r1, r2
 800980e:	2200      	movs	r2, #0
 8009810:	602a      	str	r2, [r5, #0]
 8009812:	461a      	mov	r2, r3
 8009814:	f7f7 fe28 	bl	8001468 <_read>
 8009818:	1c43      	adds	r3, r0, #1
 800981a:	d102      	bne.n	8009822 <_read_r+0x1e>
 800981c:	682b      	ldr	r3, [r5, #0]
 800981e:	b103      	cbz	r3, 8009822 <_read_r+0x1e>
 8009820:	6023      	str	r3, [r4, #0]
 8009822:	bd38      	pop	{r3, r4, r5, pc}
 8009824:	20004e74 	.word	0x20004e74

08009828 <__swbuf_r>:
 8009828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800982a:	460e      	mov	r6, r1
 800982c:	4614      	mov	r4, r2
 800982e:	4605      	mov	r5, r0
 8009830:	b118      	cbz	r0, 800983a <__swbuf_r+0x12>
 8009832:	6983      	ldr	r3, [r0, #24]
 8009834:	b90b      	cbnz	r3, 800983a <__swbuf_r+0x12>
 8009836:	f7fe ffc7 	bl	80087c8 <__sinit>
 800983a:	4b21      	ldr	r3, [pc, #132]	; (80098c0 <__swbuf_r+0x98>)
 800983c:	429c      	cmp	r4, r3
 800983e:	d12b      	bne.n	8009898 <__swbuf_r+0x70>
 8009840:	686c      	ldr	r4, [r5, #4]
 8009842:	69a3      	ldr	r3, [r4, #24]
 8009844:	60a3      	str	r3, [r4, #8]
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	071a      	lsls	r2, r3, #28
 800984a:	d52f      	bpl.n	80098ac <__swbuf_r+0x84>
 800984c:	6923      	ldr	r3, [r4, #16]
 800984e:	b36b      	cbz	r3, 80098ac <__swbuf_r+0x84>
 8009850:	6923      	ldr	r3, [r4, #16]
 8009852:	6820      	ldr	r0, [r4, #0]
 8009854:	1ac0      	subs	r0, r0, r3
 8009856:	6963      	ldr	r3, [r4, #20]
 8009858:	b2f6      	uxtb	r6, r6
 800985a:	4283      	cmp	r3, r0
 800985c:	4637      	mov	r7, r6
 800985e:	dc04      	bgt.n	800986a <__swbuf_r+0x42>
 8009860:	4621      	mov	r1, r4
 8009862:	4628      	mov	r0, r5
 8009864:	f7ff fade 	bl	8008e24 <_fflush_r>
 8009868:	bb30      	cbnz	r0, 80098b8 <__swbuf_r+0x90>
 800986a:	68a3      	ldr	r3, [r4, #8]
 800986c:	3b01      	subs	r3, #1
 800986e:	60a3      	str	r3, [r4, #8]
 8009870:	6823      	ldr	r3, [r4, #0]
 8009872:	1c5a      	adds	r2, r3, #1
 8009874:	6022      	str	r2, [r4, #0]
 8009876:	701e      	strb	r6, [r3, #0]
 8009878:	6963      	ldr	r3, [r4, #20]
 800987a:	3001      	adds	r0, #1
 800987c:	4283      	cmp	r3, r0
 800987e:	d004      	beq.n	800988a <__swbuf_r+0x62>
 8009880:	89a3      	ldrh	r3, [r4, #12]
 8009882:	07db      	lsls	r3, r3, #31
 8009884:	d506      	bpl.n	8009894 <__swbuf_r+0x6c>
 8009886:	2e0a      	cmp	r6, #10
 8009888:	d104      	bne.n	8009894 <__swbuf_r+0x6c>
 800988a:	4621      	mov	r1, r4
 800988c:	4628      	mov	r0, r5
 800988e:	f7ff fac9 	bl	8008e24 <_fflush_r>
 8009892:	b988      	cbnz	r0, 80098b8 <__swbuf_r+0x90>
 8009894:	4638      	mov	r0, r7
 8009896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009898:	4b0a      	ldr	r3, [pc, #40]	; (80098c4 <__swbuf_r+0x9c>)
 800989a:	429c      	cmp	r4, r3
 800989c:	d101      	bne.n	80098a2 <__swbuf_r+0x7a>
 800989e:	68ac      	ldr	r4, [r5, #8]
 80098a0:	e7cf      	b.n	8009842 <__swbuf_r+0x1a>
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <__swbuf_r+0xa0>)
 80098a4:	429c      	cmp	r4, r3
 80098a6:	bf08      	it	eq
 80098a8:	68ec      	ldreq	r4, [r5, #12]
 80098aa:	e7ca      	b.n	8009842 <__swbuf_r+0x1a>
 80098ac:	4621      	mov	r1, r4
 80098ae:	4628      	mov	r0, r5
 80098b0:	f000 f80c 	bl	80098cc <__swsetup_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d0cb      	beq.n	8009850 <__swbuf_r+0x28>
 80098b8:	f04f 37ff 	mov.w	r7, #4294967295
 80098bc:	e7ea      	b.n	8009894 <__swbuf_r+0x6c>
 80098be:	bf00      	nop
 80098c0:	08009d50 	.word	0x08009d50
 80098c4:	08009d70 	.word	0x08009d70
 80098c8:	08009d30 	.word	0x08009d30

080098cc <__swsetup_r>:
 80098cc:	4b32      	ldr	r3, [pc, #200]	; (8009998 <__swsetup_r+0xcc>)
 80098ce:	b570      	push	{r4, r5, r6, lr}
 80098d0:	681d      	ldr	r5, [r3, #0]
 80098d2:	4606      	mov	r6, r0
 80098d4:	460c      	mov	r4, r1
 80098d6:	b125      	cbz	r5, 80098e2 <__swsetup_r+0x16>
 80098d8:	69ab      	ldr	r3, [r5, #24]
 80098da:	b913      	cbnz	r3, 80098e2 <__swsetup_r+0x16>
 80098dc:	4628      	mov	r0, r5
 80098de:	f7fe ff73 	bl	80087c8 <__sinit>
 80098e2:	4b2e      	ldr	r3, [pc, #184]	; (800999c <__swsetup_r+0xd0>)
 80098e4:	429c      	cmp	r4, r3
 80098e6:	d10f      	bne.n	8009908 <__swsetup_r+0x3c>
 80098e8:	686c      	ldr	r4, [r5, #4]
 80098ea:	89a3      	ldrh	r3, [r4, #12]
 80098ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098f0:	0719      	lsls	r1, r3, #28
 80098f2:	d42c      	bmi.n	800994e <__swsetup_r+0x82>
 80098f4:	06dd      	lsls	r5, r3, #27
 80098f6:	d411      	bmi.n	800991c <__swsetup_r+0x50>
 80098f8:	2309      	movs	r3, #9
 80098fa:	6033      	str	r3, [r6, #0]
 80098fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	e03e      	b.n	8009986 <__swsetup_r+0xba>
 8009908:	4b25      	ldr	r3, [pc, #148]	; (80099a0 <__swsetup_r+0xd4>)
 800990a:	429c      	cmp	r4, r3
 800990c:	d101      	bne.n	8009912 <__swsetup_r+0x46>
 800990e:	68ac      	ldr	r4, [r5, #8]
 8009910:	e7eb      	b.n	80098ea <__swsetup_r+0x1e>
 8009912:	4b24      	ldr	r3, [pc, #144]	; (80099a4 <__swsetup_r+0xd8>)
 8009914:	429c      	cmp	r4, r3
 8009916:	bf08      	it	eq
 8009918:	68ec      	ldreq	r4, [r5, #12]
 800991a:	e7e6      	b.n	80098ea <__swsetup_r+0x1e>
 800991c:	0758      	lsls	r0, r3, #29
 800991e:	d512      	bpl.n	8009946 <__swsetup_r+0x7a>
 8009920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009922:	b141      	cbz	r1, 8009936 <__swsetup_r+0x6a>
 8009924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009928:	4299      	cmp	r1, r3
 800992a:	d002      	beq.n	8009932 <__swsetup_r+0x66>
 800992c:	4630      	mov	r0, r6
 800992e:	f7ff fad3 	bl	8008ed8 <_free_r>
 8009932:	2300      	movs	r3, #0
 8009934:	6363      	str	r3, [r4, #52]	; 0x34
 8009936:	89a3      	ldrh	r3, [r4, #12]
 8009938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800993c:	81a3      	strh	r3, [r4, #12]
 800993e:	2300      	movs	r3, #0
 8009940:	6063      	str	r3, [r4, #4]
 8009942:	6923      	ldr	r3, [r4, #16]
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f043 0308 	orr.w	r3, r3, #8
 800994c:	81a3      	strh	r3, [r4, #12]
 800994e:	6923      	ldr	r3, [r4, #16]
 8009950:	b94b      	cbnz	r3, 8009966 <__swsetup_r+0x9a>
 8009952:	89a3      	ldrh	r3, [r4, #12]
 8009954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800995c:	d003      	beq.n	8009966 <__swsetup_r+0x9a>
 800995e:	4621      	mov	r1, r4
 8009960:	4630      	mov	r0, r6
 8009962:	f000 f847 	bl	80099f4 <__smakebuf_r>
 8009966:	89a0      	ldrh	r0, [r4, #12]
 8009968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800996c:	f010 0301 	ands.w	r3, r0, #1
 8009970:	d00a      	beq.n	8009988 <__swsetup_r+0xbc>
 8009972:	2300      	movs	r3, #0
 8009974:	60a3      	str	r3, [r4, #8]
 8009976:	6963      	ldr	r3, [r4, #20]
 8009978:	425b      	negs	r3, r3
 800997a:	61a3      	str	r3, [r4, #24]
 800997c:	6923      	ldr	r3, [r4, #16]
 800997e:	b943      	cbnz	r3, 8009992 <__swsetup_r+0xc6>
 8009980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009984:	d1ba      	bne.n	80098fc <__swsetup_r+0x30>
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	0781      	lsls	r1, r0, #30
 800998a:	bf58      	it	pl
 800998c:	6963      	ldrpl	r3, [r4, #20]
 800998e:	60a3      	str	r3, [r4, #8]
 8009990:	e7f4      	b.n	800997c <__swsetup_r+0xb0>
 8009992:	2000      	movs	r0, #0
 8009994:	e7f7      	b.n	8009986 <__swsetup_r+0xba>
 8009996:	bf00      	nop
 8009998:	20000018 	.word	0x20000018
 800999c:	08009d50 	.word	0x08009d50
 80099a0:	08009d70 	.word	0x08009d70
 80099a4:	08009d30 	.word	0x08009d30

080099a8 <__swhatbuf_r>:
 80099a8:	b570      	push	{r4, r5, r6, lr}
 80099aa:	460e      	mov	r6, r1
 80099ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b0:	2900      	cmp	r1, #0
 80099b2:	b096      	sub	sp, #88	; 0x58
 80099b4:	4614      	mov	r4, r2
 80099b6:	461d      	mov	r5, r3
 80099b8:	da08      	bge.n	80099cc <__swhatbuf_r+0x24>
 80099ba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80099be:	2200      	movs	r2, #0
 80099c0:	602a      	str	r2, [r5, #0]
 80099c2:	061a      	lsls	r2, r3, #24
 80099c4:	d410      	bmi.n	80099e8 <__swhatbuf_r+0x40>
 80099c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099ca:	e00e      	b.n	80099ea <__swhatbuf_r+0x42>
 80099cc:	466a      	mov	r2, sp
 80099ce:	f000 f89b 	bl	8009b08 <_fstat_r>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	dbf1      	blt.n	80099ba <__swhatbuf_r+0x12>
 80099d6:	9a01      	ldr	r2, [sp, #4]
 80099d8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80099dc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80099e0:	425a      	negs	r2, r3
 80099e2:	415a      	adcs	r2, r3
 80099e4:	602a      	str	r2, [r5, #0]
 80099e6:	e7ee      	b.n	80099c6 <__swhatbuf_r+0x1e>
 80099e8:	2340      	movs	r3, #64	; 0x40
 80099ea:	2000      	movs	r0, #0
 80099ec:	6023      	str	r3, [r4, #0]
 80099ee:	b016      	add	sp, #88	; 0x58
 80099f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080099f4 <__smakebuf_r>:
 80099f4:	898b      	ldrh	r3, [r1, #12]
 80099f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80099f8:	079d      	lsls	r5, r3, #30
 80099fa:	4606      	mov	r6, r0
 80099fc:	460c      	mov	r4, r1
 80099fe:	d507      	bpl.n	8009a10 <__smakebuf_r+0x1c>
 8009a00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009a04:	6023      	str	r3, [r4, #0]
 8009a06:	6123      	str	r3, [r4, #16]
 8009a08:	2301      	movs	r3, #1
 8009a0a:	6163      	str	r3, [r4, #20]
 8009a0c:	b002      	add	sp, #8
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	ab01      	add	r3, sp, #4
 8009a12:	466a      	mov	r2, sp
 8009a14:	f7ff ffc8 	bl	80099a8 <__swhatbuf_r>
 8009a18:	9900      	ldr	r1, [sp, #0]
 8009a1a:	4605      	mov	r5, r0
 8009a1c:	4630      	mov	r0, r6
 8009a1e:	f7fe ffcf 	bl	80089c0 <_malloc_r>
 8009a22:	b948      	cbnz	r0, 8009a38 <__smakebuf_r+0x44>
 8009a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a28:	059a      	lsls	r2, r3, #22
 8009a2a:	d4ef      	bmi.n	8009a0c <__smakebuf_r+0x18>
 8009a2c:	f023 0303 	bic.w	r3, r3, #3
 8009a30:	f043 0302 	orr.w	r3, r3, #2
 8009a34:	81a3      	strh	r3, [r4, #12]
 8009a36:	e7e3      	b.n	8009a00 <__smakebuf_r+0xc>
 8009a38:	4b0d      	ldr	r3, [pc, #52]	; (8009a70 <__smakebuf_r+0x7c>)
 8009a3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8009a3c:	89a3      	ldrh	r3, [r4, #12]
 8009a3e:	6020      	str	r0, [r4, #0]
 8009a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a44:	81a3      	strh	r3, [r4, #12]
 8009a46:	9b00      	ldr	r3, [sp, #0]
 8009a48:	6163      	str	r3, [r4, #20]
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	6120      	str	r0, [r4, #16]
 8009a4e:	b15b      	cbz	r3, 8009a68 <__smakebuf_r+0x74>
 8009a50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009a54:	4630      	mov	r0, r6
 8009a56:	f000 f869 	bl	8009b2c <_isatty_r>
 8009a5a:	b128      	cbz	r0, 8009a68 <__smakebuf_r+0x74>
 8009a5c:	89a3      	ldrh	r3, [r4, #12]
 8009a5e:	f023 0303 	bic.w	r3, r3, #3
 8009a62:	f043 0301 	orr.w	r3, r3, #1
 8009a66:	81a3      	strh	r3, [r4, #12]
 8009a68:	89a0      	ldrh	r0, [r4, #12]
 8009a6a:	4305      	orrs	r5, r0
 8009a6c:	81a5      	strh	r5, [r4, #12]
 8009a6e:	e7cd      	b.n	8009a0c <__smakebuf_r+0x18>
 8009a70:	08008761 	.word	0x08008761

08009a74 <memmove>:
 8009a74:	4288      	cmp	r0, r1
 8009a76:	b510      	push	{r4, lr}
 8009a78:	eb01 0402 	add.w	r4, r1, r2
 8009a7c:	d902      	bls.n	8009a84 <memmove+0x10>
 8009a7e:	4284      	cmp	r4, r0
 8009a80:	4623      	mov	r3, r4
 8009a82:	d807      	bhi.n	8009a94 <memmove+0x20>
 8009a84:	1e43      	subs	r3, r0, #1
 8009a86:	42a1      	cmp	r1, r4
 8009a88:	d008      	beq.n	8009a9c <memmove+0x28>
 8009a8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a92:	e7f8      	b.n	8009a86 <memmove+0x12>
 8009a94:	4402      	add	r2, r0
 8009a96:	4601      	mov	r1, r0
 8009a98:	428a      	cmp	r2, r1
 8009a9a:	d100      	bne.n	8009a9e <memmove+0x2a>
 8009a9c:	bd10      	pop	{r4, pc}
 8009a9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009aa2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009aa6:	e7f7      	b.n	8009a98 <memmove+0x24>

08009aa8 <_realloc_r>:
 8009aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aac:	4680      	mov	r8, r0
 8009aae:	4614      	mov	r4, r2
 8009ab0:	460e      	mov	r6, r1
 8009ab2:	b921      	cbnz	r1, 8009abe <_realloc_r+0x16>
 8009ab4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009ab8:	4611      	mov	r1, r2
 8009aba:	f7fe bf81 	b.w	80089c0 <_malloc_r>
 8009abe:	b92a      	cbnz	r2, 8009acc <_realloc_r+0x24>
 8009ac0:	f7ff fa0a 	bl	8008ed8 <_free_r>
 8009ac4:	4625      	mov	r5, r4
 8009ac6:	4628      	mov	r0, r5
 8009ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009acc:	f000 f83e 	bl	8009b4c <_malloc_usable_size_r>
 8009ad0:	4284      	cmp	r4, r0
 8009ad2:	4607      	mov	r7, r0
 8009ad4:	d802      	bhi.n	8009adc <_realloc_r+0x34>
 8009ad6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ada:	d812      	bhi.n	8009b02 <_realloc_r+0x5a>
 8009adc:	4621      	mov	r1, r4
 8009ade:	4640      	mov	r0, r8
 8009ae0:	f7fe ff6e 	bl	80089c0 <_malloc_r>
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	d0ed      	beq.n	8009ac6 <_realloc_r+0x1e>
 8009aea:	42bc      	cmp	r4, r7
 8009aec:	4622      	mov	r2, r4
 8009aee:	4631      	mov	r1, r6
 8009af0:	bf28      	it	cs
 8009af2:	463a      	movcs	r2, r7
 8009af4:	f7fe ff2d 	bl	8008952 <memcpy>
 8009af8:	4631      	mov	r1, r6
 8009afa:	4640      	mov	r0, r8
 8009afc:	f7ff f9ec 	bl	8008ed8 <_free_r>
 8009b00:	e7e1      	b.n	8009ac6 <_realloc_r+0x1e>
 8009b02:	4635      	mov	r5, r6
 8009b04:	e7df      	b.n	8009ac6 <_realloc_r+0x1e>
	...

08009b08 <_fstat_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	4d07      	ldr	r5, [pc, #28]	; (8009b28 <_fstat_r+0x20>)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	4604      	mov	r4, r0
 8009b10:	4608      	mov	r0, r1
 8009b12:	4611      	mov	r1, r2
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	f7f7 fcec 	bl	80014f2 <_fstat>
 8009b1a:	1c43      	adds	r3, r0, #1
 8009b1c:	d102      	bne.n	8009b24 <_fstat_r+0x1c>
 8009b1e:	682b      	ldr	r3, [r5, #0]
 8009b20:	b103      	cbz	r3, 8009b24 <_fstat_r+0x1c>
 8009b22:	6023      	str	r3, [r4, #0]
 8009b24:	bd38      	pop	{r3, r4, r5, pc}
 8009b26:	bf00      	nop
 8009b28:	20004e74 	.word	0x20004e74

08009b2c <_isatty_r>:
 8009b2c:	b538      	push	{r3, r4, r5, lr}
 8009b2e:	4d06      	ldr	r5, [pc, #24]	; (8009b48 <_isatty_r+0x1c>)
 8009b30:	2300      	movs	r3, #0
 8009b32:	4604      	mov	r4, r0
 8009b34:	4608      	mov	r0, r1
 8009b36:	602b      	str	r3, [r5, #0]
 8009b38:	f7f7 fceb 	bl	8001512 <_isatty>
 8009b3c:	1c43      	adds	r3, r0, #1
 8009b3e:	d102      	bne.n	8009b46 <_isatty_r+0x1a>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	b103      	cbz	r3, 8009b46 <_isatty_r+0x1a>
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	bd38      	pop	{r3, r4, r5, pc}
 8009b48:	20004e74 	.word	0x20004e74

08009b4c <_malloc_usable_size_r>:
 8009b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b50:	1f18      	subs	r0, r3, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bfbc      	itt	lt
 8009b56:	580b      	ldrlt	r3, [r1, r0]
 8009b58:	18c0      	addlt	r0, r0, r3
 8009b5a:	4770      	bx	lr

08009b5c <_init>:
 8009b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b5e:	bf00      	nop
 8009b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b62:	bc08      	pop	{r3}
 8009b64:	469e      	mov	lr, r3
 8009b66:	4770      	bx	lr

08009b68 <_fini>:
 8009b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b6a:	bf00      	nop
 8009b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b6e:	bc08      	pop	{r3}
 8009b70:	469e      	mov	lr, r3
 8009b72:	4770      	bx	lr
